{"version":3,"sources":["components/Cropper/getter.ts","components/Cropper/component.tsx","components/Cropper/style.module.scss"],"names":["cropperJs","createLazyGetter","REQUIRED_IMAGE_STYLES","opacity","maxWidth","ReactCropper","React","forwardRef","ref","props","dragMode","src","style","className","crossOrigin","scaleX","scaleY","enable","zoomTo","rotateTo","alt","ready","onInitialized","rest","defaultOptions","combinedRef","refs","targetRef","useRef","useEffect","forEach","current","useCombinedRefs","useState","initialized","setInitialized","cropper","reset","clear","replace","get","Crop","e","currentTarget","applyDefaultOptions","destroy","imageProps","useMemo","clsx","css","root","disable","size","progress","module","exports"],"mappings":"wLAGaA,EAAYC,4BACvB,kBAAM,wC,2BCWFC,EAAwB,CAAEC,QAAS,EAAGC,SAAU,QAyBhDC,EAAeC,IAAMC,YAGzB,WAAeC,GAAS,IAAlBC,EAAiB,sBAgBnBA,EAdFC,gBAFqB,MAEV,OAFU,EAGrBC,EAaEF,EAbFE,IACAC,EAYEH,EAZFG,MACAC,EAWEJ,EAXFI,UACAC,EAUEL,EAVFK,YACAC,EASEN,EATFM,OACAC,EAQEP,EARFO,OACAC,EAOER,EAPFQ,OACAC,EAMET,EANFS,OACAC,EAKEV,EALFU,SAXqB,EAgBnBV,EAJFW,WAZqB,MAYf,UAZe,EAarBC,EAGEZ,EAHFY,MACAC,EAEEb,EAFFa,cACGC,EAfkB,YAgBnBd,EAhBmB,mIAiBjBe,EAA6C,CACjDR,SACAD,SACAE,SACAC,SACAC,YAGIM,EAhDgB,WAEoB,IAAD,uBADtCC,EACsC,yBADtCA,EACsC,gBACzC,IAAMC,EAAYC,iBAA4B,MAc9C,OAZAtB,IAAMuB,WAAU,WACdH,EAAKI,SAAQ,SAACtB,GACPA,IAEc,oBAARA,EACTA,EAAImB,EAAUI,SAEdvB,EAAIuB,QAAUJ,EAAUI,cAG3B,CAACL,IAEGC,EA+BaK,CAAgBxB,EADnBoB,iBAAyB,OAxBnB,EA0BeK,oBAAS,GA1BxB,mBA0BhBC,EA1BgB,KA0BHC,EA1BG,KA+BvBN,qBAAU,WAAO,IAAD,GACV,UAAAJ,EAAYM,eAAZ,eAAqBK,UAA6B,kBAAXlB,GACzCO,EAAYM,QAAQK,QAAQlB,OAAOA,KAEpC,CAACT,EAAMS,SAKVW,qBAAU,WAAO,IAAD,GACV,UAAAJ,EAAYM,eAAZ,eAAqBK,UAA0B,qBAARzB,GACzCc,EAAYM,QAAQK,QAAQC,QAAQC,QAAQC,QAAQ5B,KAErD,CAACA,IAEJkB,qBAAU,WAqBR,OApBA7B,EAAUwC,KAAI,SAACC,GACb,GAA4B,OAAxBhB,EAAYM,QAAkB,CAChC,IAAMK,EAAU,IAAIK,EAAKhB,EAAYM,QAArB,yBACdrB,YACGa,GAFW,IAGdF,MAAO,SAACqB,GACkB,OAApBA,EAAEC,eACJC,YAAoBF,EAAEC,cAAcP,QAASZ,GAE/CH,GAASA,EAAMqB,OAGnBpB,GAAiBA,EAAcc,GAC/BD,GAAe,OAOZ,WAAO,IAAD,IACX,UAAAV,EAAYM,eAAZ,mBAAqBK,eAArB,SAA8BS,aAE/B,CAACpB,IAEJ,IAAMqB,EAAaxC,IAAMyC,SACvB,8BAAC,eAAWxB,GAAZ,IAAkBT,cAAaH,MAAKS,UACpC,CAACG,EAAMT,EAAaH,EAAKS,IAG3B,OACE,qCACE,qBACER,MAAOA,EACPC,UAAWmC,YAAKC,IAAIC,MAAOhB,GAAee,IAAIE,QAAStC,GAFzD,SAGE,+CAASiC,GAAT,IAAqBlC,MAAOV,EAAuBM,IAAKiB,QAGxDS,GAAe,cAAC,mBAAD,CAAkBkB,KAAM,IAAKvC,UAAWoC,IAAII,iBAKpDhD,a,oBCpIfiD,EAAOC,QAAU,CAAC,KAAO,oBAAoB,QAAU,uBAAuB,SAAW","file":"static/js/103.862b997e.chunk.js","sourcesContent":["import { createLazyGetter } from \"utils\";\r\nimport { Cropper } from \"./types\";\r\n\r\nexport const cropperJs = createLazyGetter<typeof Cropper>(\r\n  () => import(\"./cropper\"),\r\n);\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { CircularProgress } from \"components\";\r\nimport { cropperJs } from \"./getter\";\r\nimport {\r\n  Cropper,\r\n  ReactCropperDefaultOptions,\r\n  ReactCropperElement,\r\n  ReactCropperProps,\r\n  ReactCropperRef,\r\n} from \"./types\";\r\nimport css from \"./style.module.scss\";\r\nimport { applyDefaultOptions } from \".\";\r\n\r\nconst REQUIRED_IMAGE_STYLES = { opacity: 0, maxWidth: \"100%\" };\r\n\r\n/**\r\n * sourced from: https://itnext.io/reusing-the-ref-from-forwardref-with-react-hooks-4ce9df693dd\r\n */\r\nconst useCombinedRefs = (\r\n  ...refs: ReactCropperRef[]\r\n): React.RefObject<ReactCropperElement> => {\r\n  const targetRef = useRef<ReactCropperElement>(null);\r\n\r\n  React.useEffect(() => {\r\n    refs.forEach((ref) => {\r\n      if (!ref) return;\r\n\r\n      if (typeof ref === \"function\") {\r\n        ref(targetRef.current);\r\n      } else {\r\n        ref.current = targetRef.current;\r\n      }\r\n    });\r\n  }, [refs]);\r\n\r\n  return targetRef;\r\n};\r\n\r\nconst ReactCropper = React.forwardRef<\r\n  ReactCropperElement | HTMLImageElement,\r\n  ReactCropperProps\r\n>(({ ...props }, ref) => {\r\n  const {\r\n    dragMode = \"crop\",\r\n    src,\r\n    style,\r\n    className,\r\n    crossOrigin,\r\n    scaleX,\r\n    scaleY,\r\n    enable,\r\n    zoomTo,\r\n    rotateTo,\r\n    alt = \"picture\",\r\n    ready,\r\n    onInitialized,\r\n    ...rest\r\n  } = props;\r\n  const defaultOptions: ReactCropperDefaultOptions = {\r\n    scaleY,\r\n    scaleX,\r\n    enable,\r\n    zoomTo,\r\n    rotateTo,\r\n  };\r\n  const innerRef = useRef<HTMLImageElement>(null);\r\n  const combinedRef = useCombinedRefs(ref, innerRef);\r\n  const [initialized, setInitialized] = useState(false);\r\n\r\n  /**\r\n   * Invoke zoomTo method when cropper is set and zoomTo prop changes\r\n   */\r\n  useEffect(() => {\r\n    if (combinedRef.current?.cropper && typeof zoomTo === \"number\") {\r\n      combinedRef.current.cropper.zoomTo(zoomTo);\r\n    }\r\n  }, [props.zoomTo]);\r\n\r\n  /**\r\n   * re-render when src changes\r\n   */\r\n  useEffect(() => {\r\n    if (combinedRef.current?.cropper && typeof src !== \"undefined\") {\r\n      combinedRef.current.cropper.reset().clear().replace(src);\r\n    }\r\n  }, [src]);\r\n\r\n  useEffect(() => {\r\n    cropperJs.get((Crop) => {\r\n      if (combinedRef.current !== null) {\r\n        const cropper = new Crop(combinedRef.current, {\r\n          dragMode,\r\n          ...rest,\r\n          ready: (e) => {\r\n            if (e.currentTarget !== null) {\r\n              applyDefaultOptions(e.currentTarget.cropper, defaultOptions);\r\n            }\r\n            ready && ready(e);\r\n          },\r\n        });\r\n        onInitialized && onInitialized(cropper);\r\n        setInitialized(true);\r\n      }\r\n    });\r\n\r\n    /**\r\n     * destroy cropper on un-mount\r\n     */\r\n    return () => {\r\n      combinedRef.current?.cropper?.destroy();\r\n    };\r\n  }, [combinedRef]);\r\n\r\n  const imageProps = React.useMemo(\r\n    () => ({ ...rest, crossOrigin, src, alt }),\r\n    [rest, crossOrigin, src, alt],\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={style}\r\n        className={clsx(css.root, !initialized && css.disable, className)}>\r\n        <img {...imageProps} style={REQUIRED_IMAGE_STYLES} ref={combinedRef} />\r\n      </div>\r\n\r\n      {!initialized && <CircularProgress size={150} className={css.progress} />}\r\n    </>\r\n  );\r\n});\r\n\r\nexport default ReactCropper;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"style_root__379Z3\",\"disable\":\"style_disable__1F2DV\",\"progress\":\"style_progress__V9gmu\"};"],"sourceRoot":""}