{"version":3,"sources":["components/Chart/mokeData.ts","components/Chart/component.tsx","utils/ChartJS/index.ts","components/Chart/style.module.scss"],"names":["inputs","min","max","count","Chart","labels","data","bets","canvasRef","useRef","chatRef","allBets","useEffect","current","getConfig","ChartInstance","type","datasets","label","fill","backgroundColor","borderColor","pointRadius","pointBorderWidth","pointBackgroundColor","pointBorderColor","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderWidth","pointHoverBorderColor","pointHitRadius","lineTension","options","helpers","merge","maintainAspectRatio","scales","ticks","fontColor","xAxes","padding","fontSize","gridLines","display","yAxes","lineWidth","legend","tooltips","custom","tooltip","displayColors","callbacks","title","tooltipItem","bet","index","id","bet_amt","profit","payout","coin","win","net_profit_inclusive_usd","bodyFontColor","bodyFontFamily","bodyFontSize","bodySpacing","chartConfig","useMemo","chartJS","instance","config","update","get","ChartJS","pop","forEach","dataset","ref","className","css","canvas","createLazyGetter","module","exports"],"mappings":"sIAEaA,G,KAAS,CACpBC,KAAM,GACNC,IAAK,GACLC,MAAO,I,kBC6IMC,UAzID,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,KACvBC,EAAYC,iBAA0B,MACtCC,EAAUD,mBAEVE,EAAUF,iBAAkBF,GAElCK,qBAAU,WACRD,EAAQE,QAAUN,IACjB,CAACA,IAEJ,IAAMO,EAAY,SAChBC,GAEA,MAAO,CACLC,KAAM,OACNV,KAAM,CACJD,SACAY,SAAU,CACR,CACEC,MAAO,QACPC,MAAM,EACNC,gBAAiB,wBACjBC,YAAa,wBAEbC,YAAa,EACbC,iBAAkB,EAClBC,qBAAsB,UACtBC,iBAAkB,UAElBC,iBAAkB,EAClBC,0BAA2B,UAC3BC,sBAAuB,EACvBC,sBAAuB,UAEvBC,eAAgB,GAChBC,YAAa,EACbzB,UAIN0B,QAAO,OAAEjB,QAAF,IAAEA,OAAF,EAAEA,EAAekB,QAAQC,MAAMlC,EAAQ,CAC5CmC,qBAAqB,EACrBC,OAAQ,CACNC,MAAO,CACLC,UAAW,yBAEbC,MAAO,CACL,CACEF,MAAO,CACLG,QAAS,GACTF,UAAW,wBACXG,SAAU,IAEZC,UAAW,CACTC,SAAS,KAIfC,MAAO,CACL,CACEP,MAAO,CACLG,QAAS,GACTF,UAAW,wBACXG,SAAU,IAEZC,UAAW,CACTG,UAAW,MAKnBC,OAAQ,CACNH,SAAS,GAEXI,SAAU,CACRC,OAAQ,SAACC,GACHA,IAASA,EAAQC,eAAgB,IAEvCC,UAAW,CACTC,MAAO,iBAAM,IACblC,MAAO,SAACmC,EAAkB/C,GACxB,IAAMgD,EAAM3C,EAAQE,QAAQwC,EAAYE,OAExC,MAAO,CAAC,WAAD,QACS,OAAHD,QAAG,IAAHA,OAAA,EAAAA,EAAKE,KAAM,OADjB,gBAEM,OAAHF,QAAG,IAAHA,OAAA,EAAAA,EAAKG,UAAW,OAFnB,mBAGS,OAAHH,QAAG,IAAHA,OAAA,EAAAA,EAAKI,SAAU,OAHrB,kBAIM,iBAAGJ,QAAH,IAAGA,OAAH,EAAGA,EAAKK,OAAR,OAAqB,GAJ3B,iBAKO,OAAHL,QAAG,IAAHA,OAAA,EAAAA,EAAKM,OAAQ,OALjB,gBAMM,OAAHN,QAAG,IAAHA,OAAA,EAAAA,EAAKO,KAAM,IAAM,KANpB,wCAQA,OAAHP,QAAG,IAAHA,OAAA,EAAAA,EAAKQ,2BAA4B,MAR9B,WAaX1C,gBAAiB,OACjB2C,cAAe,UACfC,eAAgB,SAChBC,aAAc,GACdC,YAAa,OAMfC,EAAcC,mBAAoC,WACtD,OAAOtD,EAAUuD,IAAQC,YACxB,CAACjE,EAAQC,EAAMC,IA0BlB,OAxBAK,qBAAU,WACR,GAAKJ,EAAUK,QAcf,OAVKH,EAAQG,SAMXH,EAAQG,QAAQ0D,OAASJ,EACzBzD,EAAQG,QAAQ2D,UANhBH,IAAQI,KAAI,SAACC,GACPlE,EAAUK,UACZH,EAAQG,QAAU,IAAI6D,EAAQlE,EAAUK,QAASC,EAAU4D,QAO1D,WAAO,IAAD,UACX,UAAAhE,EAAQG,eAAR,mBAAiBP,KAAKD,cAAtB,SAA8BsE,MAC9B,UAAAjE,EAAQG,eAAR,mBAAiBP,KAAKW,gBAAtB,SAAgC2D,SAAQ,SAACC,GAAa,IAAD,EACnD,UAAAA,EAAQvE,YAAR,SAAcqE,SAEhB,UAAAjE,EAAQG,eAAR,SAAiB2D,YAElB,CAACL,IAEG,wBAAQW,IAAKtE,EAAWuE,UAAWC,IAAIC,W,iCC7IhD,6CAEaZ,EAAUa,4BAA+B,kBAAM,wC,oBCH5DC,EAAOC,QAAU,CAAC,OAAS","file":"static/js/98.391b3584.chunk.js","sourcesContent":["import { repeat } from \"utils\";\r\n\r\nexport const inputs = {\r\n  min: -30,\r\n  max: 30,\r\n  count: 8,\r\n};\r\n\r\nexport const generateData = () => {\r\n  return repeat(inputs.count, () =>\r\n    Math.round(Math.random() * (inputs.max - inputs.min) + inputs.min),\r\n  );\r\n};\r\n\r\nexport const generateLabels = () => {\r\n  return repeat(inputs.count, (i) => `${i}`);\r\n};\r\n","import React, { useEffect, useMemo, useRef, useState } from \"react\";\r\nimport { BetData } from \"pages/ModalPages/pages/Profile\";\r\nimport { chartJS } from \"utils/ChartJS\";\r\nimport type ChartJS from \"chart.js\";\r\n\r\nimport { ChartProps } from \"./types\";\r\nimport { inputs } from \"./mokeData\";\r\nimport css from \"./style.module.scss\";\r\n\r\nconst Chart = ({ labels, data, bets }: ChartProps) => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const chatRef = useRef<ChartJS>();\r\n\r\n  const allBets = useRef<BetData[]>(bets);\r\n\r\n  useEffect(() => {\r\n    allBets.current = bets;\r\n  }, [bets]);\r\n\r\n  const getConfig = (\r\n    ChartInstance: typeof ChartJS | null,\r\n  ): ChartJS.ChartConfiguration => {\r\n    return {\r\n      type: \"line\",\r\n      data: {\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: \"CRASH\",\r\n            fill: false,\r\n            backgroundColor: \"rgba(255,255,255,0.3)\",\r\n            borderColor: \"rgba(255,255,255,0.3)\",\r\n\r\n            pointRadius: 5,\r\n            pointBorderWidth: 2,\r\n            pointBackgroundColor: \"#22242D\",\r\n            pointBorderColor: \"#64656c\",\r\n\r\n            pointHoverRadius: 8,\r\n            pointHoverBackgroundColor: \"#22242D\",\r\n            pointHoverBorderWidth: 4,\r\n            pointHoverBorderColor: \"#5AEFFF\",\r\n\r\n            pointHitRadius: 20,\r\n            lineTension: 0,\r\n            data,\r\n          },\r\n        ],\r\n      },\r\n      options: ChartInstance?.helpers.merge(inputs, {\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n          ticks: {\r\n            fontColor: \"rgba(255,255,255,0.4)\",\r\n          },\r\n          xAxes: [\r\n            {\r\n              ticks: {\r\n                padding: 10,\r\n                fontColor: \"rgba(255,255,255,0.4)\",\r\n                fontSize: 14,\r\n              },\r\n              gridLines: {\r\n                display: false,\r\n              },\r\n            },\r\n          ],\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                padding: 15,\r\n                fontColor: \"rgba(255,255,255,0.4)\",\r\n                fontSize: 14,\r\n              },\r\n              gridLines: {\r\n                lineWidth: 0,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        legend: {\r\n          display: false,\r\n        },\r\n        tooltips: {\r\n          custom: (tooltip: ChartJS.ChartTooltipModel) => {\r\n            if (tooltip) tooltip.displayColors = false;\r\n          },\r\n          callbacks: {\r\n            title: () => \"\",\r\n            label: (tooltipItem: any, data: any) => {\r\n              const bet = allBets.current[tooltipItem.index];\r\n\r\n              return [\r\n                `Bet ID: ${bet?.id || \"NaN\"}`,\r\n                `Bet: ${bet?.bet_amt || \"NaN\"}`,\r\n                `Profit: ${bet?.profit || \"NaN\"}`,\r\n                `Payout: ${`${bet?.payout}x` || \"NaN\"}`,\r\n                `Coin: ${bet?.coin || \"NaN\"}`,\r\n                `Win: ${bet?.win ? \"Y\" : \"N\"}`,\r\n                `Net Profit (After this bet): ${\r\n                  bet?.net_profit_inclusive_usd || \"NaN\"\r\n                } USD`,\r\n              ];\r\n            },\r\n          },\r\n          backgroundColor: \"#fff\",\r\n          bodyFontColor: \"#22242D\",\r\n          bodyFontFamily: \"Gilroy\",\r\n          bodyFontSize: 12,\r\n          bodySpacing: 8,\r\n        },\r\n      }),\r\n    };\r\n  };\r\n\r\n  const chartConfig = useMemo<ChartJS.ChartConfiguration>(() => {\r\n    return getConfig(chartJS.instance);\r\n  }, [labels, data, bets]);\r\n\r\n  useEffect(() => {\r\n    if (!canvasRef.current) {\r\n      return;\r\n    }\r\n\r\n    if (!chatRef.current) {\r\n      chartJS.get((ChartJS) => {\r\n        if (canvasRef.current)\r\n          chatRef.current = new ChartJS(canvasRef.current, getConfig(ChartJS));\r\n      });\r\n    } else {\r\n      chatRef.current.config = chartConfig;\r\n      chatRef.current.update();\r\n    }\r\n\r\n    return () => {\r\n      chatRef.current?.data.labels?.pop();\r\n      chatRef.current?.data.datasets?.forEach((dataset) => {\r\n        dataset.data?.pop();\r\n      });\r\n      chatRef.current?.update();\r\n    };\r\n  }, [chartConfig]);\r\n\r\n  return <canvas ref={canvasRef} className={css.canvas} />;\r\n};\r\n\r\nexport default Chart;\r\n","import type Chart from \"chart.js\";\r\n\r\nimport { createLazyGetter } from \"utils\";\r\n\r\nexport const chartJS = createLazyGetter<typeof Chart>(() => import(\"chart.js\"));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"canvas\":\"style_canvas__33saG\"};"],"sourceRoot":""}