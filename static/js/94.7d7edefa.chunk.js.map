{"version":3,"sources":["pages/ModalPages/pages/BetData/components/Games/BlackjackComponent/components/GameComponent/style.module.scss","pages/ModalPages/pages/BetData/components/Games/BlackjackComponent/style.module.scss","pages/ModalPages/pages/BetData/components/Games/BlackjackComponent/components/GameComponent/index.tsx","pages/ModalPages/pages/BetData/components/Games/BlackjackComponent/index.tsx"],"names":["module","exports","defaultRootSize","parseInt","css","mobileScreen","initDeckPos","Y","X","GameComponent","deckRef","data","windowSize","useWindowSize","useState","deckPos","setDeckPos","isMobileScreen","setIsMobileScreen","scaleSize","setScaleSize","root","setRoot","player_hand","prepareUserCards","dealer_hand","prepareDealerCards","player2_hand","cardsInHand","useRef","setScreenType","window","innerWidth","useEventListener","useEffect","current","offsetTop","offsetLeft","length","t","setTimeout","clearTimeout","useResizeObserver","width","scale","offsetHeight","ref","className","wrapper","style","transform","undefined","cardClasses","cardRoot","cardFront","cardSize","classes","hand","score","cards","dealer_score","seed","paddingTopMultiplier","labelsWrapper","userBox","userHandRoot","player_score","status","hand1_status","player2_score","hand2_status","BlackjackComponent","props","deck","src","draggable","alt"],"mappings":"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","file":"static/js/94.7d7edefa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"style_root__3q1uW\",\"userBox\":\"style_userBox__1AmrJ\",\"wrapper\":\"style_wrapper__3LVwi\",\"labelsWrapper\":\"style_labelsWrapper__2kuoZ\",\"cardRoot\":\"style_cardRoot__3xC7F\",\"cardSize\":\"style_cardSize__3a-IE\",\"hand\":\"style_hand__1ijpP\",\"score\":\"style_score__qVhBd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrapperPadding\":\"10px\",\"desktopHeaderSize\":\"64px\",\"bottomButtonsSize\":\"60px\",\"desktopChatWidth\":\"310px\",\"swipedChatWidth\":\"960px\",\"arrBlockWidth\":\"12px\",\"headerHeight\":\"60px\",\"inputPadding\":\"16px\",\"chatPadding\":\"16px\",\"inputHeight\":\"56px\",\"chatWidth\":\"280px\",\"spacing\":\"8px\",\"mobileScreen\":\"600px\",\"feyorraDisableSize\":\"1080px\",\"root\":\"style_root__jDEoJ\",\"deck\":\"style_deck__2BHVp\"};","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useEventListener, useResizeObserver } from \"hooks\";\r\nimport css from \"./style.module.scss\";\r\nimport { useWindowSize } from \"providers\";\r\nimport {\r\n  DealerHand,\r\n  UserHand,\r\n} from \"pages/Blackjack/GameScene/components/Game/components\";\r\nimport { InsuranceLayout } from \"pages/Blackjack/GameScene/components\";\r\nimport {\r\n  prepareDealerCards,\r\n  prepareUserCards,\r\n} from \"pages/Blackjack/Controller/components/Reducer/reducer\";\r\nimport { IBlackjackData } from \"../..\";\r\n\r\nconst defaultRootSize = parseInt(css.defaultRootSize);\r\nconst mobileScreen = parseInt(css.mobileScreen);\r\n\r\nexport interface DeckPos {\r\n  Y: number;\r\n  X: number;\r\n}\r\n\r\nconst initDeckPos: DeckPos = {\r\n  Y: 0,\r\n  X: 0,\r\n};\r\n\r\ninterface Props {\r\n  deckRef: React.RefObject<HTMLDivElement>;\r\n  data: IBlackjackData;\r\n}\r\n\r\nconst MOBILE_SCREEN_SIZE_PX = 500;\r\n\r\nexport const GameComponent = ({ deckRef, data }: Props) => {\r\n  const windowSize = useWindowSize();\r\n  const [deckPos, setDeckPos] = useState<DeckPos>(initDeckPos);\r\n  const [isMobileScreen, setIsMobileScreen] = useState(false);\r\n  const [scaleSize, setScaleSize] = useState<number | null>(null);\r\n  const [root, setRoot] = useState<HTMLDivElement | null>(null);\r\n\r\n  const player_hand = prepareUserCards([], data.player_hand);\r\n  const dealer_hand = prepareDealerCards([], data.dealer_hand);\r\n  const player2_hand = data?.player2_hand\r\n    ? prepareUserCards([], data?.player2_hand, true)\r\n    : null;\r\n  const cardsInHand = useRef<{ dealer_hand: number; player_hand: number }>({\r\n    dealer_hand: 0,\r\n    player_hand: 0,\r\n  });\r\n  const setScreenType = () => {\r\n    if (window.innerWidth <= MOBILE_SCREEN_SIZE_PX) {\r\n      return setIsMobileScreen(true);\r\n    }\r\n    setIsMobileScreen(false);\r\n  };\r\n\r\n  useEventListener(\"resize\", setScreenType);\r\n\r\n  useEffect(() => setScreenType(), []);\r\n\r\n  useEffect(() => {\r\n    if (deckRef.current) {\r\n      setDeckPos({\r\n        Y: deckRef.current.offsetTop,\r\n        X: deckRef.current.offsetLeft,\r\n      });\r\n    }\r\n  }, [deckRef.current]);\r\n\r\n  useEffect(() => {\r\n    if (!player_hand || player_hand.length === 0) return;\r\n    if (\r\n      cardsInHand.current.player_hand === 0 ||\r\n      cardsInHand.current.dealer_hand === 0\r\n    ) {\r\n      cardsInHand.current.player_hand = player_hand.length;\r\n      cardsInHand.current.dealer_hand = dealer_hand.length;\r\n    }\r\n    const countNewCard =\r\n      player_hand.length -\r\n      cardsInHand.current.player_hand +\r\n      dealer_hand.length -\r\n      cardsInHand.current.dealer_hand;\r\n\r\n    const t = setTimeout(() => {\r\n      cardsInHand.current.player_hand = player_hand.length;\r\n      cardsInHand.current.dealer_hand = dealer_hand.length;\r\n    }, 500);\r\n\r\n    return () => {\r\n      clearTimeout(t);\r\n    };\r\n  }, [player_hand.length, dealer_hand.length]);\r\n\r\n  useResizeObserver(\r\n    () => {\r\n      if (windowSize.width <= mobileScreen) {\r\n        setScaleSize(null);\r\n        return;\r\n      }\r\n\r\n      if (root) {\r\n        const scale = root.offsetHeight / defaultRootSize;\r\n        setScaleSize(scale);\r\n      }\r\n    },\r\n    root,\r\n    [windowSize],\r\n  );\r\n\r\n  return (\r\n    <div ref={setRoot} className={css.wrapper}>\r\n      <div\r\n        className={css.root}\r\n        style={\r\n          scaleSize\r\n            ? {\r\n                transform: `scale(${scaleSize})`,\r\n              }\r\n            : undefined\r\n        }>\r\n        <DealerHand\r\n          cardClasses={{\r\n            root: css.cardRoot,\r\n            cardFront: css.cardSize,\r\n          }}\r\n          classes={{\r\n            hand: css.hand,\r\n            score: css.score,\r\n          }}\r\n          cards={dealer_hand}\r\n          hand=\"dealer_hand\"\r\n          score={data.dealer_score}\r\n          deckPos={deckPos}\r\n          seed={data.seed}\r\n          isMobileScreen={isMobileScreen}\r\n          paddingTopMultiplier={0.5}\r\n        />\r\n        <InsuranceLayout className={css.labelsWrapper} />\r\n        <div className={css.userBox}>\r\n          <UserHand\r\n            cardClasses={{\r\n              root: css.cardRoot,\r\n              cardFront: css.cardSize,\r\n            }}\r\n            classes={{\r\n              root: css.userHandRoot,\r\n              hand: css.hand,\r\n              score: css.score,\r\n            }}\r\n            cards={player_hand}\r\n            hand=\"player_hand\"\r\n            score={data.player_score}\r\n            status={data.hand1_status}\r\n            deckPos={deckPos}\r\n            seed={data.seed}\r\n            isMobileScreen={isMobileScreen}\r\n            paddingTopMultiplier={0.5}\r\n          />\r\n          {data?.player2_hand &&\r\n          player2_hand &&\r\n          data.player2_score &&\r\n          data.hand2_status ? (\r\n            <UserHand\r\n              cardClasses={{\r\n                root: css.cardRoot,\r\n                cardFront: css.cardSize,\r\n              }}\r\n              classes={{\r\n                hand: css.hand,\r\n                score: css.score,\r\n              }}\r\n              cards={player2_hand}\r\n              hand={\"player2_hand\"}\r\n              score={data.player2_score}\r\n              status={data.hand2_status}\r\n              deckPos={deckPos}\r\n              seed={data.seed}\r\n              isMobileScreen={isMobileScreen}\r\n              paddingTopMultiplier={0.5}\r\n            />\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { FC, useRef } from \"react\";\r\n\r\nimport deck from \"assets/blackjack/deck.png\";\r\n\r\nimport { GameComponent } from \"./components/GameComponent\";\r\nimport { IBlackjackResult } from \"../types\";\r\n\r\nimport css from \"./style.module.scss\";\r\n\r\nexport interface IBlackjackData extends IBlackjackResult {\r\n  seed: string;\r\n}\r\nexport interface IBlackjackComponentProps extends IBlackjackData {}\r\nexport const BlackjackComponent: FC<IBlackjackComponentProps> = (props) => {\r\n  const ref = useRef<HTMLDivElement>(null);\r\n  return (\r\n    <div className={css.root}>\r\n      <div className={css.deck} ref={ref}>\r\n        <img src={deck} draggable={false} alt=\"deck\" />\r\n      </div>\r\n\r\n      <GameComponent deckRef={ref} data={props} />\r\n    </div>\r\n  );\r\n};\r\n"],"sourceRoot":""}