{"version":3,"sources":["pages/Plinko/page.module.scss","pages/Plinko/page.tsx","pages/Plinko/index.tsx","utils/resetFocus.ts"],"names":["module","exports","BettingInformation","React","lazy","LazyComponentLoader","interimProfitValue","profit","amount","profitUpdateWait","throttle","f","PlinkoPage","useState","initialized","setInitialized","multipliers","setMultipliers","PlinkoEngine","setPlinkoEngine","useLocalStorage","colorScheme","gameBlockRef","useRef","Plinko","isFocused","useFetch","fetchConfiguration","configurationData","data","isSoundOpen","setIsSoundOpen","isLiveStatOpen","setIsLiveStatOpen","isHotkeyOpen","setIsHotkeyOpen","isBetInfoOpen","setIsBetInfoOpen","console","log","useSoundSystemControl","playEffect","controlFunctions","soundSystemState","getSoundEffectNames","gamePathNames","PLINKO","hashDice","end","start","soundEffects","useEffect","onFocus","current","onBlur","window","addEventListener","useLayoutEffect","length","container","init","testPlinko","cell","tValue","playBet","clearEnvironment","isGameEffectsPlay","handleBet","clear","a","pins","risk","coin","seed","variables","bet_amt","Number","toFixed","risk_multiplier","client_seed","options","withoutLoading","fetchBase","playBetData","error","resultData","success","payout","liveStatsManager","addBet","roll_number","track","errors","message","JSON","stringify","notifyBarManager","handleLiveStatChange","useCallback","handleLiveStatClose","handleHotKeysClose","className","classes","root","SoundModal","isOpen","onClose","LiveStats","handleClose","game","HotKeys","setEnginRef","item","gameBlock","gameBlockBackground","gameWrapper","ref","gameControllerWrapper","handleSoundChange","resetFocus","handleHotKeysChange","handleBetInfoChange","statisticsWrapper","withFairness","memo","PlinkoWrapper","Seed","gameName","Helmet","name","content","http-equiv","scrollTop","document","body","tmp","createElement","style","position","top","opacity","appendChild","focus","removeChild"],"mappings":"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","file":"static/js/90.d4165b7c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrapperPadding\":\"10px\",\"desktopHeaderSize\":\"64px\",\"bottomButtonsSize\":\"60px\",\"desktopChatWidth\":\"310px\",\"swipedChatWidth\":\"960px\",\"arrBlockWidth\":\"12px\",\"headerHeight\":\"60px\",\"inputPadding\":\"16px\",\"chatPadding\":\"16px\",\"inputHeight\":\"56px\",\"chatWidth\":\"280px\",\"spacing\":\"8px\",\"mobileScreen\":\"600px\",\"feyorraDisableSize\":\"1080px\",\"root\":\"page_root__iZ9vy\",\"item\":\"page_item__28ijD\",\"gameBlock\":\"page_gameBlock__N3L2f\",\"gameWrapper\":\"page_gameWrapper__3RwLr\",\"game\":\"page_game__2FeZM\",\"fps\":\"page_fps__9_4yK\",\"gameBlockBackground\":\"page_gameBlockBackground__3Zh7O\",\"statisticsWrapper\":\"page_statisticsWrapper__rUaVc\",\"gameControllerWrapper\":\"page_gameControllerWrapper__19uDn\"};","import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useLayoutEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\n\r\nimport { Statistics, notifyBarManager } from \"components\";\r\nimport { track, fetchBase, QueryOptions } from \"utils\";\r\nimport { useFetch, useLocalStorage } from \"hooks\";\r\nimport { throttle } from \"utils/lodash\";\r\n\r\nimport LazyComponentLoader from \"config/LazyComponentLoader\";\r\nimport { liveStatsManager } from \"components/LiveStats/eventEmitter/emitter\";\r\nimport { HotKeysModal } from \"components/HotKeys\";\r\nimport LiveStats from \"components/LiveStats\";\r\n\r\nimport type PlinkoEngineType from \"games/Plinko\";\r\nimport { resetFocus } from \"utils/resetFocus\";\r\n\r\nimport { useSoundSystemControl } from \"components/SoundModal/Provider\";\r\nimport { SoundModals } from \"components/SoundModal\";\r\nimport {\r\n  gamePathNames,\r\n  getSoundEffectNames,\r\n} from \"components/SoundModal/Provider/config\";\r\n\r\nimport { Controller, ControllerProps, Game } from \"./components\";\r\nimport classes from \"./page.module.scss\";\r\n\r\nconst BettingInformation = React.lazy(() =>\r\n  LazyComponentLoader(import(\"pages/ModalPages/pages/BettingInformation\")),\r\n);\r\n\r\nexport interface ConfigurationData {\r\n  success: boolean;\r\n  message: string;\r\n  coins: {\r\n    coin: string;\r\n    minimum_bet: string;\r\n    maximum_bet: string;\r\n    maximum_profit: string;\r\n  }[];\r\n  multipliers_table: Record<string, Record<string, number[]>>;\r\n}\r\n\r\nexport interface PlayBetData {\r\n  success: boolean;\r\n  message: string;\r\n  payout: number;\r\n  balance: string;\r\n  win: number;\r\n  roll_number: number;\r\n}\r\n\r\nconst fetchPlayBet = (options: QueryOptions<PlayBetData>) =>\r\n  fetchBase<PlayBetData>(\"plinko/play\", options);\r\n\r\nconst interimProfitValue = {\r\n  profit: 0,\r\n  amount: 0,\r\n};\r\n\r\nconst profitUpdateWait = throttle((f: () => void) => {\r\n  f();\r\n}, 400);\r\n\r\nconst PlinkoPage = () => {\r\n  const [initialized, setInitialized] = useState(false);\r\n  const [multipliers, setMultipliers] = useState<number[]>([]);\r\n\r\n  const [PlinkoEngine, setPlinkoEngine] = useState<PlinkoEngineType>();\r\n  const [colorScheme] = useLocalStorage(\"color-scheme\");\r\n\r\n  const gameBlockRef = useRef<HTMLDivElement>(null);\r\n  const Plinko = useRef<PlinkoEngineType>();\r\n  const isFocused = useRef<boolean>();\r\n\r\n  const [fetchConfiguration, { data: configurationData }] =\r\n    useFetch<ConfigurationData>(\"plinko/get-configuration\");\r\n\r\n  const [isSoundOpen, setIsSoundOpen] = useState(false);\r\n  const [isLiveStatOpen, setIsLiveStatOpen] = useState(false);\r\n  const [isHotkeyOpen, setIsHotkeyOpen] = useState(false);\r\n  const [isBetInfoOpen, setIsBetInfoOpen] = useState(false);\r\n  console.log(multipliers);\r\n\r\n  const {\r\n    controlFunctions: { playEffect },\r\n    soundSystemState,\r\n  } = useSoundSystemControl();\r\n  const { hashDice, end, start } = getSoundEffectNames(gamePathNames.PLINKO);\r\n  const soundEffects = {\r\n    hashDice: () => playEffect(hashDice),\r\n    end: () => playEffect(end),\r\n    start: () => playEffect(start),\r\n  };\r\n  useEffect(() => {\r\n    fetchConfiguration();\r\n  }, [fetchConfiguration]);\r\n\r\n  useEffect(() => {\r\n    const onFocus = () => {\r\n      isFocused.current = true;\r\n    };\r\n\r\n    const onBlur = () => {\r\n      isFocused.current = false;\r\n    };\r\n\r\n    onFocus();\r\n\r\n    window.addEventListener(\"focus\", onFocus);\r\n    window.addEventListener(\"blur\", onBlur);\r\n\r\n    return () => {\r\n      onBlur();\r\n    };\r\n  }, []);\r\n\r\n  useLayoutEffect(() => {\r\n    if (!multipliers?.length || !PlinkoEngine) {\r\n      return;\r\n    }\r\n\r\n    if (gameBlockRef.current && !Plinko.current) {\r\n      Plinko.current = new (PlinkoEngine as any)({\r\n        container: gameBlockRef.current,\r\n      });\r\n    }\r\n\r\n    if (Plinko.current) {\r\n      Plinko.current.init(multipliers, () => {\r\n        setInitialized(true);\r\n      });\r\n\r\n      //@ts-ignore\r\n      window.testPlinko = (cell: number, tValue: number) => {\r\n        Plinko.current?.playBet(cell, () => {}, tValue);\r\n      };\r\n    }\r\n\r\n    return () => {\r\n      if (Plinko.current) {\r\n        Plinko.current.clearEnvironment();\r\n      }\r\n    };\r\n  }, [initialized, multipliers, PlinkoEngine, colorScheme]);\r\n\r\n  useLayoutEffect(() => {\r\n    if (gameBlockRef.current && Plinko.current) {\r\n      Plinko.current.soundEffects = soundEffects;\r\n    }\r\n  }, [\r\n    initialized,\r\n    soundSystemState.isGameEffectsPlay,\r\n    playEffect,\r\n    soundEffects,\r\n  ]);\r\n\r\n  const handleBet: ControllerProps[\"handleBet\"] = async (\r\n    { amount, pins, risk, coin, seed },\r\n    clear,\r\n  ) => {\r\n    let resultData: PlayBetData | undefined;\r\n    const variables = {\r\n      bet_amt: Number(amount).toFixed(8),\r\n      coin,\r\n      pins,\r\n      risk_multiplier: risk,\r\n      client_seed: seed,\r\n    };\r\n\r\n    try {\r\n      const { data: playBetData, error } = await fetchPlayBet({\r\n        variables,\r\n        withoutLoading: true,\r\n      });\r\n\r\n      resultData = playBetData;\r\n\r\n      if (error || !resultData?.success) {\r\n        throw error;\r\n      }\r\n\r\n      if (resultData && isLiveStatOpen) {\r\n        interimProfitValue.profit +=\r\n          Number(variables.bet_amt) * resultData.payout -\r\n          Number(variables.bet_amt);\r\n        interimProfitValue.amount += Number(variables.bet_amt);\r\n\r\n        profitUpdateWait(() => {\r\n          liveStatsManager.addBet({\r\n            profit: interimProfitValue.profit,\r\n            amount: interimProfitValue.amount,\r\n            coin: variables.coin,\r\n          });\r\n\r\n          interimProfitValue.profit = 0;\r\n          interimProfitValue.amount = 0;\r\n        });\r\n      }\r\n\r\n      if (\r\n        isFocused.current &&\r\n        Plinko.current &&\r\n        initialized &&\r\n        playBetData &&\r\n        (playBetData.roll_number || playBetData.roll_number === 0) &&\r\n        playBetData.roll_number < multipliers.length &&\r\n        playBetData.roll_number > 0\r\n      ) {\r\n        Plinko.current.playBet(playBetData.roll_number);\r\n      }\r\n    } catch (error) {\r\n      track()?.errors(error);\r\n\r\n      if (clear) {\r\n        clear();\r\n      }\r\n      const message = `\r\n${error}\r\nPlinko > page > handleBet\r\nMessageEvent: ${JSON.stringify(variables)}`;\r\n\r\n      try {\r\n        track()?.errors(message);\r\n        notifyBarManager.error({\r\n          message: error as string,\r\n        });\r\n      } catch (error) {\r\n        console.log(\"🚀 trackError\", error, variables);\r\n      }\r\n    }\r\n\r\n    return resultData;\r\n  };\r\n\r\n  const handleLiveStatChange = useCallback(() => {\r\n    setIsLiveStatOpen(!isLiveStatOpen);\r\n  }, [isLiveStatOpen]);\r\n  const handleLiveStatClose = useCallback(() => {\r\n    setIsLiveStatOpen(false);\r\n  }, []);\r\n  const handleHotKeysChange = () => {\r\n    resetFocus();\r\n    setIsHotkeyOpen(!isHotkeyOpen);\r\n  };\r\n  const handleSoundChange = () => {\r\n    resetFocus();\r\n    setIsSoundOpen(!isSoundOpen);\r\n  };\r\n  const handleHotKeysClose = useCallback(() => {\r\n    setIsHotkeyOpen(false);\r\n  }, []);\r\n  const handleSoundClose = () => {\r\n    setIsSoundOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <SoundModals isOpen={isSoundOpen} onClose={handleSoundClose} />\r\n      <LiveStats isOpen={isLiveStatOpen} handleClose={handleLiveStatClose} />\r\n      <BettingInformation\r\n        isOpen={isBetInfoOpen}\r\n        onClose={() => setIsBetInfoOpen(false)}\r\n        game=\"plinko\"\r\n      />\r\n      <HotKeysModal isOpen={isHotkeyOpen} onClose={handleHotKeysClose} />\r\n\r\n      <Game setEnginRef={setPlinkoEngine} />\r\n      <div className={classes.item}>\r\n        <div className={classes.gameBlock}>\r\n          <div className={classes.gameBlockBackground}></div>\r\n          <div className={classes.gameWrapper}>\r\n            <div className={classes.game} ref={gameBlockRef} />\r\n          </div>\r\n          <div className={classes.gameControllerWrapper}>\r\n            <Controller\r\n              handleBet={handleBet}\r\n              configurationData={configurationData}\r\n              setMultipliers={setMultipliers}\r\n              handleSoundChange={handleSoundChange}\r\n              handleHotKeysChange={handleHotKeysChange}\r\n              handleLiveStatChange={handleLiveStatChange}\r\n              handleBetInfoChange={() => setIsBetInfoOpen(true)}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className={classes.item}>\r\n        <div className={classes.statisticsWrapper}>\r\n          <Statistics withFairness />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(PlinkoPage);\r\n","import React from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport SeedProvider from \"providers/Seed\";\r\n\r\nimport \"config/themes/_plinko.scss\";\r\n\r\nimport PlinkoPage from \"./page\";\r\n\r\nconst PlinkoWrapper = () => {\r\n  return (\r\n    <SeedProvider gameName=\"plinko\">\r\n      <Helmet>\r\n        <title>Plinko | Crypto Gambling Casino</title>\r\n        <meta name=\"title\" content=\"Play Bitcoin Plinko - Pasino.com\" />\r\n        <meta\r\n          name=\"description\"\r\n          content=\"Let the Plinko ball drop and win huge prizes in DOGE, ETH, Litecoin, and many other cryptocurrencies on pasino.com. \"\r\n        />\r\n        <meta\r\n          name=\"keywords\"\r\n          content=\"Plinko Game, Plinko Gambling, Bitcoin Plinko, Play plinko crypto, \"\r\n        />\r\n        <meta name=\"robots\" content=\"index, follow\" />\r\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n        <meta name=\"language\" content=\"English\" />\r\n      </Helmet>\r\n\r\n      <PlinkoPage />\r\n    </SeedProvider>\r\n  );\r\n};\r\n\r\nexport default React.memo(PlinkoWrapper);\r\n","export function resetFocus() {\r\n  let scrollTop = document.body.scrollTop;\r\n  let body = document.body;\r\n\r\n  let tmp = document.createElement(\"input\");\r\n  tmp.style.position = \"fixed\";\r\n  tmp.style.top = \"0\";\r\n  tmp.style.opacity = \"0\";\r\n  body.appendChild(tmp);\r\n  tmp.focus();\r\n  body.removeChild(tmp);\r\n  body.scrollTop = scrollTop;\r\n}\r\n"],"sourceRoot":""}