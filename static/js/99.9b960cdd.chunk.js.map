{"version":3,"sources":["pages/Tower/index.tsx","containers/Layout/Modals/getModalsProps.ts"],"names":["Fairness","React","lazy","LazyComponentLoader","Page","TowerGame","location","useLocation","useLocalStorage","token","gameName","fallback","getModalsProps","modalSearch","name","value","isAuthorizedOnly","path","redirectCallback","isOpen","modalName","code","URLSearchParams","search","get","paths","pathname","split","filter","v","isModal","includes","props"],"mappings":"+pDAYA,IAAMA,EAAWC,IAAMC,MAAK,kBAC1BC,YAAoB,mCAGhBC,EAAOH,IAAMC,MAAK,kBAAMC,YAAoB,oCA8BnCE,UA5BG,WAChB,IAAMC,EAAWC,cADK,EAENC,YAAgB,SAAzBC,EAFe,oBAItB,OACE,qCACE,cAAC,IAAD,UACE,sEAEF,cAAC,IAAD,CAAcC,SAAS,SAAvB,SACE,eAAC,WAAD,CAAUC,SAAU,cAAC,eAAD,IAApB,UACE,cAACP,EAAD,IAEA,cAACJ,EAAD,eACMY,YAAe,CACjBC,YAAa,CAAEC,KAAM,QAASC,MAAO,YACrCC,kBAAkB,EAClBV,WACAG,sB,iCC3Bd,kCAAO,IAAMG,EAAiB,SAAC,GAOuB,IANpDK,EAMmD,EANnDA,KACAJ,EAKmD,EALnDA,YACAG,EAImD,EAJnDA,iBACAP,EAGmD,EAHnDA,MACAH,EAEmD,EAFnDA,SACAY,EACmD,EADnDA,iBAEIC,GAAS,EACTC,EAAY,GAEZC,EAD4B,IAAIC,gBAAgBhB,EAASiB,QAC3CC,IAAI,SAAW,GAC3BC,EAAQnB,EAASoB,SAASC,MAAM,KAAKC,QAAO,SAACC,GAAD,OAAOA,KAOzD,GANIZ,GACEA,IAASX,EAASoB,WACpBP,GAAS,GAITN,EAAa,CAAC,IACRC,EAAgBD,EAAhBC,KAAMC,EAAUF,EAAVE,MACVe,GAAU,EACO,kBAAVf,IACTe,EAAUL,EAAMM,SAASjB,IAEvBgB,GAAWL,EAAMM,SAAShB,KAC5BK,EAAYL,EACZI,GAAS,GASb,OALIH,IAAqBP,GAASU,IAChCD,GAAoBA,GAAiB,GACrCC,GAAS,GAGJ,CACLA,SACAC,YACAC,OACAW,MAAO","file":"static/js/99.9b960cdd.chunk.js","sourcesContent":["import React, { Suspense } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport { GameFallBack } from \"components\";\r\nimport { useLocalStorage } from \"hooks\";\r\n\r\nimport LazyComponentLoader from \"config/LazyComponentLoader\";\r\nimport { getModalsProps } from \"containers/Layout/Modals/getModalsProps\";\r\nimport SeedProvider from \"providers/Seed\";\r\nimport \"config/themes/_tower.scss\";\r\n\r\nconst Fairness = React.lazy(() =>\r\n  LazyComponentLoader(import(\"pages/ModalPages/pages/Fairness\")),\r\n);\r\n\r\nconst Page = React.lazy(() => LazyComponentLoader(import(\"./page\")));\r\n\r\nconst TowerGame = () => {\r\n  const location = useLocation();\r\n  const [token] = useLocalStorage(\"token\");\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Towers | Crypto Gambling Casino</title>\r\n      </Helmet>\r\n      <SeedProvider gameName=\"towers\">\r\n        <Suspense fallback={<GameFallBack />}>\r\n          <Page />\r\n\r\n          <Fairness\r\n            {...getModalsProps({\r\n              modalSearch: { name: \"modal\", value: \"fairness\" },\r\n              isAuthorizedOnly: true,\r\n              location,\r\n              token,\r\n            })}\r\n          />\r\n        </Suspense>\r\n      </SeedProvider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport * from \"./controller\";\r\nexport default TowerGame;\r\n","import { ModalRouteType, ModalsProps } from \"config/routes\";\r\nimport * as H from \"history\";\r\n\r\ninterface GetModalsProps extends Omit<ModalRouteType, \"Component\"> {\r\n  token: string | null;\r\n  location: H.Location<unknown>;\r\n  redirectCallback?: (isOpen: boolean) => void;\r\n}\r\n\r\nexport const getModalsProps = ({\r\n  path,\r\n  modalSearch,\r\n  isAuthorizedOnly,\r\n  token,\r\n  location,\r\n  redirectCallback,\r\n}: GetModalsProps): Omit<ModalsProps, \"gameName\"> => {\r\n  let isOpen = false;\r\n  let modalName = \"\";\r\n  const params: URLSearchParams = new URLSearchParams(location.search);\r\n  let code = params.get(\"code\") || \"\";\r\n  const paths = location.pathname.split(\"/\").filter((v) => v);\r\n  if (path) {\r\n    if (path === location.pathname) {\r\n      isOpen = true;\r\n    }\r\n  }\r\n\r\n  if (modalSearch) {\r\n    const { name, value } = modalSearch;\r\n    let isModal = false;\r\n    if (typeof value === \"string\") {\r\n      isModal = paths.includes(name);\r\n    }\r\n    if (isModal && paths.includes(value)) {\r\n      modalName = value;\r\n      isOpen = true;\r\n    }\r\n  }\r\n\r\n  if (isAuthorizedOnly && !token && isOpen) {\r\n    redirectCallback && redirectCallback(true);\r\n    isOpen = false;\r\n  }\r\n\r\n  return {\r\n    isOpen,\r\n    modalName,\r\n    code,\r\n    props: {},\r\n  };\r\n};\r\n"],"sourceRoot":""}