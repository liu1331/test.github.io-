{"version":3,"sources":["components/Statistics/Tabs/AffiliateBattle/Content.tsx","components/Statistics/Tabs/AffiliateBattle/style.module.scss"],"names":["mobileScreen","parseInt","css","avatarStyles","width","height","medals","GoldMedal","SilverMedal","CooperMedal","scrollStyle","mobileScrollStyle","interval","longInterval","AffiliateBattle","open","intl","useGetLocale","isMobile","useWindowSize","useFetch","contestFetch","contestData","data","personalFetch","personalData","useState","sended","setSended","leaderBoard","setLeaderBoard","timeEndOn","setTimeEndOn","myWagered","setMyWagered","useEffect","setInterval","affiliate_battle_leaderboard","time","affiliate_battle_ends_on","padEnd","Number","Date","now","my_referred_wagered_amount","clearInterval","formatMessage","getIntlValue","className","root","info","raceBox","raceText","timeBox","timeTitle","overtime","date","timer","renderer","CountdownRenderer","timeText","wageredAmount","toFixed","tableWrapper","scrollbarStyle","style","tableTitle","id","head","values","classes","th","body","rows","map","position","reward_usd","user_name","profile_picture_url","total_referral_wagered_competition","Medal","medal","setPlayerSearchParams","tCellData","clsx","circle","userLogo","userName","avatar","money","td","module","exports"],"mappings":"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","file":"static/js/107.f0263b75.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nimport Countdown from \"react-countdown\";\r\nimport { useGetLocale } from \"providers\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { Avatar, LinkWithSearch, Table } from \"components\";\r\nimport { getIntlValue, useWindowSize } from \"providers\";\r\nimport { useFetch } from \"hooks\";\r\n\r\nimport { Scrollbar } from \"components/Scrollbar\";\r\nimport { setPlayerSearchParams } from \"components/LinkWithSearch/utils\";\r\nimport { ReactComponent as GoldMedal } from \"assets/icons/gold-medal.svg\";\r\nimport { ReactComponent as SilverMedal } from \"assets/icons/silver-medal.svg\";\r\nimport { ReactComponent as CooperMedal } from \"assets/icons/cooper-medal.svg\";\r\n\r\nimport { CountdownRenderer } from \"../WageringRace/components/CountdownRenderer\";\r\nimport { UserWagered } from \"../WageringRace/types\";\r\nimport { WageringType, LeaderboardType } from \"./types\";\r\nimport css from \"./style.module.scss\";\r\n\r\nconst mobileScreen = parseInt(css.mobileScreen);\r\nconst avatarStyles = { width: 32, height: 32 };\r\nconst medals = [GoldMedal, SilverMedal, CooperMedal];\r\nconst scrollStyle = { height: 730 };\r\nconst mobileScrollStyle = { height: 375 };\r\n\r\ninterface Props {\r\n  open: boolean;\r\n}\r\nlet interval: NodeJS.Timeout | null = null;\r\nlet longInterval: NodeJS.Timeout | null = null;\r\n\r\nconst clearInt = () => {\r\n  if (interval) {\r\n    clearInterval(interval);\r\n    interval = null;\r\n  }\r\n  if (longInterval) {\r\n    clearInterval(longInterval);\r\n    longInterval = null;\r\n  }\r\n};\r\n\r\nconst AffiliateBattle = ({ open }: Props) => {\r\n  const intl = useGetLocale();\r\n  const { width } = useWindowSize();\r\n  const isMobile = width < mobileScreen;\r\n\r\n  const [contestFetch, { data: contestData }] =\r\n    useFetch<WageringType>(\"statistics/contest\");\r\n  const [personalFetch, { data: personalData }] = useFetch<UserWagered>(\r\n    \"statistics/contest-personal\",\r\n  );\r\n  const [sended, setSended] = useState(false);\r\n  const [leaderBoard, setLeaderBoard] = useState<\r\n    LeaderboardType[] | undefined\r\n  >();\r\n  const [timeEndOn, setTimeEndOn] = useState<number | null>(null);\r\n  const [myWagered, setMyWagered] = useState<string | undefined>();\r\n\r\n  useEffect(() => {\r\n    if (open) {\r\n      if (!sended) {\r\n        contestFetch();\r\n        personalFetch();\r\n\r\n        setSended(true);\r\n      } else {\r\n        if (!interval) {\r\n          interval = setInterval(() => {\r\n            contestFetch();\r\n          }, 10000);\r\n        }\r\n        if (!longInterval) {\r\n          longInterval = setInterval(() => {\r\n            personalFetch();\r\n          }, 180000);\r\n        }\r\n      }\r\n\r\n      if (contestData) {\r\n        setLeaderBoard(contestData.affiliate_battle_leaderboard);\r\n        const time = contestData.affiliate_battle_ends_on.padEnd(13, \"0\");\r\n\r\n        if (Number(time) - Date.now() >= 0) {\r\n          setTimeEndOn(Number(time));\r\n        } else {\r\n          setTimeEndOn(null);\r\n        }\r\n      }\r\n      if (personalData) {\r\n        setMyWagered(personalData.my_referred_wagered_amount);\r\n      }\r\n    } else {\r\n      clearInt();\r\n      if (sended) {\r\n        setSended(false);\r\n      }\r\n    }\r\n  }, [open, contestData, sended]);\r\n\r\n  const formatMessage = getIntlValue(\r\n    intl,\r\n    \"gameTemplate.statistics.affiliateTable.\",\r\n  );\r\n\r\n  return (\r\n    <div className={css.root}>\r\n      <div className={css.info}>\r\n        <div className={css.raceBox}>\r\n          <span className={css.raceText}>{formatMessage(\"text\")}</span>\r\n        </div>\r\n\r\n        <div className={css.timeBox}>\r\n          <p className={css.timeTitle}>{formatMessage(\"timeTitle\")}</p>\r\n          {timeEndOn ? (\r\n            <Countdown\r\n              overtime\r\n              date={timeEndOn}\r\n              className={css.timer}\r\n              renderer={CountdownRenderer}\r\n            />\r\n          ) : (\r\n            <p className={css.timeText}>{formatMessage(\"processing\")}</p>\r\n          )}\r\n        </div>\r\n\r\n        {myWagered ? (\r\n          <div className={css.timeBox}>\r\n            <p className={css.timeTitle}>{formatMessage(\"wageredTitle\")}</p>\r\n            <div className={css.wageredAmount}>\r\n              {Number(myWagered).toFixed(5)}\r\n              <span>USD</span>\r\n            </div>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n      <div className={css.tableWrapper}>\r\n        <Scrollbar\r\n          className={css.scrollbarStyle}\r\n          style={isMobile ? mobileScrollStyle : scrollStyle}>\r\n          <div className={css.tableTitle}>\r\n            {intl.formatMessage({\r\n              id: \"gameTemplate.statistics.wageringTable.currentRanking\",\r\n            })}\r\n          </div>\r\n          <Table\r\n            head={{\r\n              values: [\r\n                formatMessage(\"position\"),\r\n                formatMessage(\"user\"),\r\n                formatMessage(\"reward\"),\r\n                formatMessage(\"total\"),\r\n              ],\r\n              classes: {\r\n                th: css.th,\r\n              },\r\n            }}\r\n            body={{\r\n              rows: leaderBoard?.map(\r\n                ({\r\n                  position,\r\n                  reward_usd,\r\n                  user_name,\r\n                  profile_picture_url,\r\n                  total_referral_wagered_competition,\r\n                }) => {\r\n                  const Medal = medals[position - 1];\r\n\r\n                  return {\r\n                    values: [\r\n                      Medal ? <Medal className={css.medal} /> : position,\r\n\r\n                      <LinkWithSearch {...setPlayerSearchParams(user_name)}>\r\n                        <div className={css.tCellData}>\r\n                          <div className={clsx(css.circle, css.userLogo)}>\r\n                            <Avatar\r\n                              userName={user_name}\r\n                              style={avatarStyles}\r\n                              avatar={profile_picture_url}\r\n                            />\r\n                          </div>\r\n                          {user_name}\r\n                        </div>\r\n                      </LinkWithSearch>,\r\n\r\n                      <span className={css.money}>{reward_usd} USD</span>,\r\n\r\n                      <span className={css.money}>\r\n                        {total_referral_wagered_competition} USD\r\n                      </span>,\r\n                    ],\r\n\r\n                    classes: {\r\n                      td: css.td,\r\n                    },\r\n                  };\r\n                },\r\n              ),\r\n            }}\r\n          />\r\n        </Scrollbar>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AffiliateBattle;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrapperPadding\":\"10px\",\"desktopHeaderSize\":\"64px\",\"bottomButtonsSize\":\"60px\",\"desktopChatWidth\":\"310px\",\"swipedChatWidth\":\"960px\",\"arrBlockWidth\":\"12px\",\"headerHeight\":\"60px\",\"inputPadding\":\"16px\",\"chatPadding\":\"16px\",\"inputHeight\":\"56px\",\"chatWidth\":\"280px\",\"spacing\":\"8px\",\"mobileScreen\":\"600px\",\"feyorraDisableSize\":\"1080px\",\"root\":\"style_root__2eBWZ\",\"info\":\"style_info___nJIX\",\"raceText\":\"style_raceText__3xXax\",\"raceBox\":\"style_raceBox__3vjTF\",\"tableWrapper\":\"style_tableWrapper__MbCwN\",\"tableTitle\":\"style_tableTitle__1PhQK\",\"tCellData\":\"style_tCellData__23jKf\",\"circle\":\"style_circle__3xOaz\",\"userLogo\":\"style_userLogo__2w9Ej\",\"medal\":\"style_medal__1-UO4\",\"timeBox\":\"style_timeBox__1je4c\",\"timeTitle\":\"style_timeTitle__hvgYt\",\"timeText\":\"style_timeText__1SCV4\",\"wageredAmount\":\"style_wageredAmount__2SHiO\",\"timer\":\"style_timer__16Nnc\",\"th\":\"style_th__zg3sk\",\"td\":\"style_td__3Ybgz\",\"money\":\"style_money__3eOAQ\"};"],"sourceRoot":""}