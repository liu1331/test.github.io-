{"version":3,"sources":["components/Statistics/Tabs/YourBets/style.module.scss","components/Statistics/Tabs/YourBets/YourBets.tsx","components/Statistics/Tabs/YourBets/createBetsTableData.tsx"],"names":["module","exports","pathGame","wait","throttle","f","socketListenerValues","YourBets","open","intl","useGetLocale","useState","betsList","setBetsList","useCoins","coinsPrices","showInUSD","useModalLocation","pushHistoryTo","location","user","close","useUser","getTableHeaderName","getIntlValue","useEffect","interim","chatSocket","send","type","chatPipeFunctions","statisticMyBetsListener","data","action","bets","length","Object","values","bet","bet_amt","coin","game","id","payout","profile_picture_url","profit","user_name","unshift","updateBetList","tableData","showUSD","coinPrice","userName","callBack","slice","map","Number","price","toFixed","toString","className","css","tableContent","letterFormat","clsx","coinWrapper","coinIcon","replaceNumbers","profitLose","key","createBetsTableData","searchParams","state","background","pathname","wrapper","tableWrapper","head","body","rows","classes","td","allButtonWrapper","onClick","search","name","value","formatMessage"],"mappings":"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","file":"static/js/110.58b05c23.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrapperPadding\":\"10px\",\"desktopHeaderSize\":\"64px\",\"bottomButtonsSize\":\"60px\",\"desktopChatWidth\":\"310px\",\"swipedChatWidth\":\"960px\",\"arrBlockWidth\":\"12px\",\"headerHeight\":\"60px\",\"inputPadding\":\"16px\",\"chatPadding\":\"16px\",\"inputHeight\":\"56px\",\"chatWidth\":\"280px\",\"spacing\":\"8px\",\"mobileScreen\":\"600px\",\"feyorraDisableSize\":\"1080px\",\"wrapper\":\"style_wrapper__o_3Th\",\"tableWrapper\":\"style_tableWrapper__3DFtF\",\"tableContent\":\"style_tableContent__1AsYw\",\"profit\":\"style_profit__2pf-y\",\"profitLose\":\"style_profitLose__RoF-e\",\"coinWrapper\":\"style_coinWrapper__38QfQ\",\"coinIcon\":\"style_coinIcon__3dWIH\",\"allButtonWrapper\":\"style_allButtonWrapper__Pi-XS\",\"td\":\"style_td__3kSBL\"};","import React, { useState, useEffect } from \"react\";\r\nimport { useGetLocale } from \"providers\";\r\n\r\nimport { Button, chatPipeFunctions, Table } from \"components\";\r\nimport { getIntlValue } from \"providers\";\r\nimport { chatSocket } from \"utils\";\r\nimport { useCoins, useModalLocation } from \"hooks\";\r\nimport { throttle } from \"utils/lodash\";\r\n\r\nimport { useUser } from \"providers/User\";\r\n// import { chatSocketsList } from \"components/Chat/chatSocketWatcher\";\r\n// import { StatisticMyBetsTypes } from \"components/Chat/chatWatcherTypes\";\r\n\r\nimport { createBetsTableData } from \"./createBetsTableData\";\r\nimport css from \"./style.module.scss\";\r\n\r\nexport interface YourBetsElement {\r\n  id: string;\r\n  payout: string;\r\n  hash: string;\r\n}\r\n\r\nexport interface BetType {\r\n  game: string;\r\n  bet_amt: string;\r\n  payout: string;\r\n  profit: string;\r\n  id: string;\r\n  user_name?: string;\r\n  coin?: string;\r\n}\r\n\r\ninterface Props {\r\n  open: boolean;\r\n}\r\n\r\ninterface PathGame {\r\n  \"/hash-dice\": \"Dice\";\r\n  \"/crash\": \"Crash\";\r\n  \"/plinko\": \"Plinko\";\r\n  \"/limbo\": \"Limbo\";\r\n  \"/video-poker\": \"Video Poker\";\r\n  \"/roulette\": \"Roulette\";\r\n  \"/blackjack\": \"Blackjack\";\r\n  \"/towers\": \"Towers\";\r\n  [key: string]: string;\r\n}\r\n\r\nexport const pathGame: PathGame = {\r\n  \"/hash-dice\": \"Dice\",\r\n  \"/crash\": \"Crash\",\r\n  \"/plinko\": \"Plinko\",\r\n  \"/limbo\": \"Limbo\",\r\n  \"/video-poker\": \"Video Poker\",\r\n  \"/roulette\": \"Roulette\",\r\n  \"/blackjack\": \"Blackjack\",\r\n  \"/towers\": \"Towers\",\r\n};\r\n\r\nconst wait = throttle((f: () => void) => {\r\n  f();\r\n}, 500);\r\n\r\ninterface SocketListenerValues {\r\n  betsList?: BetType[];\r\n  setBetsList?: (v: BetType[]) => void;\r\n}\r\nconst socketListenerValues: SocketListenerValues = {};\r\n\r\nconst updateBetList = (values: BetType[]) => {\r\n  const { betsList, setBetsList } = socketListenerValues;\r\n  if (betsList && setBetsList) {\r\n    const bets = [...values, ...betsList];\r\n\r\n    if (bets.length > 10) {\r\n      bets.length = 10;\r\n    }\r\n\r\n    setBetsList(bets);\r\n    values.length = 0;\r\n  }\r\n};\r\n\r\nconst YourBets = ({ open }: Props) => {\r\n  const intl = useGetLocale();\r\n\r\n  const [betsList, setBetsList] = useState<BetType[]>([]);\r\n  const { coinsPrices, showInUSD } = useCoins([\"coinsPrices\", \"showInUSD\"]);\r\n\r\n  socketListenerValues.betsList = betsList;\r\n  socketListenerValues.setBetsList = setBetsList;\r\n\r\n  const { pushHistoryTo, location, close } = useModalLocation(\"bet-data\");\r\n  const { user } = useUser();\r\n\r\n  const getTableHeaderName = getIntlValue(\r\n    intl,\r\n    \"gameTemplate.statistics.yourBetsTable.tHead.\",\r\n  );\r\n\r\n  const handleOpenData = (id: string, user_name: string) => {\r\n    pushHistoryTo({\r\n      searchParams: {\r\n        id,\r\n        userName: user_name,\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleHistoryOpen = () => {\r\n    pushHistoryTo({ search: { name: \"page\", value: \"game-history\" } });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (open) {\r\n      const interim: BetType[] = [];\r\n\r\n      const listener = (data: any) => {\r\n        // data: StatisticMyBetsTypes\r\n\r\n        switch (data.action) {\r\n          case \"my_bets\":\r\n            if (data.bets) {\r\n              if (data.bets?.length) {\r\n                setBetsList(data.bets);\r\n              } else if (typeof data.bets === \"object\") {\r\n                setBetsList(Object.values(data.bets));\r\n              }\r\n            }\r\n            break;\r\n\r\n          case \"new_bet_received\":\r\n            const bet = {\r\n              bet_amt: data.bet_amt,\r\n              coin: data.coin,\r\n              game: data.game,\r\n              id: data.id,\r\n              payout: data.payout,\r\n              profile_picture_url: data.profile_picture_url,\r\n              profit: data.profit,\r\n              user_name: data.user_name,\r\n            };\r\n\r\n            if (bet.user_name === user?.user_name) {\r\n              interim.unshift(bet);\r\n\r\n              wait(() => {\r\n                updateBetList(interim);\r\n              });\r\n            }\r\n\r\n            break;\r\n\r\n          case \"set_user_parameters\":\r\n            chatSocket.send({ type: \"get_my_bets\" });\r\n            break;\r\n\r\n          default:\r\n            break;\r\n        }\r\n      };\r\n\r\n      chatSocket.send({ type: \"get_my_bets\" });\r\n      chatPipeFunctions.statisticMyBetsListener = listener;\r\n    } else {\r\n      chatPipeFunctions.statisticMyBetsListener = () => null;\r\n    }\r\n\r\n    return () => {\r\n      chatPipeFunctions.statisticMyBetsListener = () => null;\r\n    };\r\n  }, [open, user?.user_name]);\r\n\r\n  if (!open) {\r\n    return null;\r\n  }\r\n\r\n  const tableData = createBetsTableData(\r\n    betsList,\r\n    showInUSD,\r\n    coinsPrices,\r\n    user?.user_name || \"\",\r\n    handleOpenData,\r\n  );\r\n  const game =\r\n    location.state && location.state.background\r\n      ? location.state.background.pathname\r\n      : location.pathname;\r\n\r\n  return (\r\n    <div className={css.wrapper}>\r\n      <div className={css.tableWrapper}>\r\n        <Table\r\n          head={{\r\n            values: [\r\n              getTableHeaderName(\"game\"),\r\n              getTableHeaderName(\"payout\"),\r\n              getTableHeaderName(\"betAmt\"),\r\n              getTableHeaderName(\"profit\"),\r\n            ],\r\n          }}\r\n          body={{\r\n            rows: tableData,\r\n            classes: {\r\n              td: css.td,\r\n            },\r\n          }}\r\n        />\r\n\r\n        <div className={css.allButtonWrapper}>\r\n          <Button onClick={handleHistoryOpen}>\r\n            {intl.formatMessage(\r\n              { id: \"gameTemplate.statistics.yourBetsTable.allHistoryButton\" },\r\n              {\r\n                game: pathGame[game],\r\n              },\r\n            )}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default YourBets;\r\n","import React from \"react\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { letterFormat, replaceNumbers } from \"utils\";\r\nimport { GetCoinImg, Typography } from \"components\";\r\nimport { CoinPriceList } from \"hooks\";\r\n\r\nimport css from \"./style.module.scss\";\r\nimport { BetType } from \"./YourBets\";\r\n\r\nexport const createBetsTableData = (\r\n  betsList: BetType[],\r\n  showUSD: boolean,\r\n  coinPrice: CoinPriceList,\r\n  userName: string,\r\n  callBack: (id: string, user_name: string) => void,\r\n) =>\r\n  betsList.slice(0, 10).map(({ game, payout, bet_amt, profit, coin, id }) => {\r\n    if (game === \"VIDEOPOKER\") {\r\n      game = \"VIDEO POKER\";\r\n    }\r\n    bet_amt =\r\n      showUSD && coin && coin !== \"GEM\"\r\n        ? (Number(bet_amt) * Number(coinPrice[coin]?.price))\r\n            .toFixed(8)\r\n            .toString()\r\n        : bet_amt;\r\n    profit =\r\n      showUSD && coin && coin !== \"GEM\"\r\n        ? (Number(profit) * Number(coinPrice[coin]?.price))\r\n            .toFixed(8)\r\n            .toString()\r\n        : profit;\r\n\r\n    const values = [\r\n      <Typography className={css.tableContent}>\r\n        {letterFormat(game, true)}\r\n      </Typography>,\r\n\r\n      <Typography className={css.tableContent}>{payout}x</Typography>,\r\n\r\n      <Typography className={clsx(css.coinWrapper, css.tableContent)}>\r\n        <GetCoinImg coin={coin || \"BTC\"} className={css.coinIcon} />\r\n        {showUSD && coin !== \"GEM\" ? \"$\" : null}\r\n        {replaceNumbers(bet_amt)}\r\n      </Typography>,\r\n\r\n      <Typography\r\n        className={clsx(\r\n          Number(profit) < 0 ? css.profitLose : css.profit,\r\n          css.tableContent,\r\n        )}>\r\n        {replaceNumbers(profit)}\r\n      </Typography>,\r\n    ];\r\n\r\n    return {\r\n      values,\r\n      key: id,\r\n      callBack: () => callBack(id, userName),\r\n    };\r\n  });\r\n"],"sourceRoot":""}