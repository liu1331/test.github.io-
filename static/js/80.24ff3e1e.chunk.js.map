{"version":3,"sources":["components/Statistics/Tabs/History/HistoryModal/style.module.scss","pages/Fortune/config/index.ts","pages/Fortune/components/ControlPanel/reducer/actions/types.ts","pages/Fortune/components/ControlPanel/reducer/fortuneSocketWatcher.tsx","pages/Fortune/components/ControlPanel/reducer/methods/utils/getFortuneResultValues.ts","components/Statistics/Tabs/History/config.ts","components/Statistics/Tabs/History/utils/crashMethods.ts","components/Statistics/Tabs/History/utils/fortuneMethods.ts","components/Statistics/Tabs/History/HistoryModal/Content.tsx"],"names":["module","exports","FortuneGameData","id","selection","dataItemColors","selectionItems","color","fortuneActionNames","autoModeActionFieldMatching","SET_ON_WIN","SET_ON_LOSS","SET_STOP_ON_LOSS","SET_STOP_ON_PROFIT","fortuneSocketsList","profitTableListener","statisticsHistoryListener","timerListener","soundListener","fortuneSocketWatcher","dispatch","data","method","action","type","new_round","start_game","payload","spinning","time","segment_id","stopped","stopped_at","bet_played","balance","error","new_bet_finalized","datetime","bet_local_id","coin","bet_amt","payout","win","profit","bet_cashedout","bet_cashedout_update","user_id","previous_rounds","rounds","update_coins_parameters","coins","getFortuneResultValues","result","value","selectionNumber","replace","StatisticsHistoryListenerIndexNames","permittedSocketGamePaths","historyContentConfig","socket","crashSocket","socketsList","crashSocketsList","statisticsHistoryListenerIndexName","prevRoundsListener","setData","setNewData","map","round","crash_point","seed","fortuneSocket","wheel_point","server_seed","chainFetchPaths","path","windowPath","getRoundData","crash","String","round_id","players","player","cashout_point","user_name","coinStyle","position","marginRight","HistoryModal","onClose","intl","useGetLocale","useState","bets","setBets","roundData","setRoundData","modalRef","useRef","inputRef","useWindowSize","pathname","height","width","useLocation","useFetch","chainFetch","chainData","formatMessage","getIntlValue","useEffect","variables","getRoundDetails","setCopied","isCopy","notifyBarManager","success","timeOut","message","copyToBuffer","a","current","copy","handleLinkOpen","event","preventDefault","setTimeout","window","open","className","ref","css","hiddenInput","titleWrapper","title","roundBox","roundContent","label","readOnly","labelClassName","roundLabel","classes","root","inputRoot","input","roundInput","focused","inputFocus","scrollBar","head","values","th","tableCell","body","rows","playerSearch","setPlayerSearchParams","showInUSD","coinsManager","coinPriceState","variant","clsx","bLabel","bPrimary","bDanger","cellContentWrapper","style","replaceNumbers","Number","price","toFixed","toString","td","buttonWrapper","onClick","button"],"mappings":"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","file":"static/js/80.24ff3e1e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"roundBox\":\"style_roundBox__1myxv\",\"roundContent\":\"style_roundContent__b8ZsH\",\"roundData\":\"style_roundData__1-auL\",\"inputRoot\":\"style_inputRoot__1SPG7\",\"inputFocus\":\"style_inputFocus__2guva\",\"roundInput\":\"style_roundInput__11FTY\",\"roundLabel\":\"style_roundLabel__2WJDT\",\"hiddenInput\":\"style_hiddenInput__6s7Qw\",\"buttonWrapper\":\"style_buttonWrapper__KgB2d\",\"button\":\"style_button__mNpn-\",\"tableInnerWrapper\":\"style_tableInnerWrapper__gohrR\",\"tableCell\":\"style_tableCell__MXcRR\",\"title\":\"style_title__3QGl0\",\"titleWrapper\":\"style_titleWrapper__1OIhb\",\"cellContentWrapper\":\"style_cellContentWrapper__22WRk\",\"bLabel\":\"style_bLabel__-vyF6\",\"bPrimary\":\"style_bPrimary__3psYS\",\"bDanger\":\"style_bDanger__3cMts\",\"scrollBar\":\"style_scrollBar__12e43\"};","export type fortuneSelectionType =\r\n  | \"1X\"\r\n  | \"3X\"\r\n  | \"6X\"\r\n  | \"12X\"\r\n  | \"25X\"\r\n  | \"52XB\"\r\n  | \"52XA\";\r\nexport interface IFortuneGameData {\r\n  id: number;\r\n  selection: fortuneSelectionType;\r\n}\r\nexport const FortuneGameData: IFortuneGameData[] = [\r\n  { id: 1, selection: \"1X\" },\r\n  { id: 2, selection: \"6X\" },\r\n  { id: 3, selection: \"1X\" },\r\n  { id: 4, selection: \"12X\" },\r\n  { id: 5, selection: \"1X\" },\r\n  { id: 6, selection: \"3X\" },\r\n  { id: 7, selection: \"1X\" },\r\n  { id: 8, selection: \"6X\" },\r\n  { id: 9, selection: \"1X\" },\r\n  { id: 10, selection: \"3X\" },\r\n  { id: 11, selection: \"1X\" },\r\n  { id: 12, selection: \"52XA\" },\r\n  { id: 13, selection: \"1X\" },\r\n  { id: 14, selection: \"3X\" },\r\n  { id: 15, selection: \"1X\" },\r\n  { id: 16, selection: \"6X\" },\r\n  { id: 17, selection: \"3X\" },\r\n  { id: 18, selection: \"1X\" },\r\n  { id: 19, selection: \"12X\" },\r\n  { id: 20, selection: \"1X\" },\r\n  { id: 21, selection: \"6X\" },\r\n  { id: 22, selection: \"1X\" },\r\n  { id: 23, selection: \"3X\" },\r\n  { id: 24, selection: \"1X\" },\r\n  { id: 25, selection: \"25X\" },\r\n  { id: 26, selection: \"1X\" },\r\n  { id: 27, selection: \"3X\" },\r\n  { id: 28, selection: \"1X\" },\r\n  { id: 29, selection: \"6X\" },\r\n  { id: 30, selection: \"1X\" },\r\n  { id: 31, selection: \"3X\" },\r\n  { id: 32, selection: \"1X\" },\r\n  { id: 33, selection: \"12X\" },\r\n  { id: 34, selection: \"1X\" },\r\n  { id: 35, selection: \"6X\" },\r\n  { id: 36, selection: \"1X\" },\r\n  { id: 37, selection: \"3X\" },\r\n  { id: 38, selection: \"1X\" },\r\n  { id: 39, selection: \"52XB\" },\r\n  { id: 40, selection: \"3X\" },\r\n  { id: 41, selection: \"1X\" },\r\n  { id: 42, selection: \"3X\" },\r\n  { id: 43, selection: \"1X\" },\r\n  { id: 44, selection: \"3X\" },\r\n  { id: 45, selection: \"1X\" },\r\n  { id: 46, selection: \"12X\" },\r\n  { id: 47, selection: \"1X\" },\r\n  { id: 48, selection: \"6X\" },\r\n  { id: 49, selection: \"1X\" },\r\n  { id: 50, selection: \"3X\" },\r\n  { id: 51, selection: \"1X\" },\r\n  { id: 52, selection: \"25X\" },\r\n  { id: 53, selection: \"1X\" },\r\n  { id: 54, selection: \"3X\" },\r\n];\r\n\r\nexport const dataItemColors: { [k: string]: string } = {\r\n  \"1X\": \"#FFD701\",\r\n  \"3X\": \"#01FFFF\",\r\n  \"6X\": \"#0A60E2\",\r\n  \"12X\": \"#9E00FF\",\r\n  \"25X\": \"#FF65C5\",\r\n  \"52XB\": \"#4AE700\",\r\n  \"52XA\": \"#FF1715\",\r\n};\r\n\r\nexport const selectionItems: {\r\n  selection: fortuneSelectionType;\r\n  color: string;\r\n}[] = [\r\n  {\r\n    selection: \"1X\",\r\n    color: \"linear-gradient(225.58deg, #FFD701 14.96%, #FF9900 48.48%)\",\r\n  },\r\n  {\r\n    selection: \"3X\",\r\n    color: \"linear-gradient(212.14deg, #01FFFF 12.31%, #00B0FB 42.6%)\",\r\n  },\r\n  {\r\n    selection: \"6X\",\r\n    color: \"linear-gradient(220.92deg, #0A60E2 14.06%, #0148B4 43.07%)\",\r\n  },\r\n  {\r\n    selection: \"12X\",\r\n    color: \" linear-gradient(236.48deg, #9E00FF 14.14%, #8D03A4 43.05%)\",\r\n  },\r\n  {\r\n    selection: \"25X\",\r\n    color: \"linear-gradient(182.04deg, #FF65C5 1.57%, #C60278 49.54%)\",\r\n  },\r\n  {\r\n    selection: \"52XA\",\r\n    color: \"linear-gradient(199.02deg, #FF1715 10.51%, #D00400 50%)\",\r\n  },\r\n  {\r\n    selection: \"52XB\",\r\n    color: \"linear-gradient(133.53deg, #4AE700 25.72%, #01580A 134.79%)\",\r\n  },\r\n];\r\n","import { fortuneSelectionType } from \"./../../../../config/index\";\r\nimport { AutoBetMode, ICoinsConfig, PlayerPlayableStatus } from \"../reducer\";\r\n\r\nexport enum fortuneActionNames {\r\n  SET_RESULT = \"setResult\",\r\n  SET_IS_SPINNING = \"setIsSpinning\",\r\n  SET_BET_FIELD = \"setBetField\",\r\n  SET_AMOUNT_IN_USD = \"setAmountInUSD\",\r\n  SET_PLAYABLE_STATUS = \"setPlayableStatus\",\r\n  SET_IS_SHOW_IN_USD = \"setIsShowInUSD\",\r\n\r\n  SET_IS_AUTO_MODE = \"setIsAutoMode\",\r\n  SET_STOP_ON_LOSS = \"setStopOnLoss\",\r\n  SET_STOP_ON_PROFIT = \"setStopOnProfit\",\r\n  SET_ON_WIN = \"setOnWin\",\r\n  SET_ON_LOSS = \"setOnLoss\",\r\n  SET_ON_WIN_MODE = \"setOnWinMode\",\r\n  SET_ON_LOSS_MODE = \"setOnLossMode\",\r\n\r\n  ADD_BET = \"addBet\",\r\n  REMOVE_BET = \"removeBet\",\r\n  SET_PLACE_A_BET = \"setPlaceABet\",\r\n  SET_CANCEL_BET = \"setCancelBet\",\r\n  SET_CANCEL_AUTOBET = \"setCancelAutobet\",\r\n\r\n  start_game = \"start_game\",\r\n  spinning = \"spinning\",\r\n  stopped = \"stopped\",\r\n  new_round = \"new_round\",\r\n\r\n  previous_rounds = \"previous_rounds\",\r\n  update_coins_parameters = \"update_coins_parameters\",\r\n\r\n  new_bet = \"new_bet\",\r\n  bet_played = \"bet_played\",\r\n  new_bet_finalized = \"new_bet_finalized\",\r\n  bet_cashedout = \"bet_cashedout\",\r\n  bet_cashedout_update = \"bet_cashedout_update\",\r\n}\r\n\r\nexport const autoModeActionFieldMatching = {\r\n  [fortuneActionNames.SET_ON_WIN]: \"onWin\",\r\n  [fortuneActionNames.SET_ON_LOSS]: \"onLoss\",\r\n  [fortuneActionNames.SET_STOP_ON_LOSS]: \"stopOnLoss\",\r\n  [fortuneActionNames.SET_STOP_ON_PROFIT]: \"stopOnProfit\",\r\n};\r\n\r\ninterface setResultAction {\r\n  type: fortuneActionNames.SET_RESULT;\r\n  payload: {\r\n    result: number | null;\r\n  };\r\n}\r\ninterface setPlayableStatusAction {\r\n  type: fortuneActionNames.SET_PLAYABLE_STATUS;\r\n  payload: {\r\n    playableStatus: PlayerPlayableStatus;\r\n  };\r\n}\r\n\r\ninterface setIsSpinning {\r\n  type: fortuneActionNames.SET_IS_SPINNING;\r\n  payload: {\r\n    isSpinning: boolean;\r\n  };\r\n}\r\ninterface setIsShowInUSD {\r\n  type: fortuneActionNames.SET_IS_SHOW_IN_USD;\r\n  payload: {\r\n    isShowInUSD: boolean;\r\n  };\r\n}\r\ninterface setAmountInUSD {\r\n  type: fortuneActionNames.SET_AMOUNT_IN_USD;\r\n  payload: {\r\n    value: string;\r\n  };\r\n}\r\n\r\ninterface setBetFieldAction {\r\n  type: fortuneActionNames.SET_BET_FIELD;\r\n  payload: {\r\n    betAmount?: string;\r\n    coinName?: string;\r\n    selection?: fortuneSelectionType | string;\r\n    id: string;\r\n  };\r\n}\r\n\r\ninterface setPlaceABetAction {\r\n  type: fortuneActionNames.SET_PLACE_A_BET;\r\n}\r\n\r\ninterface setCancelBetAction {\r\n  type: fortuneActionNames.SET_CANCEL_BET;\r\n}\r\n\r\ninterface setCancelAutobetAction {\r\n  type: fortuneActionNames.SET_CANCEL_AUTOBET;\r\n}\r\n\r\ninterface setIsAutoModeAction {\r\n  type: fortuneActionNames.SET_IS_AUTO_MODE;\r\n  payload: {\r\n    isAutoMode: boolean;\r\n  };\r\n}\r\n\r\ninterface addBetAction {\r\n  type: fortuneActionNames.ADD_BET;\r\n  payload: {\r\n    coinName: string;\r\n    betAmount: string;\r\n  };\r\n}\r\ninterface removeBetAction {\r\n  type: fortuneActionNames.REMOVE_BET;\r\n  payload: {\r\n    id: string;\r\n  };\r\n}\r\ninterface setAutoModeFieldAction {\r\n  type:\r\n    | fortuneActionNames.SET_STOP_ON_PROFIT\r\n    | fortuneActionNames.SET_STOP_ON_LOSS\r\n    | fortuneActionNames.SET_ON_WIN\r\n    | fortuneActionNames.SET_ON_LOSS;\r\n  payload: {\r\n    value: string | boolean;\r\n  };\r\n}\r\n\r\ninterface setOnWinModeAction {\r\n  type: fortuneActionNames.SET_ON_WIN_MODE;\r\n  payload: {\r\n    mode: AutoBetMode;\r\n  };\r\n}\r\ninterface setOnLossModeAction {\r\n  type: fortuneActionNames.SET_ON_LOSS_MODE;\r\n  payload: {\r\n    mode: AutoBetMode;\r\n  };\r\n}\r\n\r\ninterface setSpinningAction {\r\n  type: fortuneActionNames.spinning;\r\n  payload: {\r\n    time: string;\r\n    segment_id: string;\r\n  };\r\n}\r\ninterface setStartGameAction {\r\n  type: fortuneActionNames.start_game;\r\n}\r\ninterface setNewRoundAction {\r\n  type: fortuneActionNames.new_round;\r\n  payload: {\r\n    value: string;\r\n  };\r\n}\r\ninterface setStoppedAction {\r\n  type: fortuneActionNames.stopped;\r\n  payload: {\r\n    id: string;\r\n    stopped_at: string;\r\n  };\r\n}\r\ninterface setPreviousRoundsAction {\r\n  type: fortuneActionNames.previous_rounds;\r\n  payload: {\r\n    rounds: { id: string; wheel_point: string; seed: string }[];\r\n  };\r\n}\r\ninterface setUpdateCoinsParametersAction {\r\n  type: fortuneActionNames.update_coins_parameters;\r\n  payload: ICoinsConfig;\r\n}\r\ninterface setNewBet {\r\n  type: fortuneActionNames.new_bet;\r\n  payload: {\r\n    user_id: number;\r\n    user_name: string;\r\n    bet_amt: string;\r\n    coin: string;\r\n    selection: string;\r\n  };\r\n}\r\ninterface setBetPlayed {\r\n  type: fortuneActionNames.bet_played;\r\n  payload: {\r\n    error: string;\r\n    balance: string;\r\n  };\r\n}\r\ninterface setBetFinalized {\r\n  type: fortuneActionNames.new_bet_finalized;\r\n  payload: {\r\n    datetime: string;\r\n    bet_local_id: string;\r\n    coin: string;\r\n    bet_amt: string;\r\n    payout: string | number;\r\n    win: number;\r\n    profit: string;\r\n  };\r\n}\r\ninterface setBetCashedout {\r\n  type: fortuneActionNames.bet_cashedout;\r\n  payload: {\r\n    error: string;\r\n    balance: string;\r\n    bet_local_id: string;\r\n  };\r\n}\r\ninterface setBetCashedoutUpdate {\r\n  type: fortuneActionNames.bet_cashedout_update;\r\n  payload: {\r\n    user_id: string | number;\r\n    payout: string | number;\r\n    profit: string;\r\n    coin: string;\r\n    bet_local_id: string;\r\n  };\r\n}\r\n\r\nexport type FortuneActionsType =\r\n  | setAmountInUSD\r\n  | setPlaceABetAction\r\n  | setPlayableStatusAction\r\n  | setCancelBetAction\r\n  | setCancelAutobetAction\r\n  | setBetFieldAction\r\n  | setIsSpinning\r\n  | setIsShowInUSD\r\n  | setIsAutoModeAction\r\n  | setResultAction\r\n  | addBetAction\r\n  | removeBetAction\r\n  | setAutoModeFieldAction\r\n  | setOnWinModeAction\r\n  | setOnLossModeAction\r\n  | setSpinningAction\r\n  | setStartGameAction\r\n  | setNewRoundAction\r\n  | setStoppedAction\r\n  | setPreviousRoundsAction\r\n  | setUpdateCoinsParametersAction\r\n  | setNewBet\r\n  | setBetPlayed\r\n  | setBetFinalized\r\n  | setBetCashedout\r\n  | setBetCashedoutUpdate;\r\n","import {\r\n  FortuneStoryListener,\r\n  FortuneTimerListener,\r\n  ProfitTableListenerType,\r\n  FortuneSoundListener,\r\n} from \"pages/Fortune/fortuneTypes\";\r\nimport { Dispatch } from \"react\";\r\nimport { fortuneActionNames, FortuneActionsType } from \"./actions/types\";\r\n\r\ninterface FortuneSocketsListTypes {\r\n  profitTableListener: (data: ProfitTableListenerType) => void;\r\n  statisticsHistoryListener: (data: FortuneStoryListener) => void;\r\n\r\n  timerListener: (data: FortuneTimerListener) => void;\r\n  soundListener: (data: FortuneSoundListener) => void;\r\n}\r\n\r\nexport const fortuneSocketsList: FortuneSocketsListTypes = {\r\n  profitTableListener: () => null,\r\n  statisticsHistoryListener: () => null,\r\n  timerListener: () => null,\r\n  soundListener: () => null,\r\n};\r\nexport type socketMethods =\r\n  | \"bet_played\"\r\n  | \"new_bet_finalized\"\r\n  | \"bet_cashedout\"\r\n  | \"bet_cashedout_update\"\r\n  | \"spinning\"\r\n  | \"start_game\"\r\n  | \"new_round\"\r\n  | \"stopped\"\r\n  | \"previous_rounds\"\r\n  | \"get_coins_parameters\";\r\nexport type socketActions = \"wheel_update\" | \"update_coins_parameters\";\r\n\r\nexport const fortuneSocketWatcher = (\r\n  dispatch: Dispatch<FortuneActionsType>,\r\n) => {\r\n  return (data: any) => {\r\n    const {\r\n      method,\r\n      type,\r\n      action,\r\n    }: {\r\n      method?: socketMethods;\r\n      type?: any;\r\n      action: socketActions;\r\n    } = data;\r\n    fortuneSocketsList.profitTableListener(data);\r\n    fortuneSocketsList.statisticsHistoryListener(data);\r\n    fortuneSocketsList.timerListener(data);\r\n    fortuneSocketsList.soundListener(data);\r\n    if (action === \"wheel_update\" && method) {\r\n      switch (method) {\r\n        case fortuneActionNames.new_round:\r\n        case fortuneActionNames.start_game:\r\n          dispatch({\r\n            type: fortuneActionNames[method],\r\n            payload: { ...data },\r\n          });\r\n          break;\r\n        case fortuneActionNames.spinning:\r\n          dispatch({\r\n            type: fortuneActionNames[method],\r\n            payload: {\r\n              time: data.time,\r\n              segment_id: data.segment_id,\r\n            },\r\n          });\r\n          break;\r\n        case fortuneActionNames.stopped:\r\n          dispatch({\r\n            type: fortuneActionNames[method],\r\n            payload: { id: data.id, stopped_at: data.stopped_at },\r\n          });\r\n          break;\r\n        case fortuneActionNames.bet_played:\r\n          dispatch({\r\n            type: fortuneActionNames[method],\r\n            payload: { balance: data.balance, error: data.error },\r\n          });\r\n          break;\r\n        case fortuneActionNames.new_bet_finalized:\r\n          dispatch({\r\n            type: fortuneActionNames[method],\r\n            payload: {\r\n              datetime: data.datetime,\r\n              bet_local_id: data.bet_local_id,\r\n              coin: data.coin,\r\n              bet_amt: data.bet_amt,\r\n              payout: data.payout,\r\n              win: data.win,\r\n              profit: data.profit,\r\n            },\r\n          });\r\n          break;\r\n        case fortuneActionNames.bet_cashedout:\r\n          dispatch({\r\n            type: fortuneActionNames[method],\r\n            payload: {\r\n              error: data.error,\r\n              balance: data.balance,\r\n              bet_local_id: data.bet_local_id,\r\n            },\r\n          });\r\n          break;\r\n        case fortuneActionNames.bet_cashedout_update:\r\n          dispatch({\r\n            type: fortuneActionNames[method],\r\n            payload: {\r\n              user_id: data.user_id,\r\n              payout: data.payout,\r\n              profit: data.profit,\r\n              coin: data.coin,\r\n              bet_local_id: data.bet_local_id,\r\n            },\r\n          });\r\n          break;\r\n        case fortuneActionNames.previous_rounds:\r\n          dispatch({\r\n            type: fortuneActionNames[method],\r\n            payload: { rounds: data.rounds },\r\n          });\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    } else {\r\n      switch (action) {\r\n        case fortuneActionNames.update_coins_parameters:\r\n          const { coins } = data;\r\n          dispatch({\r\n            type: fortuneActionNames[action],\r\n            payload: { ...coins },\r\n          });\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  };\r\n};\r\n","import { dataItemColors, FortuneGameData } from \"pages/Fortune/config\";\r\nconst transformSelectionValue = (value: string) => {\r\n  if (value === \"52XA\" || value === \"52XB\") {\r\n    return \"52X\";\r\n  } else {\r\n    return value;\r\n  }\r\n};\r\nexport const getFortuneResultValues = (\r\n  result: number,\r\n): { color: string; selection: string; selectionNumber: string } => {\r\n  let color = dataItemColors[FortuneGameData[result].selection];\r\n  let selection = transformSelectionValue(FortuneGameData[result].selection);\r\n  let selectionNumber = selection.replace(/[^0-9]/g, \"\");\r\n  return { color, selection, selectionNumber };\r\n};\r\n","import { crashSocketsList } from \"pages/Crash/crashSocketWatcher\";\r\nimport { fortuneSocketsList } from \"pages/Fortune/components/ControlPanel/reducer/fortuneSocketWatcher\";\r\nimport { getFortuneResultValues } from \"pages/Fortune/components/ControlPanel/reducer/methods/utils/getFortuneResultValues\";\r\nimport { crashSocket, fortuneSocket, Socket } from \"./../../../../utils/socket\";\r\nimport { HistoryElement } from \"./Content\";\r\nimport { PlayerGame } from \"./HistoryModal/Content\";\r\nimport { crashPrevRoundsListener } from \"./utils/crashMethods\";\r\nimport { fortunePrevRoundsListener } from \"./utils/fortuneMethods\";\r\nenum StatisticsHistoryListenerIndexNames {\r\n  \"statisticsHistoryListener\" = \"statisticsHistoryListener\",\r\n}\r\ntype IHistoryContentConfig = {\r\n  [key: string]: {\r\n    socket: Socket;\r\n    socketsList: {\r\n      [k in StatisticsHistoryListenerIndexNames]: (data: any) => void;\r\n    };\r\n    statisticsHistoryListenerIndexName: keyof typeof StatisticsHistoryListenerIndexNames;\r\n    prevRoundsListener: (\r\n      setData: (value: HistoryElement[] | undefined) => void,\r\n      setNewData: (value: HistoryElement | undefined) => void,\r\n    ) => (data: any) => void;\r\n  };\r\n};\r\nexport const permittedSocketGamePaths = [\"/crash\", \"/fortune-quest\"];\r\nexport const historyContentConfig: IHistoryContentConfig = {\r\n  \"/crash\": {\r\n    socket: crashSocket,\r\n    socketsList: crashSocketsList,\r\n    statisticsHistoryListenerIndexName:\r\n      StatisticsHistoryListenerIndexNames.statisticsHistoryListener,\r\n    prevRoundsListener: crashPrevRoundsListener,\r\n  },\r\n  \"/fortune-quest\": {\r\n    socket: fortuneSocket,\r\n    socketsList: fortuneSocketsList,\r\n    statisticsHistoryListenerIndexName:\r\n      StatisticsHistoryListenerIndexNames.statisticsHistoryListener,\r\n    prevRoundsListener: fortunePrevRoundsListener,\r\n  },\r\n};\r\n\r\nexport interface IChainCrashFetchData {\r\n  success: boolean;\r\n  message: string;\r\n  round: {\r\n    crash_point: string;\r\n    players: {\r\n      bet_amt: string;\r\n      cashout_point: string;\r\n      coin: string;\r\n      profit: string;\r\n      user_name: string;\r\n      win: string;\r\n    }[];\r\n    round_id: number;\r\n    server_seed: string;\r\n  };\r\n}\r\nexport interface IChainFortuneFetchData {\r\n  success: boolean;\r\n  message: string;\r\n  round: {\r\n    wheel_point: string;\r\n    players: {\r\n      bet_amt: string;\r\n      selection: string;\r\n      coin: string;\r\n      profit: string;\r\n      user_name: string;\r\n      win: string;\r\n    }[];\r\n    round_id: number;\r\n    server_seed: string;\r\n  };\r\n}\r\nexport interface IRoundData {\r\n  crash: string;\r\n  seed: string;\r\n  id: string;\r\n}\r\nexport const chainFetchPaths: {\r\n  [key: string]: {\r\n    path: string;\r\n    windowPath: string;\r\n    getRoundData: (data: any) => { round: IRoundData; players: PlayerGame[] };\r\n  };\r\n} = {\r\n  \"/crash\": {\r\n    path: \"crash/get-round\",\r\n    windowPath: \"https://pasinocom.github.io/pasino-verify/crash.html\",\r\n    getRoundData: (data: IChainCrashFetchData) => {\r\n      const round = {\r\n        crash: data.round.crash_point,\r\n        id: String(data.round.round_id),\r\n        seed: data.round.server_seed,\r\n      };\r\n      const players = data.round.players.map((player) => {\r\n        const { bet_amt, coin, profit, cashout_point, user_name, win } = player;\r\n        return {\r\n          bet_amt,\r\n          coin,\r\n          profit,\r\n          result: `${cashout_point}x`,\r\n          user_name,\r\n          win,\r\n        };\r\n      });\r\n      return { round, players };\r\n    },\r\n  },\r\n  \"/fortune-quest\": {\r\n    path: \"fortunequest/get-round\",\r\n    windowPath: \"https://pasinocom.github.io/pasino-verify/crash.html\",\r\n    getRoundData: (data: IChainFortuneFetchData) => {\r\n      const round = {\r\n        crash: String(\r\n          getFortuneResultValues(+data.round.wheel_point).selectionNumber,\r\n        ),\r\n        id: String(data.round.round_id),\r\n        seed: data.round.server_seed,\r\n      };\r\n      const players = data.round.players.map((player) => {\r\n        const { bet_amt, coin, profit, selection, user_name, win } = player;\r\n        return {\r\n          bet_amt,\r\n          coin,\r\n          profit,\r\n          result: selection,\r\n          user_name,\r\n          win,\r\n        };\r\n      });\r\n      return { round, players };\r\n    },\r\n  },\r\n};\r\n","import { CrashStoryListener } from \"games/Crash/game/engine/entities/SocketListener/listenerTypes\";\r\nimport { HistoryElement } from \"../Content\";\r\n\r\nexport const crashPrevRoundsListener = (\r\n  setData: (value: HistoryElement[] | undefined) => void,\r\n  setNewData: (value: HistoryElement | undefined) => void,\r\n) => {\r\n  return (data: CrashStoryListener) => {\r\n    switch (data.method) {\r\n      case \"previous_rounds\":\r\n        const rounds: HistoryElement[] = data.rounds.map((round) => {\r\n          const { id, crash_point, seed } = round;\r\n          return { id, crash_point, seed };\r\n        });\r\n        setData(rounds);\r\n        break;\r\n      case \"crashed\":\r\n        const { crash_point, id, seed } = data.round;\r\n        setNewData({ id, crash_point, seed });\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n};\r\n","import { FortuneGameData } from \"pages/Fortune/config\";\r\nimport { CrashStoryListener } from \"games/Crash/game/engine/entities/SocketListener/listenerTypes\";\r\nimport { FortuneStoryListener } from \"pages/Fortune/fortuneTypes\";\r\nimport { HistoryElement } from \"../Content\";\r\n\r\nexport const fortunePrevRoundsListener = (\r\n  setData: (value: HistoryElement[] | undefined) => void,\r\n  setNewData: (value: HistoryElement | undefined) => void,\r\n) => {\r\n  return (data: FortuneStoryListener) => {\r\n    switch (data.method) {\r\n      case \"previous_rounds\":\r\n        const rounds: HistoryElement[] = data.rounds.map((round) => {\r\n          const { id, seed, wheel_point } = round;\r\n          return {\r\n            id,\r\n            crash_point: FortuneGameData[+wheel_point].selection.replace(\r\n              /[^0-9]/g,\r\n              \"\",\r\n            ),\r\n            seed,\r\n          };\r\n        });\r\n        setData(rounds);\r\n        break;\r\n      case \"stopped\":\r\n        const round: HistoryElement = {\r\n          id: data.id,\r\n          crash_point: FortuneGameData[+data.stopped_at].selection.replace(\r\n            /[^0-9]/g,\r\n            \"\",\r\n          ),\r\n          seed: data.server_seed,\r\n        };\r\n        setNewData(round);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n};\r\n","import React, {\r\n  CSSProperties,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { useGetLocale } from \"providers\";\r\n\r\nimport { Button, GetCoinImg, Input, ProgressiveModal, Table } from \"components\";\r\nimport { notifyBarManager, Typography } from \"components\";\r\nimport { coinsManager, useFetch } from \"hooks\";\r\nimport { getIntlValue, useWindowSize } from \"providers\";\r\nimport { replaceNumbers } from \"utils\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { copy } from \"utils/copyToClipboard\";\r\nimport LinkWithSearch, {\r\n  setPlayerSearchParams,\r\n} from \"components/LinkWithSearch\";\r\n\r\nimport css from \"./style.module.scss\";\r\n\r\nimport {\r\n  chainFetchPaths,\r\n  IChainCrashFetchData,\r\n  IChainFortuneFetchData,\r\n} from \"../config\";\r\n\r\nimport { Scrollbar } from \"components/Scrollbar\";\r\n\r\nexport interface PlayerGame {\r\n  bet_amt: string;\r\n  result: string;\r\n  coin: string;\r\n  profit: string;\r\n  user_name: string;\r\n  win: string;\r\n}\r\n\r\ntype ChainFetchData = IChainFortuneFetchData | IChainCrashFetchData;\r\n\r\ninterface Props {\r\n  onClose: () => void;\r\n  id: string | null;\r\n}\r\n\r\nconst coinStyle: CSSProperties = {\r\n  position: \"static\",\r\n  marginRight: 5,\r\n};\r\n\r\nconst HistoryModal = ({ onClose, id }: Props) => {\r\n  const intl = useGetLocale();\r\n\r\n  const [bets, setBets] = useState<PlayerGame[]>([]);\r\n  const [roundData, setRoundData] = useState({\r\n    crash: \"\",\r\n    seed: \"\",\r\n    id: \"\",\r\n  });\r\n\r\n  const modalRef = useRef<HTMLDivElement>(null);\r\n\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const { height, width } = useWindowSize();\r\n  const { pathname } = useLocation();\r\n  const { path, getRoundData, windowPath } = chainFetchPaths[pathname];\r\n  const [chainFetch, { data: chainData }] = useFetch<ChainFetchData>(path);\r\n\r\n  const formatMessage = getIntlValue(\r\n    intl,\r\n    \"gameTemplate.statistics.historyTable.modal.\",\r\n  );\r\n\r\n  const getRoundDetails = (id: string | number) => {\r\n    chainFetch({\r\n      variables: {\r\n        round_id: `${id}`,\r\n      },\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (chainData) {\r\n      const { round } = chainData;\r\n\r\n      setBets(getRoundData(chainData).players);\r\n      setRoundData(getRoundData(chainData).round);\r\n    }\r\n  }, [chainData]);\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      getRoundDetails(id);\r\n    }\r\n  }, [id]);\r\n\r\n  const setCopied = (isCopy: boolean) => {\r\n    if (isCopy) {\r\n      notifyBarManager.success({\r\n        timeOut: 2000,\r\n        message: formatMessage(\"copied\"),\r\n      });\r\n    } else {\r\n      notifyBarManager.error({\r\n        timeOut: 2000,\r\n        message: \"Error\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const copyToBuffer = async () => {\r\n    if (inputRef.current) {\r\n      await copy(roundData.seed, setCopied, inputRef.current);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  const handleLinkOpen = async (event: React.SyntheticEvent) => {\r\n    await event.preventDefault();\r\n    const copied = await copyToBuffer();\r\n\r\n    setTimeout(() => {\r\n      window.open(windowPath, \"_blank\");\r\n    }, 550);\r\n  };\r\n\r\n  return (\r\n    <ProgressiveModal\r\n      onClose={onClose}\r\n      open={!!id}\r\n      className={\"general_blueProgressiveModal\"}\r\n      width={530}>\r\n      <div ref={modalRef}>\r\n        <input\r\n          type=\"text\"\r\n          className={css.hiddenInput}\r\n          value={roundData.seed}\r\n          ref={inputRef}\r\n        />\r\n\r\n        <div className={css.titleWrapper}>\r\n          <h1 className={css.title}>{formatMessage(\"title\")}</h1>\r\n        </div>\r\n        <div className={css.roundBox}>\r\n          <div className={css.roundData}>\r\n            <div className={css.roundContent}>\r\n              <Input\r\n                label={formatMessage(\"id\")}\r\n                value={roundData.id}\r\n                readOnly\r\n                labelClassName={css.roundLabel}\r\n                classes={{\r\n                  root: css.inputRoot,\r\n                  input: css.roundInput,\r\n                  focused: css.inputFocus,\r\n                }}\r\n              />\r\n              <Input\r\n                label={formatMessage(\"crash\")}\r\n                value={`${roundData.crash}x`}\r\n                readOnly\r\n                labelClassName={css.roundLabel}\r\n                classes={{\r\n                  root: css.inputRoot,\r\n                  input: css.roundInput,\r\n                  focused: css.inputFocus,\r\n                }}\r\n              />\r\n            </div>\r\n            <Input\r\n              label={formatMessage(\"seed\")}\r\n              value={roundData.seed}\r\n              readOnly\r\n              labelClassName={css.roundLabel}\r\n              classes={{\r\n                root: css.inputRoot,\r\n                input: css.roundInput,\r\n                focused: css.inputFocus,\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <Scrollbar className={css.scrollBar}>\r\n          <Table\r\n            head={{\r\n              values: [\r\n                formatMessage(\"user\"),\r\n                formatMessage(\"point\"),\r\n                formatMessage(\"amount\"),\r\n                formatMessage(\"profit\"),\r\n              ],\r\n              classes: {\r\n                th: css.tableCell,\r\n              },\r\n            }}\r\n            body={{\r\n              rows: bets.map(\r\n                ({ bet_amt, result, coin, profit, win, user_name }) => {\r\n                  const playerSearch = setPlayerSearchParams(user_name);\r\n                  const { showInUSD, coinPriceState } = coinsManager;\r\n\r\n                  return {\r\n                    values: [\r\n                      <LinkWithSearch {...playerSearch}>\r\n                        {user_name}\r\n                      </LinkWithSearch>,\r\n\r\n                      <Typography\r\n                        variant=\"inherit\"\r\n                        className={clsx(css.bLabel, {\r\n                          [css.bPrimary]: win === \"1\",\r\n                          [css.bDanger]: win === \"0\",\r\n                        })}>\r\n                        {result}\r\n                      </Typography>,\r\n\r\n                      <div className={css.cellContentWrapper}>\r\n                        <GetCoinImg coin={coin} style={coinStyle} />\r\n                        {showInUSD\r\n                          ? `$${replaceNumbers(\r\n                              (\r\n                                Number(bet_amt) *\r\n                                Number(coinPriceState[coin]?.price)\r\n                              )\r\n                                .toFixed(8)\r\n                                .toString(),\r\n                            )}`\r\n                          : replaceNumbers(bet_amt)}\r\n                      </div>,\r\n\r\n                      <div className={css.cellContentWrapper}>\r\n                        <GetCoinImg coin={coin} style={coinStyle} />\r\n                        {showInUSD\r\n                          ? `$${replaceNumbers(\r\n                              (\r\n                                Number(profit) *\r\n                                Number(coinPriceState[coin]?.price)\r\n                              )\r\n                                .toFixed(8)\r\n                                .toString(),\r\n                            )}`\r\n                          : replaceNumbers(profit)}\r\n                      </div>,\r\n                    ],\r\n                  };\r\n                },\r\n              ),\r\n              classes: {\r\n                td: css.tableCell,\r\n              },\r\n            }}\r\n          />\r\n        </Scrollbar>\r\n\r\n        <div className={css.buttonWrapper}>\r\n          <Button onClick={handleLinkOpen} className={css.button}>\r\n            {intl.formatMessage({\r\n              id: \"gameTemplate.statistics.historyTable.modal.button\",\r\n            })}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </ProgressiveModal>\r\n  );\r\n};\r\n\r\nexport default HistoryModal;\r\n"],"sourceRoot":""}