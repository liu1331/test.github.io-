{"version":3,"sources":["pages/ModalPages/pages/Wallet/Vault/components/AmountButtons/style.module.scss","pages/ModalPages/pages/Wallet/Vault/components/InputsContent/style.module.scss","pages/ModalPages/pages/Wallet/Vault/components/VaultInput/style.module.scss","pages/ModalPages/pages/Wallet/Vault/components/VaultTabs/style.module.scss","pages/ModalPages/pages/Wallet/Vault/components/AssetsInVault/style.module.scss","pages/ModalPages/pages/Wallet/Vault/style.module.scss","pages/ModalPages/pages/Wallet/Vault/config.ts","pages/ModalPages/pages/Wallet/Vault/components/AmountButtons/index.tsx","pages/ModalPages/pages/Wallet/Vault/components/InputsContent/index.tsx","pages/ModalPages/pages/Wallet/Vault/components/VaultInput/index.tsx","pages/ModalPages/pages/Wallet/Vault/components/VaultTabs/index.tsx","pages/ModalPages/pages/Wallet/Vault/components/AssetsInVault/index.tsx","pages/ModalPages/pages/Wallet/Vault/components/TransferIn/index.tsx","pages/ModalPages/pages/Wallet/Vault/components/TransferOut/index.tsx","pages/ModalPages/pages/Wallet/Vault/components/AmountContent/index.tsx","pages/ModalPages/pages/Wallet/Vault/index.tsx","pages/ModalPages/pages/Wallet/Components/Template.tsx","pages/ModalPages/pages/Wallet/Components/style.module.scss","pages/ModalPages/pages/Wallet/Components/Currency/style.module.scss","pages/ModalPages/pages/Wallet/GemInfo/index.tsx","pages/ModalPages/pages/Wallet/GemInfo/style.module.scss"],"names":["module","exports","vaultTabsInfo","id","dataIndex","tabTitleLocale","inputTitleLocale","AmountButtons","callback","intl","useGetLocale","className","css","root","button","onClick","formatMessage","labelVariants","in","out","clearInputs","InputsContent","coin","fetchCallback","max","min","isHaveTfa","isVisiblePassword","amountInputRef","useRef","formRef","useState","amount","setAmount","tfa","setTfa","password","setPassword","useMemo","amountButtonsCallback","value","onBlur","e","target","length","readOnly","Number","toFixed","handleChangePassword","handleChangeTfa","handleChangeAmount","preventDefault","isNaN","endAdornment","useEffect","current","querySelectorAll","forEach","input","focus","blur","autoComplete","onSubmit","params","ref","node","VaultInput","label","onChange","type","transferButton","disabled","toUpperCase","React","memo","props","classes","focused","onFocus","removeAttribute","VaultTabs","selectedIndex","setSelectedIndex","tabs","map","key","clsx","active","AssetsInVault","fetch","fetchData","loading","setLoading","coin_image","coin_name","coin_symbol","vault_balance","vault_balance_usd","vaultCoinContent","setVaultCoinContent","variables","data","vault","assetsRoot","title","circularWidth","size","color","assetsInfo","assetsInfoCoin","src","alt","assetsInfoTotal","total","TransferIn","refetchCallback","vaultBalance","coinsList","useCoins","getPriceInSatoshi","useCallback","ourCoin","find","balance","args","a","fetchBase","response","success","notifyBarManager","message","timeOut","coinsManager","coinValueUpdate","wallet_balance","error","TransferOut","AmountContent","useFetch","fetchStatus","fetchStatusData","locked_with","Vault","currency","GemInfo","container","Template","children","innerWrapper","text"],"mappings":"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","file":"static/js/52.2288ecf7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"style_root__3dwcO\",\"button\":\"style_button__G7ahq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"style_root__36vJg\",\"transferButton\":\"style_transferButton__1NJ_J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"style_root__16B2J\",\"input\":\"style_input__2GT1u\",\"focused\":\"style_focused__2RpSm\",\"marginOff\":\"style_marginOff__1LNzB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tabs\":\"style_tabs__XbzCt\",\"button\":\"style_button__3Y-JD\",\"active\":\"style_active__3tkYi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"assetsRoot\":\"style_assetsRoot__2X2i4\",\"title\":\"style_title__2ci16\",\"assetsInfo\":\"style_assetsInfo__18JhO\",\"assetsInfoTotal\":\"style_assetsInfoTotal__TXMU3\",\"assetsInfoCoin\":\"style_assetsInfoCoin__119Fg\",\"total\":\"style_total__3f9uU\",\"loading\":\"style_loading__r-fkX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__2bKl-\",\"title\":\"style_title__3Gxi-\"};","export interface IVaultTabsInfo {\r\n  id: number;\r\n  dataIndex: \"in\" | \"out\";\r\n  tabTitleLocale: string;\r\n  inputTitleLocale: string;\r\n}\r\n\r\nexport const vaultTabsInfo: IVaultTabsInfo[] = [\r\n  {\r\n    id: 0,\r\n    dataIndex: \"in\",\r\n    tabTitleLocale: \"wallet.vault.in\",\r\n    inputTitleLocale: \"wallet.vault.amountIn\",\r\n  },\r\n  {\r\n    id: 1,\r\n    dataIndex: \"out\",\r\n    tabTitleLocale: \"wallet.vault.out\",\r\n    inputTitleLocale: \"wallet.vault.amountOut\",\r\n  },\r\n];\r\n","import React from \"react\";\r\n\r\nimport { useGetLocale } from \"providers\";\r\n\r\nimport css from \"./style.module.scss\";\r\n\r\ninterface IProps {\r\n  callback: (value: \"all\" | \"min\") => void;\r\n}\r\nexport const AmountButtons = ({ callback = () => {} }: IProps) => {\r\n  const intl = useGetLocale();\r\n  return (\r\n    <div className={css.root}>\r\n      <div className={css.button} onClick={() => callback(\"all\")}>\r\n        {intl.formatMessage({ id: \"wallet.vault.all\" })}\r\n      </div>\r\n      <div className={css.button} onClick={() => callback(\"min\")}>\r\n        {intl.formatMessage({ id: \"wallet.vault.min\" })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { FC, useEffect, useMemo, useRef, useState } from \"react\";\r\n\r\nimport { Button } from \"components\";\r\nimport { useFetch, useLocalStorage } from \"hooks\";\r\nimport { useGetLocale } from \"providers\";\r\nimport { IFetchTransferParams, VaultInput } from \"..\";\r\nimport { AmountButtons } from \"../AmountButtons\";\r\n\r\nimport css from \"./style.module.scss\";\r\n\r\ninterface IProps {\r\n  dataIndex: \"in\" | \"out\";\r\n  coin?: string;\r\n  fetchCallback: (args: IFetchTransferParams) => void;\r\n  max: string;\r\n  min: string;\r\n  isHaveTfa: boolean;\r\n  isVisiblePassword: boolean;\r\n}\r\n\r\nconst labelVariants = {\r\n  in: \"wallet.vault.amountIn\",\r\n  out: \"wallet.vault.amountOut\",\r\n};\r\nexport let clearInputs = () => {};\r\n\r\nexport const InputsContent: FC<IProps> = ({\r\n  dataIndex,\r\n  coin,\r\n  fetchCallback,\r\n  max = \"0\",\r\n  min = \"0\",\r\n  isHaveTfa,\r\n  isVisiblePassword,\r\n}) => {\r\n  const amountInputRef = useRef<HTMLInputElement>();\r\n  const formRef = useRef<HTMLFormElement>();\r\n  const [amount, setAmount] = useState(\"\");\r\n  const [tfa, setTfa] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const intl = useGetLocale();\r\n\r\n  const {\r\n    endAdornment,\r\n    onBlur,\r\n    handleChangePassword,\r\n    handleChangeTfa,\r\n    handleChangeAmount,\r\n  } = useMemo(() => {\r\n    const handleChangeAmount = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      e.preventDefault();\r\n\r\n      if (isNaN(+e.target.value)) return;\r\n      setAmount(e.target.value);\r\n    };\r\n    const handleChangeTfa = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      setTfa(e.target.value);\r\n    };\r\n    const handleChangePassword = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      setPassword(e.target.value);\r\n    };\r\n\r\n    const onBlur = (e: React.FocusEvent<HTMLInputElement>) => {\r\n      const value = e.target.value;\r\n      if (value.length === 0) {\r\n        return;\r\n      }\r\n      e.target.readOnly = true;\r\n      if (+value > +max) {\r\n        setAmount(Number(max).toFixed(8));\r\n        return;\r\n      }\r\n      if (+value < +min) {\r\n        setAmount(Number(min).toFixed(8));\r\n        return;\r\n      }\r\n      setAmount(Number(value).toFixed(8));\r\n    };\r\n\r\n    const amountButtonsCallback = (value: \"all\" | \"min\") => {\r\n      switch (value) {\r\n        case \"all\":\r\n          if (max) {\r\n            setAmount(max);\r\n          }\r\n          break;\r\n        case \"min\":\r\n          if (min) {\r\n            setAmount(min);\r\n          }\r\n\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n    const endAdornment = <AmountButtons callback={amountButtonsCallback} />;\r\n    return {\r\n      amountButtonsCallback,\r\n      onBlur,\r\n      handleChangePassword,\r\n      handleChangeTfa,\r\n      handleChangeAmount,\r\n      endAdornment,\r\n    };\r\n  }, [dataIndex, max]);\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (coin) {\r\n      const params: IFetchTransferParams = { amount, coin };\r\n      if (dataIndex === \"out\") {\r\n        params[\"password\"] = password;\r\n        params[\"tfa_code\"] = tfa;\r\n      }\r\n      fetchCallback(params);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    clearInputs = () => {\r\n      if (!formRef.current) return;\r\n      setAmount(\"\");\r\n      setTfa(\"\");\r\n      setPassword(\"\");\r\n      formRef.current.querySelectorAll(\"input\").forEach((input) => {\r\n        input.value = \"\";\r\n        input.focus();\r\n        input.blur();\r\n      });\r\n    };\r\n  }, []);\r\n  useEffect(() => {\r\n    if (amount.length !== 0) {\r\n      setAmount(min);\r\n    }\r\n  }, [coin, min]);\r\n\r\n  const disabled = () => {\r\n    let disabled = !amount || +max === 0;\r\n\r\n    if (dataIndex === \"out\" && !disabled) {\r\n      disabled = (isHaveTfa && !tfa) || !password;\r\n    }\r\n\r\n    return disabled;\r\n  };\r\n\r\n  return (\r\n    <form\r\n      className={css.root}\r\n      autoComplete=\"off\"\r\n      onSubmit={handleSubmit}\r\n      ref={(node) => node && (formRef.current = node)}>\r\n      <VaultInput\r\n        id=\"amount\"\r\n        onBlur={onBlur}\r\n        ref={amountInputRef}\r\n        label={intl.formatMessage({ id: labelVariants[dataIndex] })}\r\n        value={amount}\r\n        onChange={handleChangeAmount}\r\n        endAdornment={endAdornment}\r\n      />\r\n      {dataIndex === \"out\" ? (\r\n        <>\r\n          {isHaveTfa ? (\r\n            <VaultInput\r\n              type=\"text\"\r\n              id=\"tfa\"\r\n              label={intl.formatMessage({ id: \"wallet.vault.tfa\" })}\r\n              value={tfa}\r\n              onChange={handleChangeTfa}\r\n            />\r\n          ) : null}\r\n\r\n          {isVisiblePassword ? (\r\n            <VaultInput\r\n              type=\"password\"\r\n              readOnly={false}\r\n              label={intl.formatMessage({ id: \"wallet.vault.pass\" })}\r\n              value={password}\r\n              onChange={handleChangePassword}\r\n            />\r\n          ) : null}\r\n        </>\r\n      ) : null}\r\n\r\n      <Button\r\n        className={css.transferButton}\r\n        type=\"submit\"\r\n        disabled={disabled()}>\r\n        {intl\r\n          .formatMessage({\r\n            id:\r\n              dataIndex === \"in\"\r\n                ? \"wallet.vault.transferIn\"\r\n                : \"wallet.vault.transferOut\",\r\n          })\r\n          .toUpperCase()}\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\n","import React, { FC } from \"react\";\r\n\r\nimport { InputProps } from \"components\";\r\nimport { Input } from \"pages/ModalPages/componentsProgressive\";\r\n\r\nimport css from \"./style.module.scss\";\r\n\r\nexport const VaultInput: FC<React.RefAttributes<any> | InputProps> = React.memo(\r\n  ({ ...props }) => {\r\n    return (\r\n      <Input\r\n        readOnly\r\n        autoComplete=\"off\"\r\n        className={css.input}\r\n        classes={{ root: css.root, focused: css.focused }}\r\n        onBlur={(e) => (e.target.readOnly = true)}\r\n        onFocus={(e) => e.target.removeAttribute(\"readonly\")}\r\n        {...props}></Input>\r\n    );\r\n  },\r\n);\r\n","import React, { FC } from \"react\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { Button } from \"components\";\r\nimport { useGetLocale } from \"providers\";\r\nimport { vaultTabsInfo } from \"../../config\";\r\n\r\nimport css from \"./style.module.scss\";\r\n\r\ninterface IProps {\r\n  selectedIndex: number;\r\n  setSelectedIndex: (value: number) => void;\r\n}\r\nexport const VaultTabs: FC<IProps> = ({ selectedIndex, setSelectedIndex }) => {\r\n  const intl = useGetLocale();\r\n  return (\r\n    <div className={css.tabs}>\r\n      {vaultTabsInfo.map(({ tabTitleLocale }, key) => (\r\n        <Button\r\n          key={key}\r\n          className={clsx(css.button, [selectedIndex === key && css.active])}\r\n          onClick={() => setSelectedIndex(key)}>\r\n          <span className={css.label}>\r\n            {intl.formatMessage({ id: tabTitleLocale })}\r\n          </span>\r\n        </Button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { CircularProgress } from \"components\";\r\nimport { MutationResult } from \"hooks\";\r\nimport { useGetLocale } from \"providers\";\r\nimport { ExecutionResult, QueryOptions } from \"utils\";\r\nimport { IFetchContent } from \"../..\";\r\n\r\nimport css from \"./style.module.scss\";\r\n\r\ninterface IProps {\r\n  coin?: string;\r\n  fetchData: MutationResult<{\r\n    vault: IFetchContent;\r\n  }>;\r\n  fetch: (options?: QueryOptions<any> | undefined) => Promise<\r\n    ExecutionResult<{\r\n      vault: IFetchContent;\r\n    }>\r\n  >;\r\n}\r\n\r\nexport const AssetsInVault = React.memo(\r\n  ({ coin = \"BTC\", fetch, fetchData }: IProps) => {\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const [vaultCoinContent, setVaultCoinContent] = useState<IFetchContent>({\r\n      coin_image: \"https://cdn.pasino.com/coins/fey.png\",\r\n      coin_name: coin,\r\n      coin_symbol: \"FEY\",\r\n      vault_balance: \"0.00000000\",\r\n      vault_balance_usd: \"0.00000000\",\r\n    });\r\n\r\n    const intl = useGetLocale();\r\n    useEffect(() => {\r\n      if (coin) {\r\n        fetch({\r\n          variables: {\r\n            coin,\r\n          },\r\n        });\r\n      }\r\n    }, [coin]);\r\n    useEffect(() => {\r\n      if (!fetchData.data) {\r\n        setLoading(true);\r\n        return;\r\n      }\r\n      if (fetchData.data) {\r\n        setVaultCoinContent(fetchData.data.vault);\r\n        setLoading(false);\r\n      }\r\n    }, [fetchData]);\r\n\r\n    return (\r\n      <div className={css.assetsRoot}>\r\n        <div className={css.title}>\r\n          {intl.formatMessage({ id: \"wallet.vault.assets\" })}\r\n        </div>\r\n        {loading ? (\r\n          <div className={css.loading}>\r\n            <CircularProgress circularWidth={2} size={70} color=\"white\" />\r\n          </div>\r\n        ) : (\r\n          <div className={css.assetsInfo}>\r\n            <div className={css.assetsInfoCoin}>\r\n              <img src={vaultCoinContent.coin_image} alt=\"\" />\r\n              <span>{vaultCoinContent.coin_name}</span>\r\n            </div>\r\n            <div className={css.assetsInfoTotal}>\r\n              <span className={css.total}>\r\n                {intl.formatMessage({ id: \"wallet.vault.total\" })}\r\n              </span>\r\n              <span>{`${vaultCoinContent.vault_balance} ${\r\n                vaultCoinContent.coin_symbol\r\n              } = ${\r\n                Number(vaultCoinContent.vault_balance_usd).toFixed(2) || 0\r\n              } USDT`}</span>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  },\r\n);\r\n","import React, { FC, useCallback, useEffect } from \"react\";\r\n\r\nimport { coinsManager, useCoins, useFetch } from \"hooks\";\r\nimport { InputsContent } from \"..\";\r\nimport { notifyBarManager } from \"components\";\r\nimport { clearInputs } from \"../InputsContent\";\r\nimport { fetchBase } from \"utils\";\r\n\r\nexport interface IFetchTransferParams {\r\n  coin: string;\r\n  amount: string;\r\n}\r\n\r\nexport interface ITransferProps {\r\n  vaultBalance: string | undefined;\r\n  dataIndex: \"in\" | \"out\";\r\n  coin?: string;\r\n  refetchCallback?: () => void;\r\n  isHaveTfa: boolean;\r\n  isVisiblePassword: boolean;\r\n}\r\n\r\nexport const TransferIn: FC<ITransferProps> = ({\r\n  refetchCallback = () => {},\r\n  vaultBalance,\r\n  ...props\r\n}) => {\r\n  const { coinsList } = useCoins();\r\n\r\n  const getPriceInSatoshi = useCallback(() => {\r\n    const ourCoin = coinsList.find(({ coin }) => {\r\n      return coin === props.coin;\r\n    });\r\n    let min = \"0.00001000\";\r\n    let max =\r\n      (props.dataIndex === \"in\" ? ourCoin?.balance : vaultBalance) || \"0\";\r\n    if (min > max) {\r\n      if (+max === 0) {\r\n        min = (0).toFixed(8);\r\n      } else {\r\n        min = max;\r\n      }\r\n    }\r\n\r\n    return { min, max };\r\n  }, [coinsList, props.coin, props.dataIndex, vaultBalance]);\r\n  const fetchCallback = async (args: IFetchTransferParams) => {\r\n    const response = await fetchBase<{\r\n      wallet_balance: \"string\";\r\n      coin: string;\r\n      success: boolean;\r\n    }>(\"vault/transfer-in\", {\r\n      variables: {\r\n        ...args,\r\n      },\r\n    });\r\n\r\n    if (response.data && response.data.success) {\r\n      notifyBarManager.success({ message: \"Success\", timeOut: 2000 });\r\n      coinsManager.coinValueUpdate(\r\n        response.data.wallet_balance,\r\n        response.data.coin,\r\n      );\r\n      clearInputs();\r\n      refetchCallback();\r\n    }\r\n    if (response.error) {\r\n      notifyBarManager.error({ message: response.error, timeOut: 2000 });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <InputsContent\r\n        {...props}\r\n        fetchCallback={fetchCallback}\r\n        max={getPriceInSatoshi().max}\r\n        min={getPriceInSatoshi().min}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import React, { FC, memo, useCallback, useEffect, useMemo } from \"react\";\r\n\r\nimport { coinsManager, MutationResult, useCoins, useFetch } from \"hooks\";\r\nimport { InputsContent } from \"..\";\r\nimport { notifyBarManager } from \"components\";\r\nimport { clearInputs } from \"../InputsContent\";\r\nimport { IFetchTransferParams, ITransferProps } from \"../TransferIn\";\r\nimport { fetchBase } from \"utils\";\r\n\r\ninterface ITransferOutProps extends ITransferProps {}\r\n\r\nexport const TransferOut: FC<ITransferOutProps> = ({\r\n  refetchCallback = () => {},\r\n  vaultBalance,\r\n  ...props\r\n}) => {\r\n  const { coinsList } = useCoins();\r\n\r\n  const fetchCallback = async (args: IFetchTransferParams) => {\r\n    const response = await fetchBase<{\r\n      wallet_balance: \"string\";\r\n      coin: string;\r\n      success: boolean;\r\n    }>(\"vault/transfer-out\", {\r\n      variables: {\r\n        ...args,\r\n      },\r\n    });\r\n\r\n    if (response.data && response.data.success) {\r\n      notifyBarManager.success({ message: \"Success\", timeOut: 2000 });\r\n      coinsManager.coinValueUpdate(\r\n        response.data.wallet_balance,\r\n        response.data.coin,\r\n      );\r\n      clearInputs();\r\n      refetchCallback();\r\n    }\r\n    if (response.error) {\r\n      notifyBarManager.error({ message: response.error, timeOut: 2000 });\r\n    }\r\n  };\r\n\r\n  const getPriceInSatoshi = useCallback(() => {\r\n    let min = \"0.00000001\";\r\n    let max = vaultBalance || \"0\";\r\n    if (min > max) {\r\n      if (+max === 0) {\r\n        min = (0).toFixed(8);\r\n      } else {\r\n        min = max;\r\n      }\r\n    }\r\n\r\n    return { min, max };\r\n  }, [coinsList, props.coin, props.dataIndex, vaultBalance]);\r\n\r\n  return (\r\n    <>\r\n      <InputsContent\r\n        {...props}\r\n        fetchCallback={fetchCallback}\r\n        max={getPriceInSatoshi().max}\r\n        min={getPriceInSatoshi().min}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import React, { FC, memo, useEffect } from \"react\";\r\n\r\nimport { useFetch } from \"hooks\";\r\nimport { TransferIn } from \"../TransferIn\";\r\nimport { TransferOut } from \"../TransferOut\";\r\n\r\nexport interface IFetchTransferParams {\r\n  coin: string;\r\n  amount: string;\r\n  tfa_code?: string;\r\n  password?: string;\r\n}\r\n\r\ninterface IProps {\r\n  vaultBalance: string | undefined;\r\n  dataIndex: \"in\" | \"out\";\r\n  coin?: string;\r\n  refetchCallback?: () => void;\r\n}\r\n\r\nexport const AmountContent: FC<IProps> = memo((props) => {\r\n  const [fetchStatus, fetchStatusData] = useFetch<any>(\"vault/get-status\");\r\n\r\n  useEffect(() => {\r\n    fetchStatus();\r\n  }, []);\r\n  if (!fetchStatusData.data) return null;\r\n  return (\r\n    <>\r\n      {props.dataIndex === \"in\" ? (\r\n        <TransferIn\r\n          {...props}\r\n          isHaveTfa={fetchStatusData.data.locked_with.tfa}\r\n          isVisiblePassword={fetchStatusData.data.locked_with.password}\r\n        />\r\n      ) : (\r\n        <TransferOut\r\n          {...props}\r\n          isHaveTfa={fetchStatusData.data.locked_with.tfa}\r\n          isVisiblePassword={fetchStatusData.data.locked_with.password}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n});\r\n","import React, { FC, useState } from \"react\";\r\n\r\nimport GemInfo from \"../GemInfo\";\r\n\r\nimport { Template } from \"../Components\";\r\nimport { useGetLocale } from \"providers\";\r\nimport { vaultTabsInfo } from \"./config\";\r\nimport { AmountContent, AssetsInVault, VaultTabs } from \"./components\";\r\nimport { useFetch } from \"hooks\";\r\n\r\nimport css from \"./style.module.scss\";\r\n\r\ninterface IProps {\r\n  currency?: string;\r\n}\r\nexport interface IFetchContent {\r\n  coin_image: string;\r\n  coin_name: string;\r\n  coin_symbol: string;\r\n  vault_balance: string;\r\n  vault_balance_usd: string;\r\n}\r\n\r\nconst Vault: FC<IProps> = ({ currency }) => {\r\n  const intl = useGetLocale();\r\n\r\n  const [selectedIndex, setSelectedIndex] = useState(0);\r\n  const [fetch, fetchData] = useFetch<{ vault: IFetchContent }>(\r\n    \"vault/get-coin-content\",\r\n  );\r\n\r\n  if (currency === \"GEM\") {\r\n    return <GemInfo />;\r\n  }\r\n\r\n  return (\r\n    <Template>\r\n      <div className={css.container}>\r\n        <div className={css.title}>\r\n          {intl.formatMessage({ id: \"wallet.vault.title\" }).toUpperCase()}\r\n        </div>\r\n        <VaultTabs\r\n          selectedIndex={selectedIndex}\r\n          setSelectedIndex={setSelectedIndex}\r\n        />\r\n\r\n        <AmountContent\r\n          vaultBalance={fetchData.data?.vault.vault_balance}\r\n          dataIndex={vaultTabsInfo[selectedIndex].dataIndex}\r\n          coin={currency}\r\n          refetchCallback={() => {\r\n            fetch({\r\n              variables: {\r\n                coin: currency,\r\n              },\r\n            });\r\n          }}\r\n        />\r\n        <AssetsInVault coin={currency} fetch={fetch} fetchData={fetchData} />\r\n      </div>\r\n    </Template>\r\n  );\r\n};\r\n\r\nexport default Vault;\r\n","import React, { CSSProperties, FunctionComponent } from \"react\";\r\n\r\nimport css from \"./style.module.scss\";\r\n\r\nexport interface TemplateProps {\r\n  scrollbarStyle?: CSSProperties;\r\n}\r\n\r\nconst Template: FunctionComponent<TemplateProps> = ({ children }) => {\r\n  return (\r\n    <div className={css.root}>\r\n      <div className={css.innerWrapper}>{children}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Template;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrapperPadding\":\"10px\",\"desktopHeaderSize\":\"64px\",\"bottomButtonsSize\":\"60px\",\"desktopChatWidth\":\"310px\",\"swipedChatWidth\":\"960px\",\"arrBlockWidth\":\"12px\",\"headerHeight\":\"60px\",\"inputPadding\":\"16px\",\"chatPadding\":\"16px\",\"inputHeight\":\"56px\",\"chatWidth\":\"280px\",\"spacing\":\"8px\",\"mobileScreen\":\"600px\",\"feyorraDisableSize\":\"1080px\",\"root\":\"style_root__24w8e\",\"innerWrapper\":\"style_innerWrapper__1VeHq\",\"breadRoot\":\"style_breadRoot__st5_V\",\"lists\":\"style_lists__1qszv\",\"nested\":\"style_nested__dTcgd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrapperPadding\":\"10px\",\"desktopHeaderSize\":\"64px\",\"bottomButtonsSize\":\"60px\",\"desktopChatWidth\":\"310px\",\"swipedChatWidth\":\"960px\",\"arrBlockWidth\":\"12px\",\"headerHeight\":\"60px\",\"inputPadding\":\"16px\",\"chatPadding\":\"16px\",\"inputHeight\":\"56px\",\"chatWidth\":\"280px\",\"spacing\":\"8px\",\"mobileScreen\":\"600px\",\"feyorraDisableSize\":\"1080px\",\"currencyWrapper\":\"style_currencyWrapper__36ahs\",\"labelWrapper\":\"style_labelWrapper__2NBou\",\"label\":\"style_label__28cWk\",\"value\":\"style_value__4Fn6l\",\"buttonWrapper\":\"style_buttonWrapper__1Fw6Y\",\"cell\":\"style_cell__1ZiRy\",\"leftBlock\":\"style_leftBlock__1joOI\",\"button\":\"style_button__gIwdI\",\"grow\":\"style_grow__2dre5\",\"iconWrapper\":\"style_iconWrapper__-UeO5\",\"icon\":\"style_icon__2v723\"};","import React, { FunctionComponent } from \"react\";\r\nimport { useGetLocale } from \"providers\";\r\nimport { Template } from \"../Components\";\r\nimport classes from \"./style.module.scss\";\r\n\r\nconst GemInfo: FunctionComponent<any> = () => {\r\n  const intl = useGetLocale();\r\n\r\n  return (\r\n    <Template>\r\n      <div className={classes.text}>\r\n        {intl.formatMessage({\r\n          id: \"wallet.gemInfo\",\r\n        })}\r\n      </div>\r\n    </Template>\r\n  );\r\n};\r\n\r\nexport default GemInfo;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"style_text___Zl7R\"};"],"sourceRoot":""}