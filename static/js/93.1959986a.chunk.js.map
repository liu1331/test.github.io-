{"version":3,"sources":["pages/Limbo/Game/Bet/components/Controller/components/Auto/OnOperation/style.module.scss","pages/Limbo/Game/Bet/components/Controller/components/Auto/style.module.scss","pages/Limbo/Game/Bet/components/Controller/components/Auto/OnOperation/index.tsx","pages/Limbo/Game/Bet/components/Controller/components/Auto/index.tsx"],"names":["module","exports","OnOperation","title","value","onChange","intl","useGetLocale","className","css","box","formBox","event","variant","Number","target","name","replace","values","labels","formatMessage","id","nestedComponents","1","inputWrapper","betPercent","String","replaceLetters","onBlur","replaceNumbers","radioClasses","label","round","radioRound","radio","classes","isCashout","checkbox","checked","cashout","Auto","useCoins","showInUSD","selectedCoin","manager","useLimboControl","isStarted","useIsAutoStarted","useState","panel","auto","operations","setValues","numberOfBetsInfinity","setNumberOfBetsInfinity","inputs","useRef","numberOfBets","stopOnLoss","stopOnWin","setOnOnDecision","type","emitter","setAutoValues","handleChangeInputs","key","current","validateNumbers","handleBlur","result","Object","entries","reduce","acm","data","fromUsd","setAutoLimits","limits","useEffect","removeListener","autoValuesListener","useLayoutEffect","removeLimitsListener","autoLimitsListener","forEach","content","inputValue","toUsd","toFixed","root","operation","onWin","onLoss","input","infinity","disabled","ref","node","min","withImg"],"mappings":"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","file":"static/js/93.1959986a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrapperPadding\":\"10px\",\"desktopHeaderSize\":\"64px\",\"bottomButtonsSize\":\"60px\",\"desktopChatWidth\":\"310px\",\"swipedChatWidth\":\"960px\",\"arrBlockWidth\":\"12px\",\"headerHeight\":\"60px\",\"inputPadding\":\"16px\",\"chatPadding\":\"16px\",\"inputHeight\":\"56px\",\"chatWidth\":\"280px\",\"spacing\":\"8px\",\"mobileScreen\":\"600px\",\"feyorraDisableSize\":\"1080px\",\"box\":\"style_box__3s-4B\",\"formBox\":\"style_formBox__37GD5\",\"title\":\"style_title__uz_TW\",\"checkbox\":\"style_checkbox__2I0ND\",\"check\":\"style_check__2hdWy\",\"label\":\"style_label__UdMMW\",\"inputWrapper\":\"style_inputWrapper__2lgI2\",\"rootInput\":\"style_rootInput__Mofkb\",\"radio\":\"style_radio__13prZ\",\"radioRound\":\"style_radioRound__BgADG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"style_root__1kjTl\",\"operation\":\"style_operation__2uMwQ\",\"limits\":\"style_limits__188U0\"};","import React, { ChangeEvent, FocusEvent } from \"react\";\r\n\r\nimport { useGetLocale } from \"providers\";\r\n\r\nimport { RadioGroup, Checkbox } from \"components\";\r\nimport { OnDecisionProps } from \"pages/Limbo/Game/Bet/types\";\r\nimport { replaceLetters, replaceNumbers } from \"utils/replaceString\";\r\n\r\nimport { LimboInput } from \"../../../../Input\";\r\nimport css from \"./style.module.scss\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  value: OnDecisionProps;\r\n  onChange: (value: OnDecisionProps) => void;\r\n}\r\n\r\nexport const OnOperation = ({ title, value, onChange }: Props) => {\r\n  const intl = useGetLocale();\r\n\r\n  const handleRadioChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    onChange({ ...value, variant: Number(event.target.value) });\r\n  };\r\n  const handleCheckerChange = () => {\r\n    onChange({ ...value, isCashout: !value.isCashout });\r\n  };\r\n  const handleBetInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    onChange({\r\n      ...value,\r\n      betPercent: String(replaceLetters(event.target.value)),\r\n    });\r\n  };\r\n\r\n  const handleCashoutInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    onChange({\r\n      ...value,\r\n      cashout: String(replaceLetters(event.target.value)),\r\n    });\r\n  };\r\n\r\n  const handleBetInputBlur = (event: FocusEvent<HTMLInputElement>) => {\r\n    const target = Number(event.target.value);\r\n    onChange({\r\n      ...value,\r\n      betPercent: String(replaceNumbers(String(target))),\r\n    });\r\n  };\r\n  const handleCashoutInputBlur = (event: FocusEvent<HTMLInputElement>) => {\r\n    const target = Number(event.target.value);\r\n\r\n    onChange({\r\n      ...value,\r\n      cashout: String(replaceNumbers(String(target))),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={css.box}>\r\n      <h1 className={css.title}>{title}</h1>\r\n      <div>\r\n        <fieldset className={css.formBox}>\r\n          <RadioGroup\r\n            onChange={handleRadioChange}\r\n            name={`${title}_limbo_radiogroup`.replace(\" \", \"_\")}\r\n            value={value.variant}\r\n            values={[0, 1, 2]}\r\n            labels={[\r\n              intl.formatMessage({ id: \"plinko.autoBet.changeBetBy\" }),\r\n              intl.formatMessage({\r\n                id: \"plinko.autoBet.resetToBaseBet\",\r\n              }),\r\n              intl.formatMessage({ id: \"plinko.autoBet.stopBetting\" }),\r\n            ]}\r\n            nestedComponents={{\r\n              1: (\r\n                <div className={css.inputWrapper}>\r\n                  <LimboInput\r\n                    onChange={handleBetInputChange}\r\n                    value={value.betPercent}\r\n                    onBlur={handleBetInputBlur}\r\n                  />\r\n                </div>\r\n              ),\r\n            }}\r\n            radioClasses={{\r\n              label: css.label,\r\n              round: css.radioRound,\r\n              radio: css.radio,\r\n            }}\r\n          />\r\n          <div>\r\n            <Checkbox\r\n              classes={{ label: css.label }}\r\n              onChange={handleCheckerChange}\r\n              className={css.checkbox}\r\n              checked={value.isCashout}\r\n              name=\"changeCashout\"\r\n              label={intl.formatMessage({\r\n                id: \"limboInterface.bet.auto.change\",\r\n              })}\r\n            />\r\n            <div className={css.inputWrapper}>\r\n              <LimboInput\r\n                onChange={handleCashoutInputChange}\r\n                value={value.cashout}\r\n                onBlur={handleCashoutInputBlur}\r\n              />\r\n            </div>\r\n          </div>\r\n        </fieldset>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(OnOperation);\r\n","import React, { useEffect, useLayoutEffect, useRef, useState } from \"react\";\r\n\r\nimport { validateNumbers } from \"utils\";\r\nimport { useGetLocale } from \"providers\";\r\nimport { useCoins } from \"hooks\";\r\n\r\nimport {\r\n  useLimboControl,\r\n  AutoPanel,\r\n  fromUsd,\r\n  toUsd,\r\n  useIsAutoStarted,\r\n} from \"pages/Limbo\";\r\nimport { OnDecisionProps } from \"pages/Limbo/Game/Bet/types\";\r\nimport { LimboInput } from \"../../../Input\";\r\n\r\nimport { OnOperation } from \"./OnOperation\";\r\nimport css from \"./style.module.scss\";\r\n\r\ninterface InputElements {\r\n  numberOfBets: HTMLInputElement | null;\r\n  stopOnWin: HTMLInputElement | null;\r\n  stopOnLoss: HTMLInputElement | null;\r\n}\r\n\r\nexport const Auto = () => {\r\n  const intl = useGetLocale();\r\n  const { showInUSD, selectedCoin } = useCoins();\r\n  const { manager } = useLimboControl();\r\n  const { isStarted } = useIsAutoStarted();\r\n\r\n  const [values, setValues] = useState(manager.panel.auto.operations);\r\n  const [numberOfBetsInfinity, setNumberOfBetsInfinity] = useState(true);\r\n  const inputs = useRef<InputElements>({\r\n    numberOfBets: null,\r\n    stopOnLoss: null,\r\n    stopOnWin: null,\r\n  });\r\n\r\n  const setOnOnDecision = (\r\n    type: \"win\" | \"loss\",\r\n    { betPercent, cashout, isCashout, variant }: OnDecisionProps,\r\n  ) => {\r\n    const { operations: values } = manager.panel.auto;\r\n    const key = type === \"win\" ? \"onWin\" : \"onLoss\";\r\n    values[key] = {\r\n      betPercent: Number(betPercent),\r\n      cashout: Number(cashout),\r\n      isCashout,\r\n      variant,\r\n    };\r\n\r\n    manager.emitter.setAutoValues(values);\r\n  };\r\n\r\n  const setOnWin = (value: OnDecisionProps) => setOnOnDecision(\"win\", value);\r\n  const setOnLoss = (value: OnDecisionProps) => setOnOnDecision(\"loss\", value);\r\n\r\n  const handleChangeInputs = (\r\n    key: keyof InputElements,\r\n    value: string | number,\r\n  ) => {\r\n    if (inputs.current[key] && value)\r\n      //@ts-ignore -- because HTMLInputElement.value: string // Type 'number' is not assignable to type 'string'\r\n      inputs.current[key].value = validateNumbers(value);\r\n  };\r\n\r\n  const setStopOnWin = (value: string | number) =>\r\n    handleChangeInputs(\"stopOnWin\", value);\r\n  const setStopOnLoss = (value: string | number) =>\r\n    handleChangeInputs(\"stopOnLoss\", value);\r\n\r\n  const handleBlur = () => {\r\n    const result = Object.entries(inputs.current).reduce((acm, value) => {\r\n      const [key, data] = value as [\r\n        keyof AutoPanel[\"limits\"],\r\n        HTMLInputElement | null,\r\n      ];\r\n\r\n      if (data?.value) {\r\n        acm[key] = fromUsd(data.value, key !== \"numberOfBets\");\r\n      }\r\n\r\n      return acm;\r\n    }, {} as AutoPanel[\"limits\"]);\r\n\r\n    manager.emitter.setAutoLimits({\r\n      ...manager.panel.auto.limits,\r\n      ...result,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const removeListener = manager.emitter.autoValuesListener((values) => {\r\n      setValues({ ...values });\r\n    });\r\n\r\n    return () => {\r\n      removeListener();\r\n    };\r\n  }, []);\r\n\r\n  useLayoutEffect(() => {\r\n    const removeLimitsListener = manager.emitter.autoLimitsListener(\r\n      (values) => {\r\n        Object.entries(values).forEach((content) => {\r\n          const [key, value] = content as [keyof InputElements, number];\r\n          if (inputs.current[key]) {\r\n            const inputValue = key !== \"numberOfBets\" ? toUsd(value) : value;\r\n\r\n            //@ts-ignore because value is number\r\n            inputs.current[key].value = inputValue.toFixed(\r\n              key === \"numberOfBets\" ? 0 : 8,\r\n            );\r\n\r\n            if (key === \"numberOfBets\") setNumberOfBetsInfinity(!value);\r\n          }\r\n        });\r\n      },\r\n    );\r\n\r\n    manager.emitter.setAutoLimits(manager.panel.auto.limits);\r\n\r\n    return () => {\r\n      removeLimitsListener();\r\n    };\r\n  }, [\r\n    inputs.current.numberOfBets,\r\n    inputs.current.stopOnLoss,\r\n    inputs.current.stopOnWin,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    manager.emitter.setAutoLimits(manager.panel.auto.limits);\r\n  }, [showInUSD, selectedCoin]);\r\n\r\n  return (\r\n    <div className={css.root}>\r\n      <div className={css.operation}>\r\n        <OnOperation\r\n          title={intl.formatMessage({ id: \"crashInterface.autoBet.onWin\" })}\r\n          //@ts-ignore because string !== number\r\n          value={values.onWin}\r\n          onChange={setOnWin}\r\n        />\r\n        <OnOperation\r\n          title={intl.formatMessage({ id: \"crashInterface.autoBet.onLoss\" })}\r\n          //@ts-ignore because string !== number\r\n          value={values.onLoss}\r\n          onChange={setOnLoss}\r\n        />\r\n      </div>\r\n\r\n      <div className={css.limits}>\r\n        <LimboInput\r\n          className={css.input}\r\n          onBlur={handleBlur}\r\n          label={intl.formatMessage({ id: \"dice.auto.roll.numberOfBets\" })}\r\n          infinity={numberOfBetsInfinity}\r\n          disabled={isStarted}\r\n          ref={(node) => (inputs.current.numberOfBets = node)}\r\n          type=\"number\"\r\n          min={0}\r\n        />\r\n        <LimboInput\r\n          withImg\r\n          className={css.input}\r\n          onChange={({ target }) => setStopOnWin(target.value)}\r\n          onBlur={handleBlur}\r\n          label={intl.formatMessage({\r\n            id: \"crashInterface.autoBet.stopOnProfit\",\r\n          })}\r\n          disabled={isStarted}\r\n          ref={(node) => (inputs.current.stopOnWin = node)}\r\n        />\r\n        <LimboInput\r\n          withImg\r\n          className={css.input}\r\n          onChange={({ target }) => setStopOnLoss(target.value)}\r\n          onBlur={handleBlur}\r\n          label={intl.formatMessage({\r\n            id: \"crashInterface.autoBet.stopOnLoss\",\r\n          })}\r\n          disabled={isStarted}\r\n          ref={(node) => (inputs.current.stopOnLoss = node)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Auto;\r\n"],"sourceRoot":""}