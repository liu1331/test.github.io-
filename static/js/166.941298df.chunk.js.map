{"version":3,"sources":["components/AutoOnOptions/component.tsx"],"names":["AutoOnOptions","title","value","onChange","classes","IncomeInput","Input","intl","useGetLocale","css","useSassImport","useMemo","MUIInput","className","box","formBox","variant","event","Number","target","labels","formatMessage","id","values","name","replace","nestedComponents","1","inputWrapper","betPercent","String","replaceLetters","onBlur","replaceNumbers","clsx","input","rootInput","radioClasses","label","cashout","isChecked","checkbox","checked"],"mappings":"yLAyIeA,UA9H+B,SAAC,GAMxC,IALLC,EAKI,EALJA,MACAC,EAII,EAJJA,MACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,QACOC,EACH,EADJC,MAEMC,EAAOC,yBACPC,EAAMC,aAAc,kBAAM,wCAuD1BJ,EAAQK,mBAAQ,kBAAMN,GAAeO,UAAU,CAACP,IAEtD,OACE,sBAAKQ,UAAWJ,EAAIK,IAApB,UACE,oBAAID,UAAWJ,EAAIR,MAAnB,SAA2BA,IAC3B,8BACE,2BAAUY,UAAWJ,EAAIM,QAAzB,UACE,cAAC,aAAD,CACEb,MAAOA,EAAMc,QACbb,SA9DgB,SAACc,GACzBd,EAAS,2BAAKD,GAAN,IAAac,QAASE,OAAOD,EAAME,OAAOjB,WA8D1CkB,OAAQ,CACNb,EAAKc,cAAc,CAAEC,GAAI,+BACzBf,EAAKc,cAAc,CACjBC,GAAI,kCAENf,EAAKc,cAAc,CAAEC,GAAI,gCAE3BC,OAAQ,CAAC,EAAG,EAAG,GACfC,KAAM,UAAGvB,EAAH,wBAA+BwB,QAAQ,IAAK,KAClDC,iBAAkB,CAChBC,EACE,qBAAKd,UAAWJ,EAAImB,aAApB,SACE,cAACtB,EAAD,CACEH,SA9DW,SAACc,GAC5Bd,EAAS,2BACJD,GADG,IAEN2B,WAAYC,OAAOC,YAAed,EAAME,OAAOjB,YA4DjCA,MAAOA,EAAM2B,WACbG,OA7CS,SAACf,GAC1B,IAAME,EAASD,OAAOD,EAAME,OAAOjB,OACnCC,EAAS,2BACJD,GADG,IAEN2B,WAAYC,OAAOG,YAAeH,OAAOX,SA0C3BN,UAAWqB,YAAI,OAAC9B,QAAD,IAACA,OAAD,EAACA,EAAS+B,MAAO1B,EAAI2B,gBAK5CC,aAAc,CACZC,MAAO7B,EAAI6B,SAGdpC,EAAMqC,SACL,gCACE,cAAC,IAAD,CACEnC,QAAS,CAAEkC,MAAO7B,EAAI6B,OACtBnC,SAzFc,WACtBD,EAAMqC,SACRpC,EAAS,2BACJD,GADG,IAENqC,QAAQ,2BACHrC,EAAMqC,SADJ,IAELC,UAAWtC,EAAMqC,QAAQC,gBAoFnB3B,UAAWJ,EAAIgC,SACfC,QAASxC,EAAMqC,QAAQC,UACvBhB,KAAK,gBACLc,MAAO/B,EAAKc,cAAc,CACxBC,GAAI,qCAGR,qBAAKT,UAAWJ,EAAImB,aAApB,SACE,cAACtB,EAAD,CACEH,SAjFiB,SAACc,GAC5Bf,EAAMqC,SACRpC,EAAS,2BACJD,GADG,IAENqC,QAAQ,2BACHrC,EAAMqC,SADJ,IAELrC,MAAO4B,OAAOG,YAAehB,EAAME,OAAOjB,cA4ElCA,MAAOA,EAAMqC,QACbP,OAhEe,SAACf,GAC9B,IAAME,EAASD,OAAOD,EAAME,OAAOjB,OAC/BA,EAAMqC,SACRpC,EAAS,2BACJD,GADG,IAENqC,QAAQ,2BACHrC,EAAMqC,SADJ,IAELrC,MAAO4B,OAAOG,YAAeH,OAAOX,WA0D5BN,UAAWqB,YAAI,OAAC9B,QAAD,IAACA,OAAD,EAACA,EAAS+B,MAAO1B,EAAI2B","file":"static/js/166.941298df.chunk.js","sourcesContent":["import React, { ChangeEvent, FC, FocusEvent, useMemo } from \"react\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { Input as MUIInput, RadioGroup } from \"components\";\r\nimport { useGetLocale } from \"providers\";\r\nimport { useSassImport } from \"hooks\";\r\n\r\nimport Checkbox from \"components/Checkbox\";\r\nimport { replaceLetters, replaceNumbers } from \"utils/replaceString\";\r\nimport { AutoOnOptionsProps } from \"./types\";\r\n\r\nconst AutoOnOptions: FC<AutoOnOptionsProps> = ({\r\n  title,\r\n  value,\r\n  onChange,\r\n  classes,\r\n  Input: IncomeInput,\r\n}) => {\r\n  const intl = useGetLocale();\r\n  const css = useSassImport(() => import(\"./style.module.scss\"));\r\n\r\n  const handleRadioChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    onChange({ ...value, variant: Number(event.target.value) });\r\n  };\r\n  const handleCheckerChange = () => {\r\n    if (value.cashout) {\r\n      onChange({\r\n        ...value,\r\n        cashout: {\r\n          ...value.cashout,\r\n          isChecked: value.cashout.isChecked,\r\n        },\r\n      });\r\n    }\r\n  };\r\n  const handleBetInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    onChange({\r\n      ...value,\r\n      betPercent: String(replaceLetters(event.target.value)),\r\n    });\r\n  };\r\n\r\n  const handleCashoutInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    if (value.cashout) {\r\n      onChange({\r\n        ...value,\r\n        cashout: {\r\n          ...value.cashout,\r\n          value: String(replaceNumbers(event.target.value)),\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleBetInputBlur = (event: FocusEvent<HTMLInputElement>) => {\r\n    const target = Number(event.target.value);\r\n    onChange({\r\n      ...value,\r\n      betPercent: String(replaceNumbers(String(target))),\r\n    });\r\n  };\r\n  const handleCashoutInputBlur = (event: FocusEvent<HTMLInputElement>) => {\r\n    const target = Number(event.target.value);\r\n    if (value.cashout) {\r\n      onChange({\r\n        ...value,\r\n        cashout: {\r\n          ...value.cashout,\r\n          value: String(replaceNumbers(String(target))),\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const Input = useMemo(() => IncomeInput || MUIInput, [IncomeInput]);\r\n\r\n  return (\r\n    <div className={css.box}>\r\n      <h1 className={css.title}>{title}</h1>\r\n      <div>\r\n        <fieldset className={css.formBox}>\r\n          <RadioGroup\r\n            value={value.variant}\r\n            onChange={handleRadioChange}\r\n            labels={[\r\n              intl.formatMessage({ id: \"plinko.autoBet.changeBetBy\" }),\r\n              intl.formatMessage({\r\n                id: \"plinko.autoBet.resetToBaseBet\",\r\n              }),\r\n              intl.formatMessage({ id: \"plinko.autoBet.stopBetting\" }),\r\n            ]}\r\n            values={[0, 1, 2]}\r\n            name={`${title}_roulette_radiogroup`.replace(\" \", \"_\")}\r\n            nestedComponents={{\r\n              1: (\r\n                <div className={css.inputWrapper}>\r\n                  <Input\r\n                    onChange={handleBetInputChange}\r\n                    value={value.betPercent}\r\n                    onBlur={handleBetInputBlur}\r\n                    className={clsx(classes?.input, css.rootInput)}\r\n                  />\r\n                </div>\r\n              ),\r\n            }}\r\n            radioClasses={{\r\n              label: css.label,\r\n            }}\r\n          />\r\n          {value.cashout && (\r\n            <div>\r\n              <Checkbox\r\n                classes={{ label: css.label }}\r\n                onChange={handleCheckerChange}\r\n                className={css.checkbox}\r\n                checked={value.cashout.isChecked}\r\n                name=\"changeCashout\"\r\n                label={intl.formatMessage({\r\n                  id: \"limboInterface.bet.auto.change\",\r\n                })}\r\n              />\r\n              <div className={css.inputWrapper}>\r\n                <Input\r\n                  onChange={handleCashoutInputChange}\r\n                  value={value.cashout as any}\r\n                  onBlur={handleCashoutInputBlur}\r\n                  className={clsx(classes?.input, css.rootInput)}\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n        </fieldset>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AutoOnOptions;\r\n"],"sourceRoot":""}