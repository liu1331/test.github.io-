{"version":3,"sources":["pages/Keno/style.module.scss","pages/Keno/Game/style.module.scss","pages/Keno/Game/RewardInfoWrapper/style.module.scss","pages/Keno/Controller/style.module.scss","pages/Keno/Controller/components/Bet/style.module.scss","pages/Keno/Controller/components/Bet/components/Select/style.module.scss","pages/Keno/Controller/components/Bet/components/Button/style.module.scss","pages/Keno/Controller/components/Bet/components/Input/style.module.scss","pages/Keno/Controller/components/AutoBet/style.module.scss","components/HotKeys/Listener/index.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","pages/Keno/Game/RewardInfoWrapper/index.tsx","pages/Keno/Game/index.tsx","pages/Keno/Controller/components/Bet/components/Select/index.tsx","pages/Keno/Controller/components/Bet/components/Button/index.tsx","pages/Keno/Controller/components/Bet/components/Input/index.tsx","pages/Keno/Controller/components/utils.ts","pages/Keno/Controller/components/Bet/index.tsx","pages/Keno/Controller/hooks/useGame.ts","pages/Keno/Controller/index.tsx","pages/Keno/Controller/components/AutoBet/index.tsx","pages/Keno/page.tsx","pages/Keno/index.tsx","pages/Keno/Controller/components/Reducer/index.ts","pages/Diamonds/Controller/components/Bet/components/BetButton/index.tsx","pages/Diamonds/Controller/components/Bet/components/BetButton/style.module.scss","pages/Diamonds/Controller/components/Bet/components/Switch/index.tsx","pages/Diamonds/Controller/components/Bet/components/Switch/style.module.scss","components/RewardModal/index.tsx","pages/Keno/Controller/components/Reducer/context.ts","pages/Keno/Controller/components/Reducer/provider.tsx"],"names":["module","exports","ActiveKeys","useHotKeyListener","callbacks","useHotKeys","isHotkeyActive","isHotKeysPaused","useEffect","keyDownListenerIgnore","event","isKeyboardEvent","target","tagName","toLowerCase","code","preventDefault","keyListener","key","callbackKeyA","callbackKeyS","callbackSpace","callbackKeyQ","callbackKeyW","callbackKeyE","callbackKeyR","callbackKeyT","callbackKeyY","callbackKeyD","window","addEventListener","removeEventListener","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","RewardInfoWrapper","className","useKenoControl","controlState","controlDispatch","selectedCellsCount","betAmount","risk","matchedNumbersCount","payoutTable","selectedCoin","useCoins","getPayoutTable","useCallback","a","fetch","process","response","json","responseBody","success","table","type","actions","SET_PAYOUT_TABLE","track","errors","console","log","clsx","styles","root","coin","Keno","cells","actualBet","fieldIsClear","profit","matchedCells","selectedCells","playEffect","useSoundSystemControl","controlFunctions","click","getSoundEffectNames","gamePathNames","KENO","CLEAR_FIELD","fieldWrapper","RewardModal","isOpen","ratio","winAmount","Number","toLocaleString","maximumFractionDigits","onCellClickHandler","cellIndex","SET_CELLS","Select","options","label","disabled","onChange","items","map","option","SelectItem","name","BaseSelect","openFromUpwards","classes","select","selectLabel","expandIcon","icon","String","memo","prevProps","nextProps","Button","children","props","Input","GameInput","input","refreshIconClass","refreshIcon","buttonClass","button","renderTrigger","inputOnChangeHandler","actionType","replace","checkingValue","isFinite","isNaN","inputOnBlurHandler","allowNegativeNumbers","valueString","parseFloat","Math","abs","toFixed","Bet","manualBetButtonOnClickHandler","autoBetButtonOnClickHandler","stopAutoBets","playFetchLoading","useState","isWarningOpen","setIsWarningOpen","intl","useGetLocale","localization","id","formatMessage","showInUSD","coinsPrices","convertedBalance","balance","price","isAutoMode","autoBetsIsStart","coinsConfiguration","setAmountFromConfig","SET_BET_AMOUNT_FROM_CONFIG","configType","showUsd","coinPrices","round","default","selectedCoinConfig","find","config","SET_BET_AMOUNT","getUsdValue","minimum_bet","toString","setBetAmount","riskOptions","riskTypes","betButtonText","betButtonAction","usdPrefix","buttonWrapper","Switch","leftText","rightText","checked","setChecked","SET_IS_AUTO_MODE","switch","BetButton","onClick","betControl","topLabel","coinIsLeftward","buttonHandlers","max","min","double","half","onBlur","warningModal","Warning","onClose","callBack","showUSD","SET_RISK_TYPE","withInfinityIcon","autoModeValues","numberOfBets","SET_NUMBER_OF_BETS","AUTO_SELECT_CELLS","margin","checkStopOnPnl","stopOnValue","isLoss","isNumberString","mul","equals","greaterThanOrEqualTo","usdToCurrency","amount","coinPrice","Decimal","isDecimal","toDecimal","div","error","sendRequest","requestBody","queryString","result","queryBody","JSON","stringify","method","headers","body","data","message","getWinModeBetAmount","mode","actualBetAmount","baseBet","onWinOrLossValue","stopAutoMode","add","percent","isStopAutoGame","stopCallBack","Controller","liveStatsIsOpen","liveStatsHandleClose","useSeed","rotateClientSeed","updateNonce","clientSeed","language","useLocale","useLocalStorage","token","onLoss","onWin","onWinMode","onLossMode","setPlayFetchLoading","greenPointReveal","win","numberSwitch","sendPlayRequest","cell","CellState","SELECTED","REWARD","push","reqParams","locale","client_seed","seed","bet_amt","numbers_selected","notifyBarManager","timeOut","isSetManually","coinsManager","coinValueUpdate","stopAutoGame","play","playData","common","PLAY","drawnCells","drawn_numbers","selected_numbers","liveStatsManager","addBet","autoPlay","SET_AUTO_BET_IS_START","stopOnLoss","stopOnProfit","isUsdBet","actualNumberOfBets","previousActualBetAmount","gt","modeResult","AUTO_PLAY","bet","sleep","liveProfit","useGame","getCoinsConfiguration","coinsConfigResponse","coinsConfigResponseBody","SET_COINS_CONFIGURATION","coins","reset","LiveStats","handleClose","AutoBet","enableUsdPrefix","autoModeControl","labels","values","SET_ON_WIN_MODE","nestedComponents","1","textAdornment","SET_ON_WIN","withRefreshIcon","onRefreshActionHandler","SET_ON_LOSS_MODE","SET_ON_LOSS","topValue","SET_STOP_ON_PROFIT","SET_STOP_ON_LOSS","BettingInformation","React","lazy","LazyComponentLoader","KenoPage","isSoundOpen","setIsSoundOpen","hotKeyIsOpen","setHotKeyIsOpen","setLiveStatsIsOpen","bettingInformationIsOpen","setBettingInformationIsOpen","gameWrapper","Game","field","rewards","optionsWrapper","OptionsButton","withSound","soundOnClick","liveStatOnclick","hotKeysOnClick","bettingInformationOnClick","statisticsWrapper","SoundModal","HotKeys","game","withFairness","KenoWrapper","Helmet","content","http-equiv","Seed","gameName","useContext","Context","switchWrapper","highlight","switchTrack","isUsd","useSassImport","wrapper","hr","defaultValue","initialKenoControlState","createContext","KenoControlProvider","useReducer","kenoControlReducer","Provider"],"mappings":"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","file":"static/js/40.19daeba5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrapperPadding\":\"10px\",\"desktopHeaderSize\":\"64px\",\"bottomButtonsSize\":\"60px\",\"desktopChatWidth\":\"310px\",\"swipedChatWidth\":\"960px\",\"arrBlockWidth\":\"12px\",\"headerHeight\":\"60px\",\"inputPadding\":\"16px\",\"chatPadding\":\"16px\",\"inputHeight\":\"56px\",\"chatWidth\":\"280px\",\"spacing\":\"8px\",\"mobileScreen\":\"600px\",\"feyorraDisableSize\":\"1080px\",\"optionsWrapper\":\"style_optionsWrapper__1DpOh\",\"statisticsWrapper\":\"style_statisticsWrapper__3F8hO\",\"gameWrapper\":\"style_gameWrapper__3CbGe\",\"bet\":\"style_bet__Ter97\",\"field\":\"style_field__2ZfqV\",\"rewards\":\"style_rewards__1iM8Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"style_root__1VP-s\",\"fieldWrapper\":\"style_fieldWrapper__1079N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"style_root__vdM9Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"style_root__2Vc3w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrapperPadding\":\"10px\",\"desktopHeaderSize\":\"64px\",\"bottomButtonsSize\":\"60px\",\"desktopChatWidth\":\"310px\",\"swipedChatWidth\":\"960px\",\"arrBlockWidth\":\"12px\",\"headerHeight\":\"60px\",\"inputPadding\":\"16px\",\"chatPadding\":\"16px\",\"inputHeight\":\"56px\",\"chatWidth\":\"280px\",\"spacing\":\"8px\",\"mobileScreen\":\"600px\",\"feyorraDisableSize\":\"1080px\",\"keno\":\"style_keno__16tbl\",\"betControl\":\"style_betControl__2QvpC\",\"buttonWrapper\":\"style_buttonWrapper__2yu3d\",\"switch\":\"style_switch__2WAYr\",\"margin\":\"style_margin__1n-Bt\",\"inputButtons\":\"style_inputButtons__1lXBJ\",\"refreshIcon\":\"style_refreshIcon__3xhpi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrapperPadding\":\"10px\",\"desktopHeaderSize\":\"64px\",\"bottomButtonsSize\":\"60px\",\"desktopChatWidth\":\"310px\",\"swipedChatWidth\":\"960px\",\"arrBlockWidth\":\"12px\",\"headerHeight\":\"60px\",\"inputPadding\":\"16px\",\"chatPadding\":\"16px\",\"inputHeight\":\"56px\",\"chatWidth\":\"280px\",\"spacing\":\"8px\",\"mobileScreen\":\"600px\",\"feyorraDisableSize\":\"1080px\",\"keno\":\"style_keno__2067F\",\"root\":\"style_root__2k3Pl\",\"select\":\"style_select__K6raM\",\"selectLabel\":\"style_selectLabel__2fIqs\",\"icon\":\"style_icon__2w0dG\",\"option\":\"style_option__2ES0D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrapperPadding\":\"10px\",\"desktopHeaderSize\":\"64px\",\"bottomButtonsSize\":\"60px\",\"desktopChatWidth\":\"310px\",\"swipedChatWidth\":\"960px\",\"arrBlockWidth\":\"12px\",\"headerHeight\":\"60px\",\"inputPadding\":\"16px\",\"chatPadding\":\"16px\",\"inputHeight\":\"56px\",\"chatWidth\":\"280px\",\"spacing\":\"8px\",\"mobileScreen\":\"600px\",\"feyorraDisableSize\":\"1080px\",\"root\":\"style_root__3MVvc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"style_input__3xM78\",\"refreshIcon\":\"style_refreshIcon__25ih5\",\"button\":\"style_button__SOn8u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrapperPadding\":\"10px\",\"desktopHeaderSize\":\"64px\",\"bottomButtonsSize\":\"60px\",\"desktopChatWidth\":\"310px\",\"swipedChatWidth\":\"960px\",\"arrBlockWidth\":\"12px\",\"headerHeight\":\"60px\",\"inputPadding\":\"16px\",\"chatPadding\":\"16px\",\"inputHeight\":\"56px\",\"chatWidth\":\"280px\",\"spacing\":\"8px\",\"mobileScreen\":\"600px\",\"feyorraDisableSize\":\"1080px\",\"root\":\"style_root__1IX5t\",\"autoModeControl\":\"style_autoModeControl__-Rmcd\",\"label\":\"style_label__EAbRr\"};","import { useEffect } from \"react\";\r\nimport { isKeyboardEvent } from \"utils/guards\";\r\nimport { useHotKeys } from \"../Provider\";\r\n\r\nenum ActiveKeys {\r\n  KeyA,\r\n  KeyS,\r\n  Space,\r\n  KeyQ,\r\n  KeyW,\r\n  KeyE,\r\n  KeyR,\r\n  KeyT,\r\n  KeyY,\r\n  KeyD,\r\n}\r\n\r\nexport interface HotKeysCallbacks {\r\n  callbackKeyA?: () => void;\r\n  callbackKeyS?: () => void;\r\n  callbackSpace?: () => void;\r\n  callbackKeyQ?: () => void;\r\n  callbackKeyW?: () => void;\r\n  callbackKeyE?: () => void;\r\n  callbackKeyR?: () => void;\r\n  callbackKeyT?: () => void;\r\n  callbackKeyY?: () => void;\r\n  callbackKeyD?: () => void;\r\n}\r\n\r\nexport const useHotKeyListener = (callbacks: HotKeysCallbacks) => {\r\n  const { isHotkeyActive, isHotKeysPaused } = useHotKeys();\r\n\r\n  useEffect(() => {\r\n    const keyDownListenerIgnore = (event: Event | KeyboardEvent) => {\r\n      if (\r\n        !isKeyboardEvent(event) ||\r\n        !isHotkeyActive ||\r\n        isHotKeysPaused ||\r\n        //@ts-ignore\r\n        event.target.tagName.toLowerCase() !== \"body\"\r\n      ) {\r\n        return;\r\n      }\r\n      const key = event.code;\r\n      if (key in ActiveKeys) {\r\n        event.preventDefault();\r\n      }\r\n    };\r\n\r\n    const keyListener = (event: Event | KeyboardEvent) => {\r\n      if (\r\n        !isKeyboardEvent(event) ||\r\n        !isHotkeyActive ||\r\n        isHotKeysPaused ||\r\n        //@ts-ignore\r\n        event.target.tagName.toLowerCase() !== \"body\"\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      const key = event.code;\r\n      if (key in ActiveKeys) {\r\n        event.preventDefault();\r\n        const {\r\n          callbackKeyA,\r\n          callbackKeyS,\r\n          callbackSpace,\r\n          callbackKeyQ,\r\n          callbackKeyW,\r\n          callbackKeyE,\r\n          callbackKeyR,\r\n          callbackKeyT,\r\n          callbackKeyY,\r\n          callbackKeyD,\r\n        } = callbacks;\r\n        switch (key) {\r\n          case \"KeyA\":\r\n            if (callbackKeyA) callbackKeyA();\r\n            break;\r\n          case \"KeyS\":\r\n            if (callbackKeyS) callbackKeyS();\r\n            break;\r\n          case \"Space\":\r\n            if (callbackSpace) callbackSpace();\r\n            break;\r\n          case \"KeyQ\":\r\n            if (callbackKeyQ) callbackKeyQ();\r\n            break;\r\n          case \"KeyW\":\r\n            if (callbackKeyW) callbackKeyW();\r\n            break;\r\n          case \"KeyE\":\r\n            if (callbackKeyE) callbackKeyE();\r\n            break;\r\n          case \"KeyR\":\r\n            if (callbackKeyR) callbackKeyR();\r\n            break;\r\n          case \"KeyT\":\r\n            if (callbackKeyT) callbackKeyT();\r\n            break;\r\n          case \"KeyY\":\r\n            if (callbackKeyY) callbackKeyY();\r\n            break;\r\n          case \"KeyD\":\r\n            if (callbackKeyD) callbackKeyD();\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"keydown\", keyDownListenerIgnore);\r\n    window.addEventListener(\"keyup\", keyListener);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", keyDownListenerIgnore);\r\n      window.removeEventListener(\"keyup\", keyListener);\r\n    };\r\n  }, [isHotkeyActive, isHotKeysPaused, callbacks]);\r\n};\r\n","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import React, { FC, useEffect, useCallback } from \"react\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { useCoins } from \"hooks\";\r\n\r\nimport { RewardInfo, PayoutTable } from \"games/Keno\";\r\n\r\nimport { useKenoControl, actions } from \"../../Controller/components/Reducer\";\r\nimport styles from \"./style.module.scss\";\r\nimport { track } from \"utils\";\r\n\r\ninterface PayoutTableResponseBody {\r\n  message: string;\r\n  success: boolean;\r\n  table: PayoutTable;\r\n}\r\n\r\ninterface Props {\r\n  className?: string;\r\n}\r\n\r\nconst RewardInfoWrapper: FC<Props> = ({ className }) => {\r\n  const { controlState, controlDispatch } = useKenoControl();\r\n  const {\r\n    selectedCellsCount,\r\n    betAmount,\r\n    risk,\r\n    matchedNumbersCount,\r\n    payoutTable,\r\n  } = controlState;\r\n  const { selectedCoin } = useCoins(\"selectedCoin\");\r\n\r\n  const getPayoutTable = useCallback(async () => {\r\n    try {\r\n      const response = await fetch(\r\n        `${process.env.REACT_APP_URL}/keno/payout-table`,\r\n      );\r\n      const responseBody = (await response.json()) as PayoutTableResponseBody;\r\n      if (responseBody.success) {\r\n        const payoutTable = responseBody.table;\r\n        controlDispatch({\r\n          type: actions.SET_PAYOUT_TABLE,\r\n          table: payoutTable,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      track()?.errors(error);\r\n      console.log(error);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getPayoutTable();\r\n  }, []);\r\n\r\n  return (\r\n    <div className={clsx(styles.root, className)}>\r\n      <RewardInfo\r\n        selectedCellsCount={selectedCellsCount}\r\n        betAmount={betAmount}\r\n        risk={risk}\r\n        payoutTable={payoutTable}\r\n        matchedNumbersCount={matchedNumbersCount}\r\n        coin={selectedCoin?.coin}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RewardInfoWrapper;\r\n","import React, { FC, useEffect } from \"react\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { Field } from \"games/Keno\";\r\nimport RewardModal from \"components/RewardModal\";\r\n\r\nimport styles from \"./style.module.scss\";\r\nimport { useKenoControl, actions } from \"../Controller/components/Reducer\";\r\nimport { useSoundSystemControl } from \"components/SoundModal/Provider\";\r\nimport {\r\n  gamePathNames,\r\n  getSoundEffectNames,\r\n} from \"components/SoundModal/Provider/config\";\r\n\r\ninterface Props {\r\n  className?: string;\r\n}\r\n\r\nconst Keno: FC<Props> = ({ className }) => {\r\n  const { controlDispatch, controlState } = useKenoControl();\r\n  const { cells, actualBet, payoutTable, fieldIsClear } = controlState;\r\n  const { profit, risk, matchedCells, selectedCells, coin } = actualBet;\r\n  const {\r\n    controlFunctions: { playEffect },\r\n  } = useSoundSystemControl();\r\n  const { click } = getSoundEffectNames(gamePathNames.KENO);\r\n  useEffect(() => {\r\n    controlDispatch({\r\n      type: actions.CLEAR_FIELD,\r\n    });\r\n  }, []);\r\n\r\n  const onCellClickHandler = (cellIndex: number) => {\r\n    playEffect(click);\r\n    controlDispatch({\r\n      type: actions.SET_CELLS,\r\n      cellIndex,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={clsx(styles.root, className)}>\r\n      <div className={styles.fieldWrapper}>\r\n        <RewardModal\r\n          isOpen={profit > 0 && matchedCells > 0 && !fieldIsClear}\r\n          ratio={\r\n            payoutTable && risk && selectedCells && matchedCells\r\n              ? payoutTable[risk][selectedCells][matchedCells]\r\n              : \"0\"\r\n          }\r\n          winAmount={Number(profit).toLocaleString(\"en-US\", {\r\n            maximumFractionDigits: 8,\r\n          })}\r\n          coin={coin}\r\n        />\r\n        <Field onCellClickHandler={onCellClickHandler} cells={cells} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Keno;\r\nexport { default as RewardInfoWrapper } from \"./RewardInfoWrapper\";\r\n","import React, { FC, memo } from \"react\";\r\n\r\nimport BaseSelect from \"components/BaseSelect\";\r\nimport SelectItem from \"components/BaseSelect/components/SelectItem\";\r\n\r\nimport styles from \"./style.module.scss\";\r\n\r\nexport interface Props {\r\n  options: Array<{\r\n    value: string;\r\n    name: string;\r\n  }>;\r\n  value: string;\r\n  label: string;\r\n  onChange: (value: string) => void;\r\n  disabled?: boolean;\r\n}\r\n\r\nconst Select: FC<Props> = ({ options, value, label, disabled, onChange }) => {\r\n  const items = options?.map((option) => (\r\n    <SelectItem key={option.value} label={option.name} value={option.value} />\r\n  ));\r\n\r\n  return (\r\n    <div className={styles.root}>\r\n      <h1>{label}</h1>\r\n      <BaseSelect\r\n        disabled={disabled}\r\n        value={value}\r\n        openFromUpwards={false}\r\n        classes={{\r\n          root: styles.select,\r\n          label: styles.selectLabel,\r\n          expandIcon: styles.icon,\r\n        }}\r\n        onChange={(value) => onChange(String(value))}>\r\n        {items}\r\n      </BaseSelect>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(Select, (prevProps, nextProps) => {\r\n  return (\r\n    prevProps.value === nextProps.value &&\r\n    prevProps.disabled === nextProps.disabled &&\r\n    prevProps.options[0].name === nextProps.options[0].name\r\n  );\r\n});\r\n","import React, { FC } from \"react\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { Button as ButtonBase, ButtonProps } from \"components\";\r\n\r\nimport styles from \"./style.module.scss\";\r\n\r\nconst Button: FC<ButtonProps> = ({ children, className, ...props }) => {\r\n  return (\r\n    <ButtonBase {...props} className={clsx(styles.root, className)}>\r\n      {children}\r\n    </ButtonBase>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { FC, memo } from \"react\";\r\n\r\nimport GameInput, { Props as GameInputProps } from \"components/GameInput\";\r\n\r\nimport styles from \"./style.module.scss\";\r\n\r\ninterface Props extends GameInputProps {\r\n  renderTrigger?: boolean;\r\n}\r\n\r\nconst Input: FC<Props> = ({ ...props }) => {\r\n  return (\r\n    <GameInput\r\n      classes={{ root: styles.input }}\r\n      refreshIconClass={styles.refreshIcon}\r\n      buttonClass={styles.button}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nexport default memo(Input, (prevProps, nextProps) => {\r\n  return (\r\n    prevProps.value === nextProps.value &&\r\n    prevProps.coin === nextProps.coin &&\r\n    prevProps.disabled === nextProps.disabled &&\r\n    prevProps.renderTrigger === nextProps.renderTrigger\r\n  );\r\n});\r\n","import { ChangeEvent } from \"react\";\r\n\r\nimport { KenoControlActions } from \"./Reducer\";\r\n\r\nexport const inputOnChangeHandler = (\r\n  event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n  actionType: string,\r\n  controlDispatch: (value: KenoControlActions) => void,\r\n) => {\r\n  const value = event.target.value.replace(\"$\", \"\");\r\n  const checkingValue = value === \"-\" ? -1 : Number(value);\r\n  if (!isFinite(checkingValue) || isNaN(checkingValue)) {\r\n    return;\r\n  }\r\n  controlDispatch({\r\n    type: actionType,\r\n    value,\r\n  } as KenoControlActions);\r\n};\r\n\r\nexport const inputOnBlurHandler = (\r\n  event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n  actionType: string,\r\n  controlDispatch: (value: KenoControlActions) => void,\r\n  allowNegativeNumbers: boolean = false,\r\n) => {\r\n  const valueString = event.target.value.replace(\"$\", \"\");\r\n  if (valueString === \"\") return;\r\n  let value = parseFloat(valueString);\r\n  if (!isFinite(value) || isNaN(value)) {\r\n    value = 0;\r\n  }\r\n  value = allowNegativeNumbers ? value : Math.abs(value);\r\n  controlDispatch({\r\n    type: actionType,\r\n    value: value.toFixed(8),\r\n  } as KenoControlActions);\r\n};\r\n","import React, { FC, useEffect, useState } from \"react\";\r\n\r\nimport { useGetLocale } from \"providers\";\r\nimport { useCoins } from \"hooks\";\r\n\r\nimport BetButton from \"pages/Diamonds/Controller/components/Bet/components/BetButton\";\r\nimport Switch from \"pages/Diamonds/Controller/components/Bet/components/Switch\";\r\nimport { useHotKeyListener } from \"components/HotKeys/Listener\";\r\nimport Warning from \"components/Warning\";\r\n\r\nimport styles from \"./style.module.scss\";\r\nimport Select from \"./components/Select\";\r\nimport Button from \"./components/Button\";\r\nimport Input from \"./components/Input\";\r\nimport { getUsdValue } from \"../Reducer/actions\";\r\nimport { Risk, useKenoControl, actions, riskTypes } from \"../Reducer\";\r\nimport { inputOnChangeHandler, inputOnBlurHandler } from \"../utils\";\r\n\r\ninterface Props {\r\n  manualBetButtonOnClickHandler: () => void;\r\n  autoBetButtonOnClickHandler: () => void;\r\n  stopAutoBets: () => void;\r\n  playFetchLoading?: boolean;\r\n}\r\n\r\nconst Bet: FC<Props> = ({\r\n  manualBetButtonOnClickHandler,\r\n  autoBetButtonOnClickHandler,\r\n  stopAutoBets,\r\n  playFetchLoading,\r\n}) => {\r\n  const [isWarningOpen, setIsWarningOpen] = useState(false);\r\n\r\n  const intl = useGetLocale();\r\n  const localization = (id: string) => intl.formatMessage({ id: `keno.${id}` });\r\n\r\n  const { selectedCoin, showInUSD, coinsPrices } = useCoins([\r\n    \"selectedCoin\",\r\n    \"showInUSD\",\r\n    \"coinsPrices\",\r\n  ]);\r\n  const isConvertBalanceToUsd =\r\n    showInUSD && selectedCoin && selectedCoin?.coin !== \"GEM\";\r\n  const convertedBalance = isConvertBalanceToUsd\r\n    ? Number(selectedCoin?.balance) * Number(selectedCoin?.price)\r\n    : Number(selectedCoin?.balance);\r\n  const { controlState, controlDispatch } = useKenoControl();\r\n  const {\r\n    betAmount,\r\n    risk,\r\n    isAutoMode,\r\n    autoBetsIsStart,\r\n    coinsConfiguration,\r\n    selectedCellsCount,\r\n  } = controlState;\r\n\r\n  const riskOnChange = (value: string) => {\r\n    controlDispatch({\r\n      type: actions.SET_RISK_TYPE,\r\n      risk: value as Risk,\r\n    });\r\n  };\r\n\r\n  const setAmountFromConfig = (type: \"min\" | \"max\" | \"half\" | \"double\") => {\r\n    if (!selectedCoin) return;\r\n    controlDispatch({\r\n      type: actions.SET_BET_AMOUNT_FROM_CONFIG,\r\n      balance: selectedCoin.balance,\r\n      betAmount,\r\n      selectedCoin: selectedCoin.coin,\r\n      configType: type,\r\n      showUsd: showInUSD,\r\n      coinPrices: coinsPrices,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!isAutoMode && autoBetsIsStart) {\r\n      stopAutoBets();\r\n    }\r\n  }, [isAutoMode, autoBetsIsStart]);\r\n\r\n  useEffect(() => {\r\n    if (autoBetsIsStart) {\r\n      stopAutoBets();\r\n    }\r\n  }, [showInUSD]);\r\n\r\n  useEffect(() => {\r\n    setAmountFromConfig(\"min\");\r\n  }, [coinsConfiguration.length]);\r\n\r\n  useEffect(() => {\r\n    const setBetAmount = async () => {\r\n      const { default: round } = await import(\"lodash.round\");\r\n      if (coinsConfiguration.length > 0 && selectedCoin && coinsPrices) {\r\n        const selectedCoinConfig = coinsConfiguration.find(\r\n          (config) => config.coin === selectedCoin.coin,\r\n        );\r\n        if (selectedCoinConfig) {\r\n          controlDispatch({\r\n            type: actions.SET_BET_AMOUNT,\r\n            value: showInUSD\r\n              ? round(\r\n                  getUsdValue(\r\n                    selectedCoin.coin,\r\n                    coinsPrices,\r\n                    selectedCoinConfig.minimum_bet,\r\n                  ),\r\n                  8,\r\n                ).toString()\r\n              : selectedCoinConfig.minimum_bet,\r\n          });\r\n        }\r\n      }\r\n    };\r\n\r\n    setBetAmount();\r\n  }, [showInUSD]);\r\n\r\n  const riskOptions = riskTypes.map((type) => ({\r\n    value: type,\r\n    name: localization(`risk.${type}`),\r\n  }));\r\n\r\n  let betButtonText = localization(\"button.bet\");\r\n  let betButtonAction = manualBetButtonOnClickHandler;\r\n  if (isAutoMode && autoBetsIsStart) {\r\n    betButtonText = \"Stop AutoBet\";\r\n    betButtonAction = stopAutoBets;\r\n  } else if (isAutoMode) {\r\n    betButtonText = localization(\"button.autoBet\");\r\n    betButtonAction = autoBetButtonOnClickHandler;\r\n  }\r\n\r\n  useHotKeyListener({\r\n    callbackKeyA: () => setAmountFromConfig(\"half\"),\r\n    callbackKeyS: () => setAmountFromConfig(\"double\"),\r\n    callbackSpace: () => {\r\n      if (!isAutoMode && playFetchLoading) return;\r\n      betButtonAction();\r\n    },\r\n  });\r\n\r\n  const usdPrefix = showInUSD && selectedCoin?.coin !== \"GEM\";\r\n  return (\r\n    <div className={styles.root}>\r\n      <div className={styles.buttonWrapper}>\r\n        <Switch\r\n          leftText={localization(\"switch.manual\")}\r\n          rightText={localization(\"switch.auto\")}\r\n          checked={isAutoMode}\r\n          setChecked={(checked) =>\r\n            controlDispatch({ type: actions.SET_IS_AUTO_MODE, value: checked })\r\n          }\r\n          className={styles.switch}\r\n        />\r\n        <BetButton\r\n          disabled={\r\n            (!isAutoMode && playFetchLoading) ||\r\n            (!autoBetsIsStart && selectedCellsCount === 0)\r\n          }\r\n          onClick={betButtonAction}>\r\n          {betButtonText}\r\n        </BetButton>\r\n      </div>\r\n      <div className={styles.betControl}>\r\n        <Input\r\n          topLabel={localization(\"input.betAmount\")}\r\n          coin={selectedCoin?.coin}\r\n          coinIsLeftward\r\n          buttonHandlers={{\r\n            max: () => setIsWarningOpen(true),\r\n            min: () => setAmountFromConfig(\"min\"),\r\n            double: () => setAmountFromConfig(\"double\"),\r\n            half: () => setAmountFromConfig(\"half\"),\r\n          }}\r\n          value={betAmount}\r\n          onChange={(event) => {\r\n            inputOnChangeHandler(\r\n              event,\r\n              actions.SET_BET_AMOUNT,\r\n              controlDispatch,\r\n            );\r\n          }}\r\n          onBlur={(event) => {\r\n            if (\r\n              Number(event.target.value.replace(\"$\", \"\") || 0) >\r\n              convertedBalance\r\n            ) {\r\n              setAmountFromConfig(\"min\");\r\n              return;\r\n            }\r\n            inputOnBlurHandler(event, actions.SET_BET_AMOUNT, controlDispatch);\r\n          }}\r\n          warningModal={\r\n            <Warning\r\n              isOpen={isWarningOpen}\r\n              onClose={() => setIsWarningOpen(false)}\r\n              callBack={() => setAmountFromConfig(\"max\")}\r\n            />\r\n          }\r\n          renderTrigger={isWarningOpen}\r\n          // maxButtonActionHandler={() => setIsWarningOpen(true)}\r\n          showUSD={usdPrefix}\r\n          disabled={autoBetsIsStart}\r\n        />\r\n        <Select\r\n          label=\"Risk\"\r\n          options={riskOptions}\r\n          value={localization(`risk.${risk}`)}\r\n          onChange={riskOnChange}\r\n          disabled={autoBetsIsStart}\r\n        />\r\n        {isAutoMode ? (\r\n          <Input\r\n            topLabel={localization(\"input.numberOfBets\")}\r\n            withInfinityIcon={controlState.autoModeValues.numberOfBets === \"\"}\r\n            value={controlState.autoModeValues.numberOfBets}\r\n            disabled={autoBetsIsStart}\r\n            onChange={(event) =>\r\n              inputOnChangeHandler(\r\n                event,\r\n                actions.SET_NUMBER_OF_BETS,\r\n                controlDispatch,\r\n              )\r\n            }\r\n            onBlur={(event) =>\r\n              inputOnBlurHandler(\r\n                event,\r\n                actions.SET_NUMBER_OF_BETS,\r\n                controlDispatch,\r\n              )\r\n            }\r\n          />\r\n        ) : null}\r\n      </div>\r\n      {!isAutoMode ? (\r\n        <div className={styles.buttonWrapper}>\r\n          <Button\r\n            onClick={() => {\r\n              controlDispatch({ type: actions.AUTO_SELECT_CELLS });\r\n            }}\r\n            className={styles.margin}>\r\n            {localization(\"autoSelect\")}\r\n          </Button>\r\n          <Button\r\n            onClick={() => {\r\n              controlDispatch({ type: actions.CLEAR_FIELD });\r\n            }}>\r\n            {localization(\"clear\")}\r\n          </Button>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Bet;\r\n","import { Dispatch, useState } from \"react\";\r\nimport { Decimal } from \"utils/decimal\";\r\n\r\nimport { toDecimal, isNumberString, sleep, track } from \"utils\";\r\nimport { coinsManager, useCoins, useLocalStorage } from \"hooks\";\r\nimport { useSeed, useLocale } from \"providers\";\r\nimport { notifyBarManager } from \"components\";\r\n\r\nimport { CellState } from \"games/Keno/Field/Cell/config\";\r\n\r\nimport {\r\n  KenoControlState,\r\n  KenoControlActions,\r\n  AutoBetMode,\r\n  actions,\r\n} from \"../components/Reducer\";\r\nimport { liveStatsManager } from \"components/LiveStats/eventEmitter/emitter\";\r\nimport { useSoundSystemControl } from \"components/SoundModal/Provider\";\r\nimport {\r\n  gamePathNames,\r\n  getSoundEffectNames,\r\n} from \"components/SoundModal/Provider/config\";\r\n\r\ninterface BaseResponse {\r\n  message: string;\r\n  success: boolean;\r\n}\r\n\r\ninterface PlayGameFetchResponse extends BaseResponse {\r\n  win: boolean;\r\n  payout: number;\r\n  drawn_numbers: Array<number>;\r\n  selected_numbers: Array<number>;\r\n  common: number;\r\n  coin: string;\r\n  balance: string;\r\n  profit: string;\r\n}\r\n\r\nconst checkStopOnPnl = (\r\n  stopOnValue: string,\r\n  profit: Decimal,\r\n  isLoss = false,\r\n) => {\r\n  if (isNumberString(stopOnValue) && Number(stopOnValue) > 0) {\r\n    profit = isLoss ? profit.mul(-1) : profit;\r\n    return !profit.equals(0) && profit.greaterThanOrEqualTo(stopOnValue);\r\n  }\r\n  return false;\r\n};\r\n\r\nconst getPercent = (value: Decimal, percent: Decimal | string) => {\r\n  return value.mul(percent).div(100);\r\n};\r\n\r\nconst usdToCurrency = (\r\n  amount: string | Decimal,\r\n  coin: string,\r\n  coinPrice: any,\r\n) => {\r\n  try {\r\n    return (\r\n      Decimal.isDecimal(amount)\r\n        ? (amount as Decimal)\r\n        : toDecimal(amount as string)\r\n    ).div(coinPrice[coin]?.price);\r\n  } catch (error) {\r\n    track()?.errors(error);\r\n    return toDecimal(0);\r\n  }\r\n};\r\n\r\nconst sendRequest = async <TData extends BaseResponse, TBody = unknown>(\r\n  requestBody: TBody,\r\n  queryString: string,\r\n) => {\r\n  const result = {} as { error?: string; data?: TData };\r\n\r\n  try {\r\n    const queryBody = JSON.stringify(requestBody);\r\n    const response = await fetch(\r\n      `${process.env.REACT_APP_URL}/${queryString}`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        },\r\n        body: queryBody,\r\n      },\r\n    );\r\n    result.data = (await response.json()) as TData;\r\n    if (!result.data.success) {\r\n      result.error = result.data.message;\r\n    }\r\n  } catch (error) {\r\n    result.error = \"unrecognized error has occurred\";\r\n  }\r\n  return result;\r\n};\r\n\r\nconst getWinModeBetAmount = (\r\n  mode: AutoBetMode,\r\n  actualBetAmount: Decimal,\r\n  baseBet: Decimal,\r\n  onWinOrLossValue: string,\r\n  stopAutoMode: () => void,\r\n) => {\r\n  switch (mode) {\r\n    case \"reset\":\r\n      return baseBet;\r\n    case \"stop\":\r\n      stopAutoMode();\r\n      return;\r\n    case \"change\":\r\n      if (isNumberString(onWinOrLossValue)) {\r\n        return actualBetAmount.add(\r\n          getPercent(actualBetAmount, onWinOrLossValue),\r\n        );\r\n      }\r\n  }\r\n};\r\n\r\nlet isStopAutoGame = false,\r\n  stopCallBack = () => {};\r\n\r\nexport const useGame = (\r\n  controlState: KenoControlState,\r\n  controlDispatch: Dispatch<KenoControlActions>,\r\n) => {\r\n  const { selectedCoin, showInUSD, coinsPrices } = useCoins();\r\n  const { rotateClientSeed, updateNonce, clientSeed } = useSeed();\r\n  const language = useLocale();\r\n  const [token] = useLocalStorage(\"token\");\r\n\r\n  const { betAmount, risk, cells, autoModeValues } = controlState;\r\n  const { numberOfBets, onLoss, onWin, onWinMode, onLossMode } = autoModeValues;\r\n\r\n  const [playFetchLoading, setPlayFetchLoading] = useState(false);\r\n  const {\r\n    controlFunctions: { playEffect },\r\n  } = useSoundSystemControl();\r\n  const { greenPointReveal, win, numberSwitch } = getSoundEffectNames(\r\n    gamePathNames.KENO,\r\n  );\r\n  const sendPlayRequest = async (actualBet: string) => {\r\n    if (!clientSeed || !selectedCoin || !token) return;\r\n\r\n    const selectedCells = [];\r\n    for (const cell in cells) {\r\n      if (\r\n        cells[cell] === CellState.SELECTED ||\r\n        cells[cell] === CellState.REWARD\r\n      ) {\r\n        selectedCells.push(Number(cell));\r\n      }\r\n    }\r\n    const reqParams = {\r\n      token: token,\r\n      language: language.locale,\r\n      client_seed: clientSeed?.seed,\r\n      bet_amt: actualBet,\r\n      coin: selectedCoin.coin,\r\n      numbers_selected: selectedCells,\r\n      risk,\r\n    };\r\n\r\n    const { data, error } = await sendRequest<PlayGameFetchResponse>(\r\n      reqParams,\r\n      \"keno/play\",\r\n    );\r\n\r\n    if (error || !data?.success) {\r\n      notifyBarManager.error({\r\n        message: error ? error : \"Error\",\r\n        timeOut: 4000,\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!clientSeed?.isSetManually) {\r\n      rotateClientSeed();\r\n    } else {\r\n      updateNonce();\r\n    }\r\n    coinsManager.coinValueUpdate(data.balance, selectedCoin.coin);\r\n\r\n    return data;\r\n  };\r\n\r\n  const play = async () => {\r\n    if (!selectedCoin) return;\r\n\r\n    const actualBetAmount =\r\n      showInUSD && selectedCoin.coin !== \"GEM\"\r\n        ? toDecimal(betAmount)\r\n            .div(selectedCoin?.price || \"0\")\r\n            .toFixed(8)\r\n        : betAmount;\r\n\r\n    setPlayFetchLoading(true);\r\n    const playData = await sendPlayRequest(actualBetAmount);\r\n    setPlayFetchLoading(false);\r\n\r\n    if (!playData) return;\r\n    if (Number(playData.profit) > 0) {\r\n      playEffect(win);\r\n    } else {\r\n      if (playData.common > 0) {\r\n        playEffect(greenPointReveal);\r\n        playEffect(numberSwitch);\r\n      } else {\r\n        playEffect(numberSwitch);\r\n      }\r\n    }\r\n\r\n    controlDispatch({\r\n      type: actions.PLAY,\r\n      drawnCells: playData.drawn_numbers,\r\n      actualBet: {\r\n        profit: playData.profit,\r\n        selectedCells: playData.selected_numbers.length,\r\n        matchedCells: playData.common,\r\n        coin: playData.coin,\r\n        risk,\r\n        betAmount: actualBetAmount,\r\n      },\r\n    });\r\n\r\n    const profit = Number(playData.profit),\r\n      amount = Number(actualBetAmount);\r\n\r\n    liveStatsManager.addBet({\r\n      amount,\r\n      profit,\r\n      coin: playData.coin,\r\n    });\r\n  };\r\n\r\n  const stopAutoGame = (e?: any, f?: () => void) => {\r\n    if (f) {\r\n      stopCallBack = f;\r\n    }\r\n    isStopAutoGame = true;\r\n  };\r\n\r\n  const autoPlay = async () => {\r\n    stopCallBack = () => null;\r\n    if (!selectedCoin) return;\r\n    isStopAutoGame = false;\r\n\r\n    controlDispatch({\r\n      type: actions.SET_AUTO_BET_IS_START,\r\n      value: true,\r\n    });\r\n\r\n    let { stopOnLoss, stopOnProfit } = autoModeValues;\r\n    const isUsdBet = showInUSD && selectedCoin.coin !== \"GEM\";\r\n\r\n    if (isUsdBet) {\r\n      stopOnProfit = usdToCurrency(\r\n        stopOnProfit,\r\n        selectedCoin.coin,\r\n        coinsPrices,\r\n      ).toString();\r\n      stopOnLoss = usdToCurrency(\r\n        stopOnLoss,\r\n        selectedCoin.coin,\r\n        coinsPrices,\r\n      ).toString();\r\n    }\r\n\r\n    let profit = toDecimal(0);\r\n    let actualNumberOfBets = Number(numberOfBets);\r\n    let actualBetAmount = usdToCurrency(\r\n      betAmount,\r\n      selectedCoin.coin,\r\n      coinsPrices,\r\n    );\r\n    try {\r\n      actualBetAmount = toDecimal(betAmount);\r\n    } catch (error) {\r\n      track()?.errors(error);\r\n      actualBetAmount = toDecimal(0);\r\n    }\r\n\r\n    const baseBet = actualBetAmount;\r\n    while (true) {\r\n      if (\r\n        isStopAutoGame ||\r\n        checkStopOnPnl(stopOnProfit, profit) ||\r\n        checkStopOnPnl(stopOnLoss, profit, true) ||\r\n        (actualNumberOfBets === 0 && isNumberString(numberOfBets))\r\n      ) {\r\n        stopCallBack();\r\n        break;\r\n      }\r\n\r\n      const playData = await sendPlayRequest(\r\n        isUsdBet\r\n          ? usdToCurrency(\r\n              actualBetAmount,\r\n              selectedCoin.coin,\r\n              coinsPrices,\r\n            ).toFixed(8)\r\n          : actualBetAmount.toFixed(8),\r\n      );\r\n      if (!playData) break;\r\n\r\n      const previousActualBetAmount = actualBetAmount;\r\n      profit = profit.add(playData.profit);\r\n\r\n      if (toDecimal(playData.profit).gt(0)) {\r\n        const modeResult = getWinModeBetAmount(\r\n          onWinMode,\r\n          actualBetAmount,\r\n          baseBet,\r\n          onWin,\r\n          stopAutoGame,\r\n        );\r\n        if (modeResult) actualBetAmount = modeResult;\r\n      } else {\r\n        const modeResult = getWinModeBetAmount(\r\n          onLossMode,\r\n          actualBetAmount,\r\n          baseBet,\r\n          onLoss,\r\n          stopAutoGame,\r\n        );\r\n        if (modeResult) actualBetAmount = modeResult;\r\n      }\r\n\r\n      actualNumberOfBets--;\r\n\r\n      controlDispatch({\r\n        type: actions.AUTO_PLAY,\r\n        drawnCells: playData.drawn_numbers,\r\n        numberOfBets: isNumberString(numberOfBets)\r\n          ? String(actualNumberOfBets)\r\n          : numberOfBets,\r\n        bet: actualBetAmount.toFixed(8),\r\n        actualBet: {\r\n          profit: playData.profit,\r\n          selectedCells: playData.selected_numbers.length,\r\n          matchedCells: playData.common,\r\n          coin: playData.coin,\r\n          risk,\r\n          betAmount: previousActualBetAmount.toFixed(8),\r\n        },\r\n      });\r\n\r\n      await sleep(0.25);\r\n\r\n      const liveProfit = Number(playData.profit),\r\n        amount = Number(actualBetAmount);\r\n\r\n      liveStatsManager.addBet({\r\n        amount,\r\n        profit: liveProfit,\r\n        coin: playData.coin,\r\n      });\r\n    }\r\n\r\n    controlDispatch({\r\n      type: actions.SET_AUTO_BET_IS_START,\r\n      value: false,\r\n    });\r\n  };\r\n\r\n  return { play, playFetchLoading, stopAutoGame, autoPlay };\r\n};\r\n","import React, { FC, useEffect, useCallback } from \"react\";\r\nimport clsx from \"clsx\";\r\n\r\nimport LiveStats from \"components/LiveStats\";\r\n\r\nimport styles from \"./style.module.scss\";\r\nimport Bet from \"./components/Bet\";\r\nimport {\r\n  CoinConfiguration,\r\n  actions,\r\n  useKenoControl,\r\n} from \"./components/Reducer\";\r\nimport { useGame } from \"./hooks\";\r\nimport { liveStatsManager } from \"components/LiveStats/eventEmitter/emitter\";\r\nimport { useCoins } from \"hooks\";\r\nimport { useSoundSystemControl } from \"components/SoundModal/Provider\";\r\nimport {\r\n  gamePathNames,\r\n  getSoundEffectNames,\r\n} from \"components/SoundModal/Provider/config\";\r\n\r\ninterface Props {\r\n  liveStatsIsOpen: boolean;\r\n  liveStatsHandleClose: () => void;\r\n  className?: string;\r\n}\r\n\r\nconst Controller: FC<Props> = ({\r\n  className,\r\n  liveStatsIsOpen,\r\n  liveStatsHandleClose,\r\n}) => {\r\n  const { controlState, controlDispatch } = useKenoControl();\r\n  const { selectedCoin } = useCoins();\r\n  const { play, playFetchLoading, autoPlay, stopAutoGame } = useGame(\r\n    controlState,\r\n    controlDispatch,\r\n  );\r\n  const {\r\n    controlFunctions: { playEffect },\r\n  } = useSoundSystemControl();\r\n\r\n  const { bet } = getSoundEffectNames(gamePathNames.KENO);\r\n  const getCoinsConfiguration = useCallback(async () => {\r\n    const coinsConfigResponse = await fetch(\r\n      `${process.env.REACT_APP_URL}/keno/get-configuration`,\r\n    );\r\n    const coinsConfigResponseBody: {\r\n      coins: Array<CoinConfiguration>;\r\n      success: boolean;\r\n    } = await coinsConfigResponse.json();\r\n    if (coinsConfigResponseBody.success) {\r\n      controlDispatch({\r\n        type: actions.SET_COINS_CONFIGURATION,\r\n        config: coinsConfigResponseBody.coins,\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getCoinsConfiguration();\r\n  }, []);\r\n\r\n  useEffect(() => () => stopAutoGame(), []);\r\n\r\n  useEffect(() => {\r\n    stopAutoGame({}, () => {\r\n      liveStatsManager.reset();\r\n    });\r\n  }, [selectedCoin?.coin]);\r\n\r\n  return (\r\n    <>\r\n      <div className={clsx(styles.root, className)}>\r\n        <Bet\r\n          manualBetButtonOnClickHandler={() => {\r\n            playEffect(bet);\r\n            play();\r\n          }}\r\n          autoBetButtonOnClickHandler={autoPlay}\r\n          stopAutoBets={stopAutoGame}\r\n          playFetchLoading={playFetchLoading}\r\n        />\r\n      </div>\r\n      <LiveStats isOpen={liveStatsIsOpen} handleClose={liveStatsHandleClose} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Controller;\r\n","import React, { FC } from \"react\";\r\nimport { useGetLocale } from \"providers\";\r\n\r\nimport { RadioGroup } from \"components\";\r\nimport { useCoins } from \"hooks\";\r\n\r\nimport styles from \"./style.module.scss\";\r\nimport Input from \"../Bet/components/Input\";\r\nimport { useKenoControl, actions, AutoBetMode } from \"../Reducer\";\r\nimport { getUsdValue } from \"../Reducer/actions\";\r\nimport { inputOnBlurHandler, inputOnChangeHandler } from \"../utils\";\r\n\r\nconst AutoBet: FC = () => {\r\n  const intl = useGetLocale();\r\n  const localization = (id: string) => intl.formatMessage({ id: `keno.${id}` });\r\n\r\n  const { selectedCoin, showInUSD, coinsPrices } = useCoins();\r\n  const { controlDispatch, controlState } = useKenoControl();\r\n  const { isAutoMode, autoModeValues, autoBetsIsStart } = controlState;\r\n\r\n  const enableUsdPrefix = showInUSD && selectedCoin?.coin !== \"GEM\";\r\n  return isAutoMode ? (\r\n    <div className={styles.root}>\r\n      <div className={styles.autoModeControl}>\r\n        <div>\r\n          <span className={styles.label}>{localization(\"input.onWin\")}</span>\r\n          <RadioGroup\r\n            labels={[\"Change Bet By (%)\", \"Reset To Base Bet\", \"Stop Betting\"]}\r\n            values={[\"change\", \"reset\", \"stop\"]}\r\n            value={autoModeValues.onWinMode}\r\n            disabled={autoBetsIsStart}\r\n            onChange={(event) => {\r\n              controlDispatch({\r\n                type: actions.SET_ON_WIN_MODE,\r\n                mode: event.target.value as AutoBetMode,\r\n              });\r\n            }}\r\n            name=\"keno_onwin_radiogroup\"\r\n            nestedComponents={{\r\n              1: (\r\n                <Input\r\n                  textAdornment={`${localization(\"input.increaseBy\")}:`}\r\n                  disabled={\r\n                    autoBetsIsStart || autoModeValues.onWinMode !== \"change\"\r\n                  }\r\n                  onChange={(event) =>\r\n                    inputOnChangeHandler(\r\n                      event,\r\n                      actions.SET_ON_WIN,\r\n                      controlDispatch,\r\n                    )\r\n                  }\r\n                  onBlur={(event) =>\r\n                    inputOnBlurHandler(\r\n                      event,\r\n                      actions.SET_ON_WIN,\r\n                      controlDispatch,\r\n                      true,\r\n                    )\r\n                  }\r\n                  value={autoModeValues.onWin}\r\n                  withRefreshIcon={!autoBetsIsStart}\r\n                  onRefreshActionHandler={() => {\r\n                    controlDispatch({\r\n                      type: actions.SET_ON_WIN,\r\n                      value: \"\",\r\n                    });\r\n                  }}\r\n                />\r\n              ),\r\n            }}\r\n          />\r\n        </div>\r\n        <div>\r\n          <span className={styles.label}>{localization(\"input.onLoss\")}</span>\r\n          <RadioGroup\r\n            labels={[\"Change Bet By (%)\", \"Reset To Base Bet\", \"Stop Betting\"]}\r\n            values={[\"change\", \"reset\", \"stop\"]}\r\n            value={autoModeValues.onLossMode}\r\n            disabled={autoBetsIsStart}\r\n            name=\"keno_onloss_radiogroup\"\r\n            onChange={(event) => {\r\n              controlDispatch({\r\n                type: actions.SET_ON_LOSS_MODE,\r\n                mode: event.target.value as AutoBetMode,\r\n              });\r\n            }}\r\n            nestedComponents={{\r\n              1: (\r\n                <Input\r\n                  textAdornment={`${localization(\"input.increaseBy\")}:`}\r\n                  disabled={\r\n                    autoBetsIsStart || autoModeValues.onLossMode !== \"change\"\r\n                  }\r\n                  onChange={(event) =>\r\n                    inputOnChangeHandler(\r\n                      event,\r\n                      actions.SET_ON_LOSS,\r\n                      controlDispatch,\r\n                    )\r\n                  }\r\n                  onBlur={(event) =>\r\n                    inputOnBlurHandler(\r\n                      event,\r\n                      actions.SET_ON_LOSS,\r\n                      controlDispatch,\r\n                      true,\r\n                    )\r\n                  }\r\n                  value={autoModeValues.onLoss}\r\n                  withRefreshIcon={!autoBetsIsStart}\r\n                  onRefreshActionHandler={() => {\r\n                    controlDispatch({\r\n                      type: actions.SET_ON_LOSS,\r\n                      value: \"\",\r\n                    });\r\n                  }}\r\n                />\r\n              ),\r\n            }}\r\n          />\r\n        </div>\r\n        <Input\r\n          topLabel={localization(\"input.stopOnProfit\")}\r\n          topValue={\r\n            !showInUSD\r\n              ? `$${getUsdValue(\r\n                  selectedCoin?.coin,\r\n                  coinsPrices,\r\n                  autoModeValues.stopOnProfit,\r\n                ).toFixed(2)}`\r\n              : \"\"\r\n          }\r\n          disabled={autoBetsIsStart}\r\n          onChange={(event) =>\r\n            inputOnChangeHandler(\r\n              event,\r\n              actions.SET_STOP_ON_PROFIT,\r\n              controlDispatch,\r\n            )\r\n          }\r\n          onBlur={(event) =>\r\n            inputOnBlurHandler(\r\n              event,\r\n              actions.SET_STOP_ON_PROFIT,\r\n              controlDispatch,\r\n            )\r\n          }\r\n          value={autoModeValues.stopOnProfit}\r\n          showUSD={enableUsdPrefix}\r\n          coin={selectedCoin?.coin}\r\n        />\r\n        <Input\r\n          topLabel={localization(\"input.stopOnLoss\")}\r\n          topValue={\r\n            !showInUSD\r\n              ? `$${getUsdValue(\r\n                  selectedCoin?.coin,\r\n                  coinsPrices,\r\n                  autoModeValues.stopOnLoss,\r\n                ).toFixed(2)}`\r\n              : \"\"\r\n          }\r\n          disabled={autoBetsIsStart}\r\n          value={autoModeValues.stopOnLoss}\r\n          onChange={(event) =>\r\n            inputOnChangeHandler(\r\n              event,\r\n              actions.SET_STOP_ON_LOSS,\r\n              controlDispatch,\r\n            )\r\n          }\r\n          onBlur={(event) =>\r\n            inputOnBlurHandler(event, actions.SET_STOP_ON_LOSS, controlDispatch)\r\n          }\r\n          showUSD={enableUsdPrefix}\r\n          coin={selectedCoin?.coin}\r\n        />\r\n      </div>\r\n    </div>\r\n  ) : null;\r\n};\r\n\r\nexport default AutoBet;\r\n","import React, { FC, useState } from \"react\";\r\n\r\nimport LazyComponentLoader from \"config/LazyComponentLoader\";\r\nimport OptionsButton from \"components/OptionsButton\";\r\nimport { HotKeysModal } from \"components/HotKeys\";\r\n\r\nimport { Statistics } from \"components\";\r\n\r\nimport styles from \"./style.module.scss\";\r\nimport Game, { RewardInfoWrapper } from \"./Game\";\r\nimport Controller from \"./Controller\";\r\nimport AutoBet from \"./Controller/components/AutoBet\";\r\nimport { KenoControlProvider } from \"./Controller/components/Reducer\";\r\nimport { SoundModals } from \"components/SoundModal\";\r\n\r\nconst BettingInformation = React.lazy(() =>\r\n  LazyComponentLoader(import(\"pages/ModalPages/pages/BettingInformation\")),\r\n);\r\n\r\nconst KenoPage: FC = () => {\r\n  const [isSoundOpen, setIsSoundOpen] = useState(false);\r\n  const [hotKeyIsOpen, setHotKeyIsOpen] = useState(false);\r\n  const [liveStatsIsOpen, setLiveStatsIsOpen] = useState(false);\r\n  const [bettingInformationIsOpen, setBettingInformationIsOpen] =\r\n    useState(false);\r\n\r\n  return (\r\n    <div className={styles.root}>\r\n      <KenoControlProvider>\r\n        <div className={styles.gameWrapper}>\r\n          <Game className={styles.field} />\r\n          <Controller\r\n            className={styles.bet}\r\n            liveStatsHandleClose={() => setLiveStatsIsOpen(false)}\r\n            liveStatsIsOpen={liveStatsIsOpen}\r\n          />\r\n          <RewardInfoWrapper className={styles.rewards} />\r\n        </div>\r\n        <AutoBet />\r\n      </KenoControlProvider>\r\n      <div className={styles.optionsWrapper}>\r\n        <OptionsButton\r\n          withSound\r\n          soundOnClick={() => setIsSoundOpen(!isSoundOpen)}\r\n          liveStatOnclick={() => setLiveStatsIsOpen(true)}\r\n          hotKeysOnClick={() => setHotKeyIsOpen(true)}\r\n          bettingInformationOnClick={() => setBettingInformationIsOpen(true)}\r\n        />\r\n      </div>\r\n      <div className={styles.statisticsWrapper}>\r\n        <SoundModals\r\n          isOpen={isSoundOpen}\r\n          onClose={() => setIsSoundOpen(false)}\r\n        />\r\n        <HotKeysModal\r\n          isOpen={hotKeyIsOpen}\r\n          onClose={() => setHotKeyIsOpen(false)}\r\n        />\r\n        <BettingInformation\r\n          isOpen={bettingInformationIsOpen}\r\n          game=\"keno\"\r\n          onClose={() => setBettingInformationIsOpen(false)}\r\n        />\r\n        <Statistics withFairness />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KenoPage;\r\n","import React, { FC } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport \"config/themes/_keno.scss\";\r\nimport SeedProvider from \"providers/Seed\";\r\n\r\nimport Page from \"./page\";\r\n\r\nexport const KenoWrapper: FC = () => {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Keno | Crypto Gambling Casino</title>\r\n        <meta name=\"title\" content=\"Play Bitcoin Keno - Pasino.com\" />\r\n        <meta\r\n          name=\"description\"\r\n          content=\"Keno is one of the most popular crypto gambling games. Can you guess the numbers? Play Keno with Bitcoin and many other cryptocurrencies on pasino.com  \"\r\n        />\r\n        <meta\r\n          name=\"keywords\"\r\n          content=\"Play Keno, Keno Betting, Keno Pasino, Keno Bitcoin \"\r\n        />\r\n        <meta name=\"robots\" content=\"index, follow\" />\r\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n        <meta name=\"language\" content=\"English\" />\r\n      </Helmet>\r\n      <SeedProvider gameName=\"keno\">\r\n        <Page />\r\n      </SeedProvider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default KenoWrapper;\r\n","import { useContext } from \"react\";\r\n\r\nimport Context from \"./context\";\r\n\r\nexport { default as KenoControlProvider } from \"./provider\";\r\nexport { actions } from \"./actions\";\r\nexport * from \"./types\";\r\nexport { riskTypes } from \"./reducer\";\r\n\r\nexport const useKenoControl = () => useContext(Context);\r\n","import React, { FC } from \"react\";\r\n\r\nimport { Button, ButtonProps } from \"components\";\r\n\r\nimport styles from \"./style.module.scss\";\r\n\r\nconst BetButton: FC<ButtonProps> = ({ children, ...props }) => {\r\n  return (\r\n    <Button className={styles.button} {...props}>\r\n      {children}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default BetButton;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"style_button__q7Lkg\"};","import React, { FC } from \"react\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { Switch as SwitchBase } from \"components\";\r\n\r\nimport styles from \"./style.module.scss\";\r\n\r\ninterface Props {\r\n  leftText: string;\r\n  rightText: string;\r\n  checked: boolean;\r\n  setChecked: (checked: boolean) => void;\r\n  className?: string;\r\n}\r\n\r\nconst Switch: FC<Props> = ({\r\n  leftText,\r\n  rightText,\r\n  checked,\r\n  setChecked,\r\n  className,\r\n}) => {\r\n  return (\r\n    <div className={clsx(styles.switchWrapper, className)}>\r\n      <span\r\n        className={clsx(\r\n          {\r\n            [styles.highlight]: !checked,\r\n          },\r\n          styles.option,\r\n        )}\r\n        onClick={() => setChecked(false)}>\r\n        {leftText}\r\n      </span>\r\n      <SwitchBase\r\n        onChange={(event) => {\r\n          setChecked(event.target.checked);\r\n        }}\r\n        checked={checked}\r\n        classes={{\r\n          track: styles.switchTrack,\r\n        }}\r\n      />\r\n      <span\r\n        className={clsx(\r\n          {\r\n            [styles.highlight]: checked,\r\n          },\r\n          styles.option,\r\n        )}\r\n        onClick={() => setChecked(true)}>\r\n        {rightText}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Switch;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrapperPadding\":\"10px\",\"desktopHeaderSize\":\"64px\",\"bottomButtonsSize\":\"60px\",\"desktopChatWidth\":\"310px\",\"swipedChatWidth\":\"960px\",\"arrBlockWidth\":\"12px\",\"headerHeight\":\"60px\",\"inputPadding\":\"16px\",\"chatPadding\":\"16px\",\"inputHeight\":\"56px\",\"chatWidth\":\"280px\",\"spacing\":\"8px\",\"mobileScreen\":\"600px\",\"feyorraDisableSize\":\"1080px\",\"switchWrapper\":\"style_switchWrapper__m_t9e\",\"option\":\"style_option__33osT\",\"highlight\":\"style_highlight__32VYB\",\"switchTrack\":\"style_switchTrack__29WCl\"};","import React, { FC } from \"react\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { useSassImport } from \"hooks\";\r\nimport { GetCoinImg } from \"../\";\r\n\r\ninterface Props {\r\n  isOpen: boolean;\r\n  ratio: string | number;\r\n  winAmount: string | number;\r\n  coin?: string;\r\n  className?: string;\r\n  isUsd?: boolean;\r\n}\r\n\r\nconst RewardModal: FC<Props> = ({\r\n  isOpen,\r\n  ratio,\r\n  winAmount,\r\n  coin,\r\n  className,\r\n  isUsd,\r\n}) => {\r\n  const styles = useSassImport(() => import(\"./style.module.scss\"));\r\n\r\n  return isOpen ? (\r\n    <div className={clsx(styles.root, className)}>\r\n      <div className={styles.wrapper}>\r\n        <h5 className={styles.ratio}>{`${ratio}x`}</h5>\r\n        <div className={styles.hr} />\r\n        <div className={styles.amount}>\r\n          <span>{`${isUsd ? \"$\" : \"\"}${winAmount}`}</span>\r\n          <GetCoinImg className={styles.coin} coin={coin} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  ) : null;\r\n};\r\n\r\nexport default RewardModal;\r\n","import { Dispatch, createContext } from \"react\";\r\n\r\nimport { initialKenoControlState } from \"./reducer\";\r\nimport { KenoControlActions, KenoControlState } from \"./types\";\r\n\r\ninterface KenoControlContext {\r\n  controlState: KenoControlState;\r\n  controlDispatch: Dispatch<KenoControlActions>;\r\n}\r\n\r\nexport const defaultValue: KenoControlContext = {\r\n  controlState: initialKenoControlState,\r\n  controlDispatch: () => {},\r\n};\r\n\r\nconst Context = createContext<KenoControlContext>(defaultValue);\r\n\r\nexport default Context;\r\n","import React, { FC, useReducer } from \"react\";\r\n\r\nimport Context from \"./context\";\r\nimport { initialKenoControlState, kenoControlReducer } from \"./reducer\";\r\n\r\nconst KenoControlProvider: FC = ({ children }) => {\r\n  const [controlState, controlDispatch] = useReducer(\r\n    kenoControlReducer,\r\n    initialKenoControlState,\r\n  );\r\n\r\n  return (\r\n    <Context.Provider\r\n      value={{\r\n        controlState,\r\n        controlDispatch,\r\n      }}>\r\n      {children}\r\n    </Context.Provider>\r\n  );\r\n};\r\n\r\nexport default KenoControlProvider;\r\n"],"sourceRoot":""}