{"version":3,"sources":["pages/DiceAPI/index.tsx"],"names":["ContactUs","intl","useGetLocale","isWhiteThemeActive","useWhiteTheme","useFetch","fetch","useLocalStorage","token","useState","name","email","body","data","setData","reResponse","setReResponse","reCaptchaRef","useRef","handleChange","value","key","send","event","a","preventDefault","variables","re_response","type","response","error","current","reset","notifyBarManager","timeOut","message","success","content","http-equiv","className","css","root","box","textBox","title","formatMessage","id","text","form","onSubmit","required","labelClassName","labelClass","rootClass","inputRoot","label","clsx","generalInput","input","onChange","target","labelText","textArea","captchaWrapper","sitekey","process","ref","button","buttonDark","disabled"],"mappings":"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","file":"static/js/169.736fa24b.chunk.js","sourcesContent":["import React, { FormEventHandler, useRef, useState } from \"react\";\r\nimport { useGetLocale } from \"providers\";\r\nimport ReCAPTCHA, { ReCAPTCHAProps } from \"react-google-recaptcha\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { Button, Input, notifyBarManager } from \"components\";\r\nimport { useFetch, useLocalStorage } from \"hooks\";\r\n\r\nimport { useWhiteTheme } from \"providers/WhiteTheme\";\r\nimport css from \"pages/ContactUs/style.module.scss\";\r\nimport \"config/themes/_dice.scss\";\r\n\r\nexport const ContactUs = () => {\r\n  const intl = useGetLocale();\r\n  const { isWhiteThemeActive } = useWhiteTheme();\r\n\r\n  const [fetch] = useFetch<any>(\"contact/post\");\r\n  const [token] = useLocalStorage(\"token\");\r\n\r\n  const [data, setData] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    body: \"\",\r\n  });\r\n\r\n  const [reResponse, setReResponse] = useState<string | null>(null);\r\n  const reCaptchaRef = useRef<ReCAPTCHA>(null);\r\n\r\n  const handleChange = (value: string, key: string) => {\r\n    setData({ ...data, [key]: value });\r\n  };\r\n\r\n  const onReCAPTCHAChange: ReCAPTCHAProps[\"onChange\"] = (value) => {\r\n    setReResponse(value);\r\n  };\r\n\r\n  const send: FormEventHandler<HTMLFormElement> = async (event) => {\r\n    event.preventDefault();\r\n    if (!token || !reResponse) {\r\n      return null;\r\n    }\r\n\r\n    const response = await fetch({\r\n      variables: {\r\n        re_response: reResponse,\r\n        type: \"3\",\r\n        ...data,\r\n      },\r\n    });\r\n    if (response) {\r\n      const { data, error } = response;\r\n      if (error) {\r\n        setReResponse(null);\r\n        if (reCaptchaRef.current) {\r\n          reCaptchaRef.current.reset();\r\n        }\r\n        notifyBarManager.error({\r\n          timeOut: 2000,\r\n          message: error,\r\n        });\r\n      } else if (data.message) {\r\n        notifyBarManager.success({\r\n          timeOut: 2000,\r\n          message: data.message,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Dice API | Crypto Gambling Casino</title>\r\n        <meta name=\"title\" content=\"Dice API  - Pasino.com\" />\r\n        <meta\r\n          name=\"description\"\r\n          content=\"Looking for starting your own casino or gambling application? Pasino offers one of the best APIâ€™s to start your own betting software.  \"\r\n        />\r\n        <meta\r\n          name=\"keywords\"\r\n          content=\"Pasino API, Pasino Bot, Gambling Application, Betting Software\"\r\n        />\r\n        <meta name=\"robots\" content=\"index, follow\" />\r\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n        <meta name=\"language\" content=\"English\" />\r\n      </Helmet>\r\n      <div className={css.root}>\r\n        <div className={css.box}>\r\n          <div className={css.textBox}>\r\n            <h1 className={css.title}>\r\n              {intl.formatMessage({ id: \"diceApi.title\" })}\r\n            </h1>\r\n\r\n            <p className={css.text}>\r\n              {intl.formatMessage({ id: \"diceApi.text.p1\" })}\r\n            </p>\r\n            <p className={css.text}>\r\n              {intl.formatMessage({ id: \"diceApi.text.p2\" })}\r\n            </p>\r\n            <p className={css.text}>\r\n              {intl.formatMessage({ id: \"diceApi.text.p3\" })}\r\n            </p>\r\n          </div>\r\n\r\n          <form className={css.form} onSubmit={send}>\r\n            <Input\r\n              required\r\n              labelClassName={css.labelClass}\r\n              rootClass={css.inputRoot}\r\n              label={intl.formatMessage({ id: \"contactUs.form.name.title\" })}\r\n              className={clsx(css.generalInput, css.input)}\r\n              value={data.name}\r\n              onChange={(event) => handleChange(event.target.value, \"name\")}\r\n            />\r\n            <Input\r\n              required\r\n              labelClassName={css.labelClass}\r\n              rootClass={css.inputRoot}\r\n              label={intl.formatMessage({ id: \"contactUs.form.mail.title\" })}\r\n              className={clsx(css.generalInput, css.input)}\r\n              value={data.email}\r\n              onChange={(event) => handleChange(event.target.value, \"email\")}\r\n            />\r\n            <div className={css.label}>\r\n              <span className={css.labelText}>\r\n                {intl.formatMessage({ id: \"diceApi.message.title\" })}\r\n              </span>\r\n\r\n              <textarea\r\n                required\r\n                className={clsx(css.generalInput, css.textArea)}\r\n                value={data.body}\r\n                onChange={(event) => handleChange(event.target.value, \"body\")}\r\n              />\r\n            </div>\r\n\r\n            <div className={css.captchaWrapper}>\r\n              <ReCAPTCHA\r\n                sitekey={process.env.REACT_APP_RECAPTCHA_SITE_KEY as string}\r\n                onChange={onReCAPTCHAChange}\r\n                ref={reCaptchaRef}\r\n              />\r\n            </div>\r\n\r\n            <Button\r\n              className={clsx(css.button, {\r\n                [css.buttonDark]: !isWhiteThemeActive,\r\n              })}\r\n              type=\"submit\"\r\n              disabled={!reResponse || !token}>\r\n              {intl.formatMessage({ id: \"diceApi.buttonText\" })}\r\n            </Button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactUs;\r\n"],"sourceRoot":""}