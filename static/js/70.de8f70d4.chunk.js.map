{"version":3,"sources":["components/Statistics/Tabs/History/Content.tsx","pages/Fortune/config/index.ts","pages/Fortune/components/ControlPanel/reducer/actions/types.ts","pages/Crash/crashSocketWatcher.ts","pages/Fortune/components/ControlPanel/reducer/fortuneSocketWatcher.tsx","pages/Fortune/components/ControlPanel/reducer/methods/utils/getFortuneResultValues.ts","components/Statistics/Tabs/History/HistoryModal/index.tsx","components/Statistics/Tabs/History/config.ts","components/Statistics/Tabs/History/utils/crashMethods.ts","components/Statistics/Tabs/History/utils/fortuneMethods.ts","components/Statistics/Tabs/History/style.module.scss"],"names":["scrollStyle","height","width","History","intl","useGetLocale","useState","data","setData","newData","setNewData","openedStoryId","setOpenedStoryId","location","useLocation","useEffect","length","prevRounds","slice","getTableHeaderName","getIntlValue","historyContentConfig","pathname","socket","prevRoundsListener","socketsList","statisticsHistoryListenerIndexName","permittedSocketGamePaths","includes","send","type","handleHistoryModalClose","useCallback","className","css","wrapper","id","onClose","tableWrapper","style","head","values","body","rows","map","crash_point","seed","tableCellWrapper","tableCircle","Number","tableLoserGame","tableWinnerGame","key","callBack","FortuneGameData","selection","dataItemColors","selectionItems","color","fortuneActionNames","autoModeActionFieldMatching","SET_ON_WIN","SET_ON_LOSS","SET_STOP_ON_LOSS","SET_STOP_ON_PROFIT","crashSocketsList","gameCircleListener","gameUsersListener","statisticsHistoryListener","crashMainHistoryListener","profitTableListener","managerListener","historyListener","ping","intervals","createTimeouts","clearTimeouts","pushTimeout","gameCircleValue","setGameCircleValue","value","pingText","document","getElementById","lostConnectionTime","showPing","nowPing","Date","now","pingValue","Math","max","innerText","display","crashSocketWatcher","getOfflinePing","delay","method","action","forEach","i","clearInterval","interval","setInterval","push","round","server_seed","time","balance","error","bet","profit","user_id","user_name","cashed_out_at","coin","amount","bet_amt","actualGameTime","startedTime","betsList","bets","at","rounds","params","coinPrice","fortuneSocketsList","timerListener","soundListener","fortuneSocketWatcher","dispatch","new_round","start_game","payload","spinning","segment_id","stopped","stopped_at","bet_played","new_bet_finalized","datetime","bet_local_id","payout","win","bet_cashedout","bet_cashedout_update","previous_rounds","update_coins_parameters","coins","getFortuneResultValues","result","selectionNumber","replace","HistoryModal","React","lazy","LazyComponentLoader","Content","fallback","StatisticsHistoryListenerIndexNames","crashSocket","fortuneSocket","wheel_point","chainFetchPaths","path","windowPath","getRoundData","crash","String","round_id","players","player","cashout_point","module","exports"],"mappings":"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","file":"static/js/70.de8f70d4.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\r\n\r\nimport { useGetLocale } from \"providers\";\r\n\r\nimport { Table } from \"components\";\r\nimport { getIntlValue } from \"providers\";\r\nimport { crashSocket } from \"utils\";\r\n\r\nimport { CrashStoryListener } from \"games/Crash/game/engine/entities/SocketListener/listenerTypes\";\r\nimport { crashSocketsList } from \"pages/Crash/crashSocketWatcher\";\r\n\r\nimport HistoryModal from \"./HistoryModal\";\r\n\r\nimport css from \"./style.module.scss\";\r\nimport { historyContentConfig, permittedSocketGamePaths } from \"./config\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nimport { Scrollbar } from \"components/Scrollbar\";\r\n\r\nconst negativePayout = 1.9;\r\n\r\nexport interface HistoryElement {\r\n  id: string;\r\n  seed: string;\r\n  crash_point: string;\r\n}\r\n\r\nconst scrollStyle = { height: 650, width: \"100%\" };\r\n\r\nconst History = () => {\r\n  const intl = useGetLocale();\r\n  const [data, setData] = useState<HistoryElement[] | undefined>();\r\n  const [newData, setNewData] = useState<HistoryElement | undefined>();\r\n  const [openedStoryId, setOpenedStoryId] = useState<string | null>(null);\r\n  const location = useLocation();\r\n  useEffect(() => {\r\n    if (newData && data && data.length) {\r\n      const prevRounds = data.slice(0, data.length - 1);\r\n      setData([newData, ...prevRounds]);\r\n    }\r\n  }, [newData]);\r\n\r\n  const getTableHeaderName = getIntlValue(\r\n    intl,\r\n    \"gameTemplate.statistics.historyTable.\",\r\n  );\r\n\r\n  useEffect(() => {\r\n    let {\r\n      socket,\r\n      prevRoundsListener,\r\n      socketsList,\r\n      statisticsHistoryListenerIndexName,\r\n    } = historyContentConfig[location.pathname];\r\n    if (permittedSocketGamePaths.includes(location.pathname)) {\r\n      socketsList[statisticsHistoryListenerIndexName] = prevRoundsListener(\r\n        setData,\r\n        setNewData,\r\n      );\r\n\r\n      socket.send({\r\n        type: \"get_previous_rounds\",\r\n      });\r\n    }\r\n    return () => {\r\n      socketsList[statisticsHistoryListenerIndexName] = () => null;\r\n    };\r\n  }, []);\r\n\r\n  const handleHistoryModalClose = useCallback(() => {\r\n    setOpenedStoryId(null);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={css.wrapper}>\r\n      <HistoryModal id={openedStoryId} onClose={handleHistoryModalClose} />\r\n      <div className={css.tableWrapper}>\r\n        <Scrollbar style={scrollStyle}>\r\n          <Table\r\n            head={{\r\n              values: [\r\n                getTableHeaderName(\"id\"),\r\n                getTableHeaderName(\"payout\"),\r\n                getTableHeaderName(\"hash\"),\r\n              ],\r\n            }}\r\n            body={{\r\n              rows: data?.map(({ crash_point, id, seed }) => {\r\n                return {\r\n                  values: [\r\n                    <div className={css.tableCellWrapper}>\r\n                      <div\r\n                        className={`${css.tableCircle} ${\r\n                          Number(crash_point) < negativePayout\r\n                            ? css.tableLoserGame\r\n                            : css.tableWinnerGame\r\n                        }`}\r\n                      />\r\n                      {id}\r\n                    </div>,\r\n\r\n                    crash_point + \"x\",\r\n                    seed,\r\n                  ],\r\n                  key: seed + id,\r\n                  callBack: () => setOpenedStoryId(id),\r\n                };\r\n              }),\r\n            }}\r\n          />\r\n        </Scrollbar>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default History;\r\n","export type fortuneSelectionType =\r\n  | \"1X\"\r\n  | \"3X\"\r\n  | \"6X\"\r\n  | \"12X\"\r\n  | \"25X\"\r\n  | \"52XB\"\r\n  | \"52XA\";\r\nexport interface IFortuneGameData {\r\n  id: number;\r\n  selection: fortuneSelectionType;\r\n}\r\nexport const FortuneGameData: IFortuneGameData[] = [\r\n  { id: 1, selection: \"1X\" },\r\n  { id: 2, selection: \"6X\" },\r\n  { id: 3, selection: \"1X\" },\r\n  { id: 4, selection: \"12X\" },\r\n  { id: 5, selection: \"1X\" },\r\n  { id: 6, selection: \"3X\" },\r\n  { id: 7, selection: \"1X\" },\r\n  { id: 8, selection: \"6X\" },\r\n  { id: 9, selection: \"1X\" },\r\n  { id: 10, selection: \"3X\" },\r\n  { id: 11, selection: \"1X\" },\r\n  { id: 12, selection: \"52XA\" },\r\n  { id: 13, selection: \"1X\" },\r\n  { id: 14, selection: \"3X\" },\r\n  { id: 15, selection: \"1X\" },\r\n  { id: 16, selection: \"6X\" },\r\n  { id: 17, selection: \"3X\" },\r\n  { id: 18, selection: \"1X\" },\r\n  { id: 19, selection: \"12X\" },\r\n  { id: 20, selection: \"1X\" },\r\n  { id: 21, selection: \"6X\" },\r\n  { id: 22, selection: \"1X\" },\r\n  { id: 23, selection: \"3X\" },\r\n  { id: 24, selection: \"1X\" },\r\n  { id: 25, selection: \"25X\" },\r\n  { id: 26, selection: \"1X\" },\r\n  { id: 27, selection: \"3X\" },\r\n  { id: 28, selection: \"1X\" },\r\n  { id: 29, selection: \"6X\" },\r\n  { id: 30, selection: \"1X\" },\r\n  { id: 31, selection: \"3X\" },\r\n  { id: 32, selection: \"1X\" },\r\n  { id: 33, selection: \"12X\" },\r\n  { id: 34, selection: \"1X\" },\r\n  { id: 35, selection: \"6X\" },\r\n  { id: 36, selection: \"1X\" },\r\n  { id: 37, selection: \"3X\" },\r\n  { id: 38, selection: \"1X\" },\r\n  { id: 39, selection: \"52XB\" },\r\n  { id: 40, selection: \"3X\" },\r\n  { id: 41, selection: \"1X\" },\r\n  { id: 42, selection: \"3X\" },\r\n  { id: 43, selection: \"1X\" },\r\n  { id: 44, selection: \"3X\" },\r\n  { id: 45, selection: \"1X\" },\r\n  { id: 46, selection: \"12X\" },\r\n  { id: 47, selection: \"1X\" },\r\n  { id: 48, selection: \"6X\" },\r\n  { id: 49, selection: \"1X\" },\r\n  { id: 50, selection: \"3X\" },\r\n  { id: 51, selection: \"1X\" },\r\n  { id: 52, selection: \"25X\" },\r\n  { id: 53, selection: \"1X\" },\r\n  { id: 54, selection: \"3X\" },\r\n];\r\n\r\nexport const dataItemColors: { [k: string]: string } = {\r\n  \"1X\": \"#FFD701\",\r\n  \"3X\": \"#01FFFF\",\r\n  \"6X\": \"#0A60E2\",\r\n  \"12X\": \"#9E00FF\",\r\n  \"25X\": \"#FF65C5\",\r\n  \"52XB\": \"#4AE700\",\r\n  \"52XA\": \"#FF1715\",\r\n};\r\n\r\nexport const selectionItems: {\r\n  selection: fortuneSelectionType;\r\n  color: string;\r\n}[] = [\r\n  {\r\n    selection: \"1X\",\r\n    color: \"linear-gradient(225.58deg, #FFD701 14.96%, #FF9900 48.48%)\",\r\n  },\r\n  {\r\n    selection: \"3X\",\r\n    color: \"linear-gradient(212.14deg, #01FFFF 12.31%, #00B0FB 42.6%)\",\r\n  },\r\n  {\r\n    selection: \"6X\",\r\n    color: \"linear-gradient(220.92deg, #0A60E2 14.06%, #0148B4 43.07%)\",\r\n  },\r\n  {\r\n    selection: \"12X\",\r\n    color: \" linear-gradient(236.48deg, #9E00FF 14.14%, #8D03A4 43.05%)\",\r\n  },\r\n  {\r\n    selection: \"25X\",\r\n    color: \"linear-gradient(182.04deg, #FF65C5 1.57%, #C60278 49.54%)\",\r\n  },\r\n  {\r\n    selection: \"52XA\",\r\n    color: \"linear-gradient(199.02deg, #FF1715 10.51%, #D00400 50%)\",\r\n  },\r\n  {\r\n    selection: \"52XB\",\r\n    color: \"linear-gradient(133.53deg, #4AE700 25.72%, #01580A 134.79%)\",\r\n  },\r\n];\r\n","import { fortuneSelectionType } from \"./../../../../config/index\";\r\nimport { AutoBetMode, ICoinsConfig, PlayerPlayableStatus } from \"../reducer\";\r\n\r\nexport enum fortuneActionNames {\r\n  SET_RESULT = \"setResult\",\r\n  SET_IS_SPINNING = \"setIsSpinning\",\r\n  SET_BET_FIELD = \"setBetField\",\r\n  SET_AMOUNT_IN_USD = \"setAmountInUSD\",\r\n  SET_PLAYABLE_STATUS = \"setPlayableStatus\",\r\n  SET_IS_SHOW_IN_USD = \"setIsShowInUSD\",\r\n\r\n  SET_IS_AUTO_MODE = \"setIsAutoMode\",\r\n  SET_STOP_ON_LOSS = \"setStopOnLoss\",\r\n  SET_STOP_ON_PROFIT = \"setStopOnProfit\",\r\n  SET_ON_WIN = \"setOnWin\",\r\n  SET_ON_LOSS = \"setOnLoss\",\r\n  SET_ON_WIN_MODE = \"setOnWinMode\",\r\n  SET_ON_LOSS_MODE = \"setOnLossMode\",\r\n\r\n  ADD_BET = \"addBet\",\r\n  REMOVE_BET = \"removeBet\",\r\n  SET_PLACE_A_BET = \"setPlaceABet\",\r\n  SET_CANCEL_BET = \"setCancelBet\",\r\n  SET_CANCEL_AUTOBET = \"setCancelAutobet\",\r\n\r\n  start_game = \"start_game\",\r\n  spinning = \"spinning\",\r\n  stopped = \"stopped\",\r\n  new_round = \"new_round\",\r\n\r\n  previous_rounds = \"previous_rounds\",\r\n  update_coins_parameters = \"update_coins_parameters\",\r\n\r\n  new_bet = \"new_bet\",\r\n  bet_played = \"bet_played\",\r\n  new_bet_finalized = \"new_bet_finalized\",\r\n  bet_cashedout = \"bet_cashedout\",\r\n  bet_cashedout_update = \"bet_cashedout_update\",\r\n}\r\n\r\nexport const autoModeActionFieldMatching = {\r\n  [fortuneActionNames.SET_ON_WIN]: \"onWin\",\r\n  [fortuneActionNames.SET_ON_LOSS]: \"onLoss\",\r\n  [fortuneActionNames.SET_STOP_ON_LOSS]: \"stopOnLoss\",\r\n  [fortuneActionNames.SET_STOP_ON_PROFIT]: \"stopOnProfit\",\r\n};\r\n\r\ninterface setResultAction {\r\n  type: fortuneActionNames.SET_RESULT;\r\n  payload: {\r\n    result: number | null;\r\n  };\r\n}\r\ninterface setPlayableStatusAction {\r\n  type: fortuneActionNames.SET_PLAYABLE_STATUS;\r\n  payload: {\r\n    playableStatus: PlayerPlayableStatus;\r\n  };\r\n}\r\n\r\ninterface setIsSpinning {\r\n  type: fortuneActionNames.SET_IS_SPINNING;\r\n  payload: {\r\n    isSpinning: boolean;\r\n  };\r\n}\r\ninterface setIsShowInUSD {\r\n  type: fortuneActionNames.SET_IS_SHOW_IN_USD;\r\n  payload: {\r\n    isShowInUSD: boolean;\r\n  };\r\n}\r\ninterface setAmountInUSD {\r\n  type: fortuneActionNames.SET_AMOUNT_IN_USD;\r\n  payload: {\r\n    value: string;\r\n  };\r\n}\r\n\r\ninterface setBetFieldAction {\r\n  type: fortuneActionNames.SET_BET_FIELD;\r\n  payload: {\r\n    betAmount?: string;\r\n    coinName?: string;\r\n    selection?: fortuneSelectionType | string;\r\n    id: string;\r\n  };\r\n}\r\n\r\ninterface setPlaceABetAction {\r\n  type: fortuneActionNames.SET_PLACE_A_BET;\r\n}\r\n\r\ninterface setCancelBetAction {\r\n  type: fortuneActionNames.SET_CANCEL_BET;\r\n}\r\n\r\ninterface setCancelAutobetAction {\r\n  type: fortuneActionNames.SET_CANCEL_AUTOBET;\r\n}\r\n\r\ninterface setIsAutoModeAction {\r\n  type: fortuneActionNames.SET_IS_AUTO_MODE;\r\n  payload: {\r\n    isAutoMode: boolean;\r\n  };\r\n}\r\n\r\ninterface addBetAction {\r\n  type: fortuneActionNames.ADD_BET;\r\n  payload: {\r\n    coinName: string;\r\n    betAmount: string;\r\n  };\r\n}\r\ninterface removeBetAction {\r\n  type: fortuneActionNames.REMOVE_BET;\r\n  payload: {\r\n    id: string;\r\n  };\r\n}\r\ninterface setAutoModeFieldAction {\r\n  type:\r\n    | fortuneActionNames.SET_STOP_ON_PROFIT\r\n    | fortuneActionNames.SET_STOP_ON_LOSS\r\n    | fortuneActionNames.SET_ON_WIN\r\n    | fortuneActionNames.SET_ON_LOSS;\r\n  payload: {\r\n    value: string | boolean;\r\n  };\r\n}\r\n\r\ninterface setOnWinModeAction {\r\n  type: fortuneActionNames.SET_ON_WIN_MODE;\r\n  payload: {\r\n    mode: AutoBetMode;\r\n  };\r\n}\r\ninterface setOnLossModeAction {\r\n  type: fortuneActionNames.SET_ON_LOSS_MODE;\r\n  payload: {\r\n    mode: AutoBetMode;\r\n  };\r\n}\r\n\r\ninterface setSpinningAction {\r\n  type: fortuneActionNames.spinning;\r\n  payload: {\r\n    time: string;\r\n    segment_id: string;\r\n  };\r\n}\r\ninterface setStartGameAction {\r\n  type: fortuneActionNames.start_game;\r\n}\r\ninterface setNewRoundAction {\r\n  type: fortuneActionNames.new_round;\r\n  payload: {\r\n    value: string;\r\n  };\r\n}\r\ninterface setStoppedAction {\r\n  type: fortuneActionNames.stopped;\r\n  payload: {\r\n    id: string;\r\n    stopped_at: string;\r\n  };\r\n}\r\ninterface setPreviousRoundsAction {\r\n  type: fortuneActionNames.previous_rounds;\r\n  payload: {\r\n    rounds: { id: string; wheel_point: string; seed: string }[];\r\n  };\r\n}\r\ninterface setUpdateCoinsParametersAction {\r\n  type: fortuneActionNames.update_coins_parameters;\r\n  payload: ICoinsConfig;\r\n}\r\ninterface setNewBet {\r\n  type: fortuneActionNames.new_bet;\r\n  payload: {\r\n    user_id: number;\r\n    user_name: string;\r\n    bet_amt: string;\r\n    coin: string;\r\n    selection: string;\r\n  };\r\n}\r\ninterface setBetPlayed {\r\n  type: fortuneActionNames.bet_played;\r\n  payload: {\r\n    error: string;\r\n    balance: string;\r\n  };\r\n}\r\ninterface setBetFinalized {\r\n  type: fortuneActionNames.new_bet_finalized;\r\n  payload: {\r\n    datetime: string;\r\n    bet_local_id: string;\r\n    coin: string;\r\n    bet_amt: string;\r\n    payout: string | number;\r\n    win: number;\r\n    profit: string;\r\n  };\r\n}\r\ninterface setBetCashedout {\r\n  type: fortuneActionNames.bet_cashedout;\r\n  payload: {\r\n    error: string;\r\n    balance: string;\r\n    bet_local_id: string;\r\n  };\r\n}\r\ninterface setBetCashedoutUpdate {\r\n  type: fortuneActionNames.bet_cashedout_update;\r\n  payload: {\r\n    user_id: string | number;\r\n    payout: string | number;\r\n    profit: string;\r\n    coin: string;\r\n    bet_local_id: string;\r\n  };\r\n}\r\n\r\nexport type FortuneActionsType =\r\n  | setAmountInUSD\r\n  | setPlaceABetAction\r\n  | setPlayableStatusAction\r\n  | setCancelBetAction\r\n  | setCancelAutobetAction\r\n  | setBetFieldAction\r\n  | setIsSpinning\r\n  | setIsShowInUSD\r\n  | setIsAutoModeAction\r\n  | setResultAction\r\n  | addBetAction\r\n  | removeBetAction\r\n  | setAutoModeFieldAction\r\n  | setOnWinModeAction\r\n  | setOnLossModeAction\r\n  | setSpinningAction\r\n  | setStartGameAction\r\n  | setNewRoundAction\r\n  | setStoppedAction\r\n  | setPreviousRoundsAction\r\n  | setUpdateCoinsParametersAction\r\n  | setNewBet\r\n  | setBetPlayed\r\n  | setBetFinalized\r\n  | setBetCashedout\r\n  | setBetCashedoutUpdate;\r\n","import { CrashStoryListener } from \"games/Crash/game/engine/entities/SocketListener/listenerTypes\";\r\nimport { createTimeouts } from \"utils\";\r\nimport { CrashGameCircleValue } from \"./controller/types\";\r\nimport {\r\n  CrashCoinParams,\r\n  GameCircleListenerTypes,\r\n  GameUsersListenerTypes,\r\n  HistoryListener,\r\n  ManagerListenerProps,\r\n  ProfitTableListenerType,\r\n} from \"./crashTypes\";\r\n\r\ninterface CrashSocketsListTypes {\r\n  gameCircleListener: (data: GameCircleListenerTypes) => void;\r\n  gameUsersListener: (data: GameUsersListenerTypes) => void;\r\n  profitTableListener: (data: ProfitTableListenerType) => void;\r\n\r\n  managerListener: (data: ManagerListenerProps) => void;\r\n  historyListener: (data: HistoryListener) => void;\r\n  statisticsHistoryListener: (data: CrashStoryListener) => void;\r\n  crashMainHistoryListener: (data: CrashStoryListener) => void;\r\n\r\n  ping: number;\r\n}\r\n\r\nexport const crashSocketsList: CrashSocketsListTypes = {\r\n  gameCircleListener: () => null,\r\n  gameUsersListener: () => null,\r\n  statisticsHistoryListener: () => null,\r\n  crashMainHistoryListener: () => null,\r\n\r\n  profitTableListener: () => null,\r\n  managerListener: () => null,\r\n  historyListener: () => null,\r\n\r\n  ping: 0,\r\n};\r\n\r\nconst intervals: NodeJS.Timeout[] = [];\r\nconst clearIntervals = () => {\r\n  intervals.forEach((i) => clearInterval(i));\r\n  intervals.length = 0;\r\n};\r\n\r\nconst { clearTimeouts, pushTimeout } = createTimeouts();\r\n\r\nlet gameCircleValue: CrashGameCircleValue | null = null;\r\nexport const setGameCircleValue = (\r\n  value: CrashGameCircleValue | null,\r\n  callBack?: () => void,\r\n) => {\r\n  if (gameCircleValue !== value) {\r\n    gameCircleValue = value;\r\n\r\n    callBack && callBack();\r\n  }\r\n};\r\n\r\nlet pingText = document.getElementById(\r\n  \"crashPing\",\r\n) as HTMLParagraphElement | null;\r\n\r\nconst lostConnectionTime = 2000;\r\n\r\nconst showPing = () => {\r\n  const nowPing = Date.now();\r\n  const pingValue = Math.max(nowPing - crashSocketsList.ping - 100, 0);\r\n\r\n  if (pingText) {\r\n    pingText.innerText = `Ping: ${pingValue}`;\r\n\r\n    if (pingValue <= 200) {\r\n      pingText.style.display = \"none\";\r\n    } else {\r\n      pingText.style.display = \"inline\";\r\n    }\r\n\r\n    if (pingValue > 500) {\r\n      pingText.style.color = \"darkred\";\r\n    } else {\r\n      pingText.style.color = \"\";\r\n    }\r\n\r\n    if (pingValue >= lostConnectionTime) {\r\n      pingText.innerText = `Connection lost`;\r\n    }\r\n  } else {\r\n    pingText = document.getElementById(\r\n      \"crashPing\",\r\n    ) as HTMLParagraphElement | null;\r\n  }\r\n\r\n  return pingValue;\r\n};\r\n\r\nexport const crashSocketWatcher = (data: any) => {\r\n  clearTimeouts();\r\n\r\n  const getOfflinePing = (delay = 600) => {\r\n    pushTimeout(() => {\r\n      const ping = showPing();\r\n\r\n      if (ping < lostConnectionTime) {\r\n        getOfflinePing();\r\n      } else {\r\n        crashSocketsList.managerListener({\r\n          method: \"offline\",\r\n        });\r\n      }\r\n    }, delay);\r\n  };\r\n\r\n  if (data.method === \"crashed\") {\r\n    clearTimeouts();\r\n    getOfflinePing(5000);\r\n  } else if (data.action === \"crash_update\") {\r\n    clearIntervals();\r\n    getOfflinePing();\r\n\r\n    if (\r\n      data.method !== \"new_round\" ||\r\n      (data.method === \"new_round\" && Number(data.value) < 5.8)\r\n    ) {\r\n      showPing();\r\n    }\r\n  }\r\n\r\n  crashSocketsList.ping = Date.now();\r\n  crashSocketsList.managerListener({\r\n    method: \"online\",\r\n  });\r\n\r\n  switch (data.action) {\r\n    case \"crash_update\":\r\n      switch (data.method) {\r\n        case \"crashed\":\r\n          setGameCircleValue(data.method, () => {\r\n            crashSocketsList.managerListener({\r\n              method: data.method,\r\n            });\r\n          });\r\n          crashSocketsList.gameCircleListener({\r\n            method: \"crashed\",\r\n            value: data.value,\r\n          });\r\n\r\n          const interval = setInterval(() => {\r\n            crashSocketsList.gameCircleListener({\r\n              method: \"crashed\",\r\n              value: data.value,\r\n            });\r\n          }, 200);\r\n          intervals.push(interval);\r\n\r\n          crashSocketsList.profitTableListener({\r\n            method: \"crashed\",\r\n          });\r\n          crashSocketsList.historyListener({\r\n            method: \"crashed\",\r\n            round: {\r\n              crash_point: data.value,\r\n              seed: data.server_seed,\r\n              id: data.id,\r\n            },\r\n          });\r\n          const round: CrashStoryListener = {\r\n            method: \"crashed\",\r\n            round: {\r\n              id: data.id,\r\n              crash_point: data.value,\r\n              seed: data.server_seed,\r\n            },\r\n          };\r\n          crashSocketsList.statisticsHistoryListener(round);\r\n          crashSocketsList.crashMainHistoryListener(round);\r\n\r\n          break;\r\n        case \"new_round\":\r\n          setGameCircleValue(data.method, () => {\r\n            crashSocketsList.managerListener({\r\n              method: data.method,\r\n            });\r\n          });\r\n          crashSocketsList.gameCircleListener({\r\n            method: \"new_round\",\r\n            time: Date.now() - Number(data.value) * 1000,\r\n            value: data.value,\r\n          });\r\n\r\n          break;\r\n\r\n        case \"bet_cashedout\":\r\n        case \"bet_played\":\r\n          crashSocketsList.managerListener({\r\n            method: data.method,\r\n            balance: data.balance,\r\n            error: data.error,\r\n          });\r\n          break;\r\n\r\n        case \"new_bet\":\r\n          crashSocketsList.gameUsersListener({\r\n            method: \"new_bet\",\r\n            bet: {\r\n              profit: \"\",\r\n              user_id: data.user_id,\r\n              user_name: data.user_name,\r\n              cashed_out_at: data.cashed_out_at,\r\n            },\r\n          });\r\n\r\n          crashSocketsList.profitTableListener({\r\n            method: \"new_bet\",\r\n            ...data,\r\n          });\r\n          break;\r\n\r\n        case \"new_bet_finalized\":\r\n          crashSocketsList.managerListener({\r\n            method: \"new_bet_finalized\",\r\n            coin: data.coin,\r\n            profit: data.profit,\r\n            amount: data.bet_amt,\r\n          });\r\n          break;\r\n\r\n        case \"start_game\":\r\n          crashSocketsList.gameCircleListener({ method: \"start_game\" });\r\n\r\n          break;\r\n\r\n        case \"update_value\":\r\n          setGameCircleValue(data.method, () => {\r\n            crashSocketsList.managerListener({\r\n              method: data.method,\r\n            });\r\n          });\r\n          crashSocketsList.gameCircleListener({\r\n            method: \"update_value\",\r\n            value: data.value,\r\n            actualGameTime: data.time,\r\n            startedTime: Date.now() - Number(data.time),\r\n          });\r\n\r\n          break;\r\n\r\n        case \"current_bets\":\r\n          const betsList: any = {\r\n            method: \"current_bets\",\r\n            bets: data.bets,\r\n          };\r\n\r\n          crashSocketsList.gameUsersListener(betsList);\r\n          crashSocketsList.profitTableListener(betsList);\r\n          crashSocketsList.managerListener(betsList);\r\n          break;\r\n\r\n        case \"bet_cashedout_update\":\r\n          crashSocketsList.gameUsersListener({\r\n            method: \"bet_cashedout_update\",\r\n            user_id: data.user_id,\r\n            profit: data.profit,\r\n            at: data.at,\r\n          });\r\n\r\n          crashSocketsList.profitTableListener({\r\n            method: \"bet_cashedout_update\",\r\n            ...data,\r\n          });\r\n\r\n          crashSocketsList.managerListener({\r\n            method: \"bet_cashedout_update\",\r\n            user_id: data.user_id,\r\n          });\r\n\r\n          break;\r\n\r\n        case \"previous_rounds\":\r\n          crashSocketsList.historyListener({\r\n            method: \"previous_rounds\",\r\n            rounds: data.rounds,\r\n          });\r\n          const rounds: CrashStoryListener = {\r\n            method: \"previous_rounds\",\r\n            rounds: data.rounds,\r\n          };\r\n          crashSocketsList.statisticsHistoryListener(rounds);\r\n          crashSocketsList.crashMainHistoryListener(rounds);\r\n\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n      break;\r\n\r\n    case \"update_balance\":\r\n      break;\r\n\r\n    case \"update_coin_parameters\":\r\n      const params: CrashCoinParams = {\r\n        ...data,\r\n      };\r\n      crashSocketsList.managerListener({\r\n        method: \"update_coin_parameters\",\r\n        coinPrice: params,\r\n      });\r\n      break;\r\n\r\n    default:\r\n      break;\r\n  }\r\n\r\n  if (data.error) {\r\n  }\r\n};\r\n","import {\r\n  FortuneStoryListener,\r\n  FortuneTimerListener,\r\n  ProfitTableListenerType,\r\n  FortuneSoundListener,\r\n} from \"pages/Fortune/fortuneTypes\";\r\nimport { Dispatch } from \"react\";\r\nimport { fortuneActionNames, FortuneActionsType } from \"./actions/types\";\r\n\r\ninterface FortuneSocketsListTypes {\r\n  profitTableListener: (data: ProfitTableListenerType) => void;\r\n  statisticsHistoryListener: (data: FortuneStoryListener) => void;\r\n\r\n  timerListener: (data: FortuneTimerListener) => void;\r\n  soundListener: (data: FortuneSoundListener) => void;\r\n}\r\n\r\nexport const fortuneSocketsList: FortuneSocketsListTypes = {\r\n  profitTableListener: () => null,\r\n  statisticsHistoryListener: () => null,\r\n  timerListener: () => null,\r\n  soundListener: () => null,\r\n};\r\nexport type socketMethods =\r\n  | \"bet_played\"\r\n  | \"new_bet_finalized\"\r\n  | \"bet_cashedout\"\r\n  | \"bet_cashedout_update\"\r\n  | \"spinning\"\r\n  | \"start_game\"\r\n  | \"new_round\"\r\n  | \"stopped\"\r\n  | \"previous_rounds\"\r\n  | \"get_coins_parameters\";\r\nexport type socketActions = \"wheel_update\" | \"update_coins_parameters\";\r\n\r\nexport const fortuneSocketWatcher = (\r\n  dispatch: Dispatch<FortuneActionsType>,\r\n) => {\r\n  return (data: any) => {\r\n    const {\r\n      method,\r\n      type,\r\n      action,\r\n    }: {\r\n      method?: socketMethods;\r\n      type?: any;\r\n      action: socketActions;\r\n    } = data;\r\n    fortuneSocketsList.profitTableListener(data);\r\n    fortuneSocketsList.statisticsHistoryListener(data);\r\n    fortuneSocketsList.timerListener(data);\r\n    fortuneSocketsList.soundListener(data);\r\n    if (action === \"wheel_update\" && method) {\r\n      switch (method) {\r\n        case fortuneActionNames.new_round:\r\n        case fortuneActionNames.start_game:\r\n          dispatch({\r\n            type: fortuneActionNames[method],\r\n            payload: { ...data },\r\n          });\r\n          break;\r\n        case fortuneActionNames.spinning:\r\n          dispatch({\r\n            type: fortuneActionNames[method],\r\n            payload: {\r\n              time: data.time,\r\n              segment_id: data.segment_id,\r\n            },\r\n          });\r\n          break;\r\n        case fortuneActionNames.stopped:\r\n          dispatch({\r\n            type: fortuneActionNames[method],\r\n            payload: { id: data.id, stopped_at: data.stopped_at },\r\n          });\r\n          break;\r\n        case fortuneActionNames.bet_played:\r\n          dispatch({\r\n            type: fortuneActionNames[method],\r\n            payload: { balance: data.balance, error: data.error },\r\n          });\r\n          break;\r\n        case fortuneActionNames.new_bet_finalized:\r\n          dispatch({\r\n            type: fortuneActionNames[method],\r\n            payload: {\r\n              datetime: data.datetime,\r\n              bet_local_id: data.bet_local_id,\r\n              coin: data.coin,\r\n              bet_amt: data.bet_amt,\r\n              payout: data.payout,\r\n              win: data.win,\r\n              profit: data.profit,\r\n            },\r\n          });\r\n          break;\r\n        case fortuneActionNames.bet_cashedout:\r\n          dispatch({\r\n            type: fortuneActionNames[method],\r\n            payload: {\r\n              error: data.error,\r\n              balance: data.balance,\r\n              bet_local_id: data.bet_local_id,\r\n            },\r\n          });\r\n          break;\r\n        case fortuneActionNames.bet_cashedout_update:\r\n          dispatch({\r\n            type: fortuneActionNames[method],\r\n            payload: {\r\n              user_id: data.user_id,\r\n              payout: data.payout,\r\n              profit: data.profit,\r\n              coin: data.coin,\r\n              bet_local_id: data.bet_local_id,\r\n            },\r\n          });\r\n          break;\r\n        case fortuneActionNames.previous_rounds:\r\n          dispatch({\r\n            type: fortuneActionNames[method],\r\n            payload: { rounds: data.rounds },\r\n          });\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    } else {\r\n      switch (action) {\r\n        case fortuneActionNames.update_coins_parameters:\r\n          const { coins } = data;\r\n          dispatch({\r\n            type: fortuneActionNames[action],\r\n            payload: { ...coins },\r\n          });\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  };\r\n};\r\n","import { dataItemColors, FortuneGameData } from \"pages/Fortune/config\";\r\nconst transformSelectionValue = (value: string) => {\r\n  if (value === \"52XA\" || value === \"52XB\") {\r\n    return \"52X\";\r\n  } else {\r\n    return value;\r\n  }\r\n};\r\nexport const getFortuneResultValues = (\r\n  result: number,\r\n): { color: string; selection: string; selectionNumber: string } => {\r\n  let color = dataItemColors[FortuneGameData[result].selection];\r\n  let selection = transformSelectionValue(FortuneGameData[result].selection);\r\n  let selectionNumber = selection.replace(/[^0-9]/g, \"\");\r\n  return { color, selection, selectionNumber };\r\n};\r\n","import React, { FC, Suspense } from \"react\";\r\n\r\nimport LazyComponentLoader from \"config/LazyComponentLoader\";\r\nimport ProgressFallback from \"components/fallbacks/Progress\";\r\n\r\nconst HistoryModal = React.lazy(() => LazyComponentLoader(import(\"./Content\")));\r\ninterface Props {\r\n  onClose: () => void;\r\n  id: string | null;\r\n}\r\n\r\nconst Content: FC<Props> = ({ onClose, id }) => {\r\n  return (\r\n    <>\r\n      {!!id && (\r\n        <Suspense fallback={<ProgressFallback />}>\r\n          <HistoryModal onClose={onClose} id={id} />\r\n        </Suspense>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Content;\r\n","import { crashSocketsList } from \"pages/Crash/crashSocketWatcher\";\r\nimport { fortuneSocketsList } from \"pages/Fortune/components/ControlPanel/reducer/fortuneSocketWatcher\";\r\nimport { getFortuneResultValues } from \"pages/Fortune/components/ControlPanel/reducer/methods/utils/getFortuneResultValues\";\r\nimport { crashSocket, fortuneSocket, Socket } from \"./../../../../utils/socket\";\r\nimport { HistoryElement } from \"./Content\";\r\nimport { PlayerGame } from \"./HistoryModal/Content\";\r\nimport { crashPrevRoundsListener } from \"./utils/crashMethods\";\r\nimport { fortunePrevRoundsListener } from \"./utils/fortuneMethods\";\r\nenum StatisticsHistoryListenerIndexNames {\r\n  \"statisticsHistoryListener\" = \"statisticsHistoryListener\",\r\n}\r\ntype IHistoryContentConfig = {\r\n  [key: string]: {\r\n    socket: Socket;\r\n    socketsList: {\r\n      [k in StatisticsHistoryListenerIndexNames]: (data: any) => void;\r\n    };\r\n    statisticsHistoryListenerIndexName: keyof typeof StatisticsHistoryListenerIndexNames;\r\n    prevRoundsListener: (\r\n      setData: (value: HistoryElement[] | undefined) => void,\r\n      setNewData: (value: HistoryElement | undefined) => void,\r\n    ) => (data: any) => void;\r\n  };\r\n};\r\nexport const permittedSocketGamePaths = [\"/crash\", \"/fortune-quest\"];\r\nexport const historyContentConfig: IHistoryContentConfig = {\r\n  \"/crash\": {\r\n    socket: crashSocket,\r\n    socketsList: crashSocketsList,\r\n    statisticsHistoryListenerIndexName:\r\n      StatisticsHistoryListenerIndexNames.statisticsHistoryListener,\r\n    prevRoundsListener: crashPrevRoundsListener,\r\n  },\r\n  \"/fortune-quest\": {\r\n    socket: fortuneSocket,\r\n    socketsList: fortuneSocketsList,\r\n    statisticsHistoryListenerIndexName:\r\n      StatisticsHistoryListenerIndexNames.statisticsHistoryListener,\r\n    prevRoundsListener: fortunePrevRoundsListener,\r\n  },\r\n};\r\n\r\nexport interface IChainCrashFetchData {\r\n  success: boolean;\r\n  message: string;\r\n  round: {\r\n    crash_point: string;\r\n    players: {\r\n      bet_amt: string;\r\n      cashout_point: string;\r\n      coin: string;\r\n      profit: string;\r\n      user_name: string;\r\n      win: string;\r\n    }[];\r\n    round_id: number;\r\n    server_seed: string;\r\n  };\r\n}\r\nexport interface IChainFortuneFetchData {\r\n  success: boolean;\r\n  message: string;\r\n  round: {\r\n    wheel_point: string;\r\n    players: {\r\n      bet_amt: string;\r\n      selection: string;\r\n      coin: string;\r\n      profit: string;\r\n      user_name: string;\r\n      win: string;\r\n    }[];\r\n    round_id: number;\r\n    server_seed: string;\r\n  };\r\n}\r\nexport interface IRoundData {\r\n  crash: string;\r\n  seed: string;\r\n  id: string;\r\n}\r\nexport const chainFetchPaths: {\r\n  [key: string]: {\r\n    path: string;\r\n    windowPath: string;\r\n    getRoundData: (data: any) => { round: IRoundData; players: PlayerGame[] };\r\n  };\r\n} = {\r\n  \"/crash\": {\r\n    path: \"crash/get-round\",\r\n    windowPath: \"https://pasinocom.github.io/pasino-verify/crash.html\",\r\n    getRoundData: (data: IChainCrashFetchData) => {\r\n      const round = {\r\n        crash: data.round.crash_point,\r\n        id: String(data.round.round_id),\r\n        seed: data.round.server_seed,\r\n      };\r\n      const players = data.round.players.map((player) => {\r\n        const { bet_amt, coin, profit, cashout_point, user_name, win } = player;\r\n        return {\r\n          bet_amt,\r\n          coin,\r\n          profit,\r\n          result: `${cashout_point}x`,\r\n          user_name,\r\n          win,\r\n        };\r\n      });\r\n      return { round, players };\r\n    },\r\n  },\r\n  \"/fortune-quest\": {\r\n    path: \"fortunequest/get-round\",\r\n    windowPath: \"https://pasinocom.github.io/pasino-verify/crash.html\",\r\n    getRoundData: (data: IChainFortuneFetchData) => {\r\n      const round = {\r\n        crash: String(\r\n          getFortuneResultValues(+data.round.wheel_point).selectionNumber,\r\n        ),\r\n        id: String(data.round.round_id),\r\n        seed: data.round.server_seed,\r\n      };\r\n      const players = data.round.players.map((player) => {\r\n        const { bet_amt, coin, profit, selection, user_name, win } = player;\r\n        return {\r\n          bet_amt,\r\n          coin,\r\n          profit,\r\n          result: selection,\r\n          user_name,\r\n          win,\r\n        };\r\n      });\r\n      return { round, players };\r\n    },\r\n  },\r\n};\r\n","import { CrashStoryListener } from \"games/Crash/game/engine/entities/SocketListener/listenerTypes\";\r\nimport { HistoryElement } from \"../Content\";\r\n\r\nexport const crashPrevRoundsListener = (\r\n  setData: (value: HistoryElement[] | undefined) => void,\r\n  setNewData: (value: HistoryElement | undefined) => void,\r\n) => {\r\n  return (data: CrashStoryListener) => {\r\n    switch (data.method) {\r\n      case \"previous_rounds\":\r\n        const rounds: HistoryElement[] = data.rounds.map((round) => {\r\n          const { id, crash_point, seed } = round;\r\n          return { id, crash_point, seed };\r\n        });\r\n        setData(rounds);\r\n        break;\r\n      case \"crashed\":\r\n        const { crash_point, id, seed } = data.round;\r\n        setNewData({ id, crash_point, seed });\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n};\r\n","import { FortuneGameData } from \"pages/Fortune/config\";\r\nimport { CrashStoryListener } from \"games/Crash/game/engine/entities/SocketListener/listenerTypes\";\r\nimport { FortuneStoryListener } from \"pages/Fortune/fortuneTypes\";\r\nimport { HistoryElement } from \"../Content\";\r\n\r\nexport const fortunePrevRoundsListener = (\r\n  setData: (value: HistoryElement[] | undefined) => void,\r\n  setNewData: (value: HistoryElement | undefined) => void,\r\n) => {\r\n  return (data: FortuneStoryListener) => {\r\n    switch (data.method) {\r\n      case \"previous_rounds\":\r\n        const rounds: HistoryElement[] = data.rounds.map((round) => {\r\n          const { id, seed, wheel_point } = round;\r\n          return {\r\n            id,\r\n            crash_point: FortuneGameData[+wheel_point].selection.replace(\r\n              /[^0-9]/g,\r\n              \"\",\r\n            ),\r\n            seed,\r\n          };\r\n        });\r\n        setData(rounds);\r\n        break;\r\n      case \"stopped\":\r\n        const round: HistoryElement = {\r\n          id: data.id,\r\n          crash_point: FortuneGameData[+data.stopped_at].selection.replace(\r\n            /[^0-9]/g,\r\n            \"\",\r\n          ),\r\n          seed: data.server_seed,\r\n        };\r\n        setNewData(round);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrapperPadding\":\"10px\",\"desktopHeaderSize\":\"64px\",\"bottomButtonsSize\":\"60px\",\"desktopChatWidth\":\"310px\",\"swipedChatWidth\":\"960px\",\"arrBlockWidth\":\"12px\",\"headerHeight\":\"60px\",\"inputPadding\":\"16px\",\"chatPadding\":\"16px\",\"inputHeight\":\"56px\",\"chatWidth\":\"280px\",\"spacing\":\"8px\",\"mobileScreen\":\"600px\",\"feyorraDisableSize\":\"1080px\",\"wrapper\":\"style_wrapper__xnfxI\",\"tableWrapper\":\"style_tableWrapper__1xVM0\",\"tableCellWrapper\":\"style_tableCellWrapper__3L8FF\",\"tableWinnerGame\":\"style_tableWinnerGame__2vfUI\",\"tableLoserGame\":\"style_tableLoserGame__aBbXJ\",\"tableCircle\":\"style_tableCircle__qDW9z\"};"],"sourceRoot":""}