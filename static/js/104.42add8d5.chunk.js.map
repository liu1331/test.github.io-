{"version":3,"sources":["components/Scrollbar/customScrollBar.tsx","components/Scrollbar/style.module.scss"],"names":["CustomScrollbar","forwardRef","ref","withoutShadow","onUpdateExtend","containerProps","rest","shadowTop","useRef","shadowBottom","useState","scroll","setScroll","rtl","useLocale","scrollRef","useEffect","a","Scrollbar","ScrollBar","importScrollBar","className","clsx","css","container","bar","current","mobileNative","wrapperProps","thumbYProps","renderer","props","elementRef","style","restProps","width","backgroundColor","trackYProps","thumbXProps","height","trackXProps","onUpdate","prevScrollState","scrollTop","scrollHeight","clientHeight","restScrollProps","shadowTopOpacity","Math","min","bottomScrollTop","shadowBottomOpacity","max","opacity","module","exports"],"mappings":"iNAYMA,EAAkBC,sBACtB,WAA6DC,GAAS,IAAnEC,EAAkE,EAAlEA,cAAeC,EAAmD,EAAnDA,eAAgBC,EAAmC,EAAnCA,eAAmBC,EAAgB,mEAC7DC,EAAYC,iBAAuB,MACnCC,EAAeD,iBAAuB,MAFuB,EAGvCE,mBAEzB,IALgE,mBAG5DC,EAH4D,KAGpDC,EAHoD,KAM3DC,EAAQC,sBAARD,IAEFE,EAAYP,mBAgDlB,OAXAQ,qBAAU,YACa,uCAAG,8BAAAC,EAAA,sEACO,gCADP,gBACdC,EADc,EACdA,UACRN,EAAU,CACRO,UAAWD,IAHS,2CAAH,qDAOrBE,KACC,IAGD,gDACMf,GADN,IAEEgB,UAAWC,YAAKC,IAAIC,UAAL,OAAgBnB,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAgBgB,WAFjD,UAGGV,EAAOQ,WACN,cAACR,EAAOQ,UAAR,aACEjB,IAAK,SAACuB,GACJV,EAAUW,QAAUD,EACdA,GAERE,cAAY,EACZd,IAAKA,EACLe,aAAc,CAAEP,UAAWE,IAAIK,cAC/BC,YAAa,CACXC,SAAU,SAACC,GAAW,IACZC,EAAoCD,EAApCC,WAAYC,EAAwBF,EAAxBE,MAAUC,EADX,YACyBH,EADzB,wBAEnB,OACE,+CACMG,GADN,IAEEhC,IAAK8B,EACLC,MAAK,2BACAA,GADA,IAEHE,MAAO,EACPC,gBAAiB,mCAM3BC,YAAa,CACXP,SAAU,SAACC,GAAW,IACZC,EAAoCD,EAApCC,WAAYC,EAAwBF,EAAxBE,MAAUC,EADX,YACyBH,EADzB,wBAEnB,OACE,gDACMG,GADN,IAEEhC,IAAK8B,EACLC,MAAK,2BACAA,GADA,IAEHE,MAAO,SAMjBG,YAAa,CACXR,SAAU,SAACC,GAAW,IACZC,EAAoCD,EAApCC,WAAYC,EAAwBF,EAAxBE,MAAUC,EADX,YACyBH,EADzB,wBAEnB,OACE,+CACMG,GADN,IAEEhC,IAAK8B,EACLC,MAAK,2BACAA,GADA,IAEHM,OAAQ,EACRH,gBAAiB,mCAM3BI,YAAa,CACXV,SAAU,SAACC,GAAW,IACZC,EAAoCD,EAApCC,WAAYC,EAAwBF,EAAxBE,MAAUC,EADX,YACyBH,EADzB,wBAEnB,OACE,gDACMG,GADN,IAEEhC,IAAK8B,EACLC,MAAK,2BACAA,GADA,IAEHM,OAAQ,SAMlBE,SAzH+C,SAAC,EAEtDC,GACI,IAFFC,EAEC,EAFDA,UAAWC,EAEV,EAFUA,aAAcC,EAExB,EAFwBA,aAAiBC,EAEzC,2DACH,IAAK3C,EAAe,CAAC,IAAD,IACZ4C,EACJ,IACAC,KAAKC,IAAIN,EAAW,IAChBO,EAAkBN,EAAeC,EACjCM,EACH,KACAD,EAAkBF,KAAKI,IAAIT,EAAWO,EAAkB,MAE3D,UAAI3C,EAAUmB,eAAd,aAAI,EAAmBO,SACrB1B,EAAUmB,QAAQO,MAAMoB,QAAxB,UAAqCN,KAGvC,UAAItC,EAAaiB,eAAjB,aAAI,EAAsBO,SACxBxB,EAAaiB,QAAQO,MAAMoB,QAA3B,UAAwCF,IAIxC/C,GACFA,EAAe,aAEXuC,YACAC,eACAC,gBACGC,GAELJ,KA4FMpC,KAGNH,GACA,qCACE,qBAAKD,IAAKK,EAAWc,UAAWE,IAAIhB,YACpC,qBAAKL,IAAKO,EAAcY,UAAWE,IAAId,yBAQpCT,a,oBC9JfsD,EAAOC,QAAU,CAAC,UAAY,yBAAyB,aAAe,4BAA4B,UAAY,yBAAyB,aAAe","file":"static/js/104.42add8d5.chunk.js","sourcesContent":["import React, { forwardRef, useEffect, useRef, useState } from \"react\";\r\nimport clsx from \"clsx\";\r\n\r\nimport type {\r\n  ScrollbarProps as CustomScrollbarProps,\r\n  Scrollbar as ScrollbarInstance,\r\n} from \"react-scrollbars-custom\";\r\n\r\nimport { useLocale } from \"providers/Locale\";\r\nimport { ScrollbarProps } from \"./type\";\r\nimport css from \"./style.module.scss\";\r\n\r\nconst CustomScrollbar = forwardRef<ScrollbarInstance, ScrollbarProps>(\r\n  ({ withoutShadow, onUpdateExtend, containerProps, ...rest }, ref) => {\r\n    const shadowTop = useRef<HTMLDivElement>(null);\r\n    const shadowBottom = useRef<HTMLDivElement>(null);\r\n    const [scroll, setScroll] = useState<{\r\n      ScrollBar?: (props: CustomScrollbarProps) => JSX.Element;\r\n    }>({});\r\n    const { rtl } = useLocale();\r\n\r\n    const scrollRef = useRef<ScrollbarInstance>();\r\n\r\n    const handleUpdate: CustomScrollbarProps[\"onUpdate\"] = (\r\n      { scrollTop, scrollHeight, clientHeight, ...restScrollProps },\r\n      prevScrollState,\r\n    ) => {\r\n      if (!withoutShadow) {\r\n        const shadowTopOpacity =\r\n          0.05 * // (1 / 20)\r\n          Math.min(scrollTop, 20);\r\n        const bottomScrollTop = scrollHeight - clientHeight;\r\n        const shadowBottomOpacity =\r\n          (1 / 20) *\r\n          (bottomScrollTop - Math.max(scrollTop, bottomScrollTop - 20));\r\n\r\n        if (shadowTop.current?.style) {\r\n          shadowTop.current.style.opacity = `${shadowTopOpacity}`;\r\n        }\r\n\r\n        if (shadowBottom.current?.style) {\r\n          shadowBottom.current.style.opacity = `${shadowBottomOpacity}`;\r\n        }\r\n      }\r\n\r\n      if (onUpdateExtend) {\r\n        onUpdateExtend(\r\n          {\r\n            scrollTop,\r\n            scrollHeight,\r\n            clientHeight,\r\n            ...restScrollProps,\r\n          },\r\n          prevScrollState,\r\n        );\r\n      }\r\n    };\r\n\r\n    useEffect(() => {\r\n      const importScrollBar = async () => {\r\n        const { Scrollbar } = (await import(\"react-scrollbars-custom\")) as any;\r\n        setScroll({\r\n          ScrollBar: Scrollbar,\r\n        });\r\n      };\r\n\r\n      importScrollBar();\r\n    }, []);\r\n\r\n    return (\r\n      <div\r\n        {...containerProps}\r\n        className={clsx(css.container, containerProps?.className)}>\r\n        {scroll.ScrollBar && (\r\n          <scroll.ScrollBar\r\n            ref={(bar: any) => {\r\n              scrollRef.current = bar;\r\n              ref = bar;\r\n            }}\r\n            mobileNative\r\n            rtl={rtl}\r\n            wrapperProps={{ className: css.wrapperProps }}\r\n            thumbYProps={{\r\n              renderer: (props) => {\r\n                const { elementRef, style, ...restProps } = props;\r\n                return (\r\n                  <div\r\n                    {...restProps}\r\n                    ref={elementRef}\r\n                    style={{\r\n                      ...style,\r\n                      width: 6,\r\n                      backgroundColor: \"rgba(255, 255, 255, 0.33)\",\r\n                    }}\r\n                  />\r\n                );\r\n              },\r\n            }}\r\n            trackYProps={{\r\n              renderer: (props) => {\r\n                const { elementRef, style, ...restProps } = props;\r\n                return (\r\n                  <span\r\n                    {...restProps}\r\n                    ref={elementRef}\r\n                    style={{\r\n                      ...style,\r\n                      width: 6,\r\n                    }}\r\n                  />\r\n                );\r\n              },\r\n            }}\r\n            thumbXProps={{\r\n              renderer: (props) => {\r\n                const { elementRef, style, ...restProps } = props;\r\n                return (\r\n                  <div\r\n                    {...restProps}\r\n                    ref={elementRef}\r\n                    style={{\r\n                      ...style,\r\n                      height: 6,\r\n                      backgroundColor: \"rgba(255, 255, 255, 0.33)\",\r\n                    }}\r\n                  />\r\n                );\r\n              },\r\n            }}\r\n            trackXProps={{\r\n              renderer: (props) => {\r\n                const { elementRef, style, ...restProps } = props;\r\n                return (\r\n                  <span\r\n                    {...restProps}\r\n                    ref={elementRef}\r\n                    style={{\r\n                      ...style,\r\n                      height: 6,\r\n                    }}\r\n                  />\r\n                );\r\n              },\r\n            }}\r\n            onUpdate={handleUpdate}\r\n            {...rest}\r\n          />\r\n        )}\r\n        {!withoutShadow && (\r\n          <>\r\n            <div ref={shadowTop} className={css.shadowTop} />\r\n            <div ref={shadowBottom} className={css.shadowBottom} />\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\nexport default CustomScrollbar;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__36u00\",\"wrapperProps\":\"style_wrapperProps__qhOnp\",\"shadowTop\":\"style_shadowTop__1hqXE\",\"shadowBottom\":\"style_shadowBottom__187Dk\"};"],"sourceRoot":""}