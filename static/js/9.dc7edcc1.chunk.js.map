{"version":3,"sources":["games/Diamonds/Combinations/config.ts","games/Diamonds/config.ts","games/Diamonds/Combinations/Row/components/DiamondIcon/config.ts","games/Diamonds/Position/config.ts","assets/diamonds/azure-diamond.svg","assets/diamonds/blue-diamond.svg","assets/diamonds/pink-diamond.svg","assets/diamonds/red-diamond.svg","assets/diamonds/purple-diamond.svg","assets/diamonds/orange-diamond.svg","assets/diamonds/green-diamond.svg","games/Diamonds/Combinations/Row/components/InfoBlock/InfoField/index.tsx","games/Diamonds/Combinations/Row/components/InfoBlock/index.tsx","assets/diamonds/with-border.svg","assets/diamonds/without-border.svg","games/Diamonds/Combinations/Row/components/DiamondIcon/index.tsx","games/Diamonds/Combinations/Row/index.tsx","games/Diamonds/Combinations/index.tsx","assets/diamonds/diamond-shadow.svg","assets/diamonds/stand.svg","games/Diamonds/Position/index.tsx","games/Diamonds/Field/index.tsx","games/Diamonds/Combinations/Row/style.module.scss","games/Diamonds/Combinations/Row/components/InfoBlock/style.module.scss","games/Diamonds/Combinations/Row/components/InfoBlock/InfoField/style.module.scss","games/Diamonds/Combinations/Row/components/DiamondIcon/style.module.scss","games/Diamonds/Combinations/style.module.scss","games/Diamonds/Field/style.module.scss"],"names":["Outcome","getCombinationRowProps","greyDiamondsCount","colorlessWithBorderDiamondCount","Array","fill","getDiamondType","DiamondIconColor","GRAY","COLORLESS","combinations","ALL_DIAMONDS","type","ratio","chance","FOUR_DIAMONDS","FIELD_SIZE","THREE_DIAMONDS_TWO_DIAMONDS","THREE_DIAMONDS","TWO_DIAMONDS_TWO_DIAMONDS","TWO_DIAMONDS","NOTHING","colorToDiamondIconColor","Diamond","RED","PINK","BLUE","CYAN","YELLOW","GREEN","PURPLE","paintRow","firstDiamondIndex","secondDiamondIndex","iconTypes","map","color","bordered","Diamonds","getDiamond","diamondIcons","greenDiamond","purpleDiamond","orangeDiamond","redDiamond","cyanDiamond","pinkDiamond","azureDiamond","index","list","length","Error","Object","values","InfoField","amount","coin","text","label","className","styles","root","field","draggable","InfoBlock","profitAmount","toFixed","_extends","assign","target","i","arguments","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","opacity","id","fillRule","clipRule","d","mask","SvgWithBorder","_ref","svgRef","title","titleId","props","width","height","viewBox","xmlns","ref","ForwardRef","SvgWithoutBorder","colorToStyleWithBorder","withBorderRed","withBorderPink","withBorderAzure","withBorderBlue","withBorderGreen","withBorderPurple","withBorderYellow","withBorderColorless","colorToStyleWithoutBorder","withoutBorderRed","withoutBorderPink","withoutBorderAzure","withoutBorderBlue","withoutBorderGreen","withoutBorderPurple","withoutBorderYellow","withoutBorderColorless","withoutBorderGray","DiamondIcon","Row","diamondsConfig","isSelect","isUsdAmount","onMouseEnter","classes","clsx","selected","combination","infoWrapper","showInfo","combinationList","combinationNames","Combinations","firstDiamond","secondDiamond","betAmount","outcome","useState","rowList","setRowList","selectedRow","setSelectedRow","defaultRow","useMemo","useEffect","rows","profit","Number","isNaN","a","cloneDeep","default","cloneAndSetList","onMouseLeave","areEqual","prevProps","nextProps","memo","_ref3","_ref4","x1","y1","x2","y2","gradientUnits","stopColor","offset","SvgStand","diamondToStandColorMap","Position","diamondIndex","isWinCombination","useSassImport","diamond","isNumber","standColorClass","src","alt","diamondShadow","greenDiamondShadow","stand","Field","children","fieldWidthProps","fieldRef","useRef","zoom","current","offsetWidth","scale","fieldScale","style","transform","module","exports"],"mappings":"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","file":"static/js/9.dc7edcc1.chunk.js","sourcesContent":["import { FIELD_SIZE } from \"../config\";\r\nimport { DiamondIndex } from \"../Position/types\";\r\nimport { Diamond, Diamonds } from \"../Position/config\";\r\nimport { DiamondIconType } from \"./Row/components/DiamondIcon\";\r\nimport {\r\n  DiamondIconColor,\r\n  getDiamondType,\r\n} from \"./Row/components/DiamondIcon/config\";\r\n\r\nexport enum Outcome {\r\n  ALL_DIAMONDS = \"ALL_DIAMONDS\",\r\n  FOUR_DIAMONDS = \"FOUR_DIAMONDS\",\r\n  THREE_DIAMONDS_TWO_DIAMONDS = \"THREE_DIAMONDS_TWO_DIAMONDS\",\r\n  THREE_DIAMONDS = \"THREE_DIAMONDS\",\r\n  TWO_DIAMONDS_TWO_DIAMONDS = \"TWO_DIAMONDS_TWO_DIAMONDS\",\r\n  TWO_DIAMONDS = \"TWO_DIAMONDS\",\r\n  NOTHING = \"NOTHING\",\r\n}\r\n\r\nexport const getCombinationRowProps = (\r\n  greyDiamondsCount = 0,\r\n  colorlessWithBorderDiamondCount = 0,\r\n) => {\r\n  return [\r\n    ...new Array(greyDiamondsCount).fill(getDiamondType(DiamondIconColor.GRAY)),\r\n    ...new Array(colorlessWithBorderDiamondCount).fill(\r\n      getDiamondType(DiamondIconColor.COLORLESS, true),\r\n    ),\r\n    ...new Array(\r\n      FIELD_SIZE - (greyDiamondsCount + colorlessWithBorderDiamondCount),\r\n    ).fill(getDiamondType(DiamondIconColor.COLORLESS)),\r\n  ] as Array<DiamondIconType>;\r\n};\r\n\r\nexport const combinations = {\r\n  [Outcome.ALL_DIAMONDS]: {\r\n    type: getCombinationRowProps(FIELD_SIZE),\r\n    ratio: 50,\r\n    chance: 0.04,\r\n  },\r\n  [Outcome.FOUR_DIAMONDS]: {\r\n    type: getCombinationRowProps(FIELD_SIZE - 1, 0),\r\n    ratio: 5,\r\n    chance: 1.25,\r\n  },\r\n  [Outcome.THREE_DIAMONDS_TWO_DIAMONDS]: {\r\n    type: getCombinationRowProps(FIELD_SIZE - 2, 2),\r\n    ratio: 4,\r\n    chance: 2.5,\r\n  },\r\n  [Outcome.THREE_DIAMONDS]: {\r\n    type: getCombinationRowProps(FIELD_SIZE - 2, 0),\r\n    ratio: 3,\r\n    chance: 12.49,\r\n  },\r\n  [Outcome.TWO_DIAMONDS_TWO_DIAMONDS]: {\r\n    type: getCombinationRowProps(FIELD_SIZE - 3, 2),\r\n    ratio: 2,\r\n    chance: 18.74,\r\n  },\r\n  [Outcome.TWO_DIAMONDS]: {\r\n    type: getCombinationRowProps(FIELD_SIZE - 3, 0),\r\n    ratio: 0.1,\r\n    chance: 49.98,\r\n  },\r\n  [Outcome.NOTHING]: {\r\n    type: getCombinationRowProps(),\r\n    ratio: 0,\r\n    chance: 14.99,\r\n  },\r\n};\r\n\r\nconst colorToDiamondIconColor = {\r\n  [Diamond.RED]: DiamondIconColor.RED,\r\n  [Diamond.PINK]: DiamondIconColor.PINK,\r\n  [Diamond.BLUE]: DiamondIconColor.BLUE,\r\n  [Diamond.CYAN]: DiamondIconColor.CYAN,\r\n  [Diamond.YELLOW]: DiamondIconColor.YELLOW,\r\n  [Diamond.GREEN]: DiamondIconColor.GREEN,\r\n  [Diamond.PURPLE]: DiamondIconColor.PURPLE,\r\n} as Record<Diamond, DiamondIconColor>;\r\n\r\nexport const paintRow = (\r\n  firstDiamondIndex: DiamondIndex,\r\n  secondDiamondIndex: DiamondIndex,\r\n  iconTypes: Array<DiamondIconType>,\r\n) => {\r\n  return iconTypes.map((type) => {\r\n    if (type.color === DiamondIconColor.GRAY && !type.bordered)\r\n      return getDiamondType(\r\n        colorToDiamondIconColor[Diamonds.getDiamond(firstDiamondIndex)],\r\n      );\r\n    else if (type.color === DiamondIconColor.COLORLESS && type.bordered)\r\n      return getDiamondType(\r\n        colorToDiamondIconColor[Diamonds.getDiamond(secondDiamondIndex)],\r\n        true,\r\n      );\r\n    return { ...type };\r\n  });\r\n};\r\n","export const FIELD_SIZE = 5;\r\n","import { DiamondIconType } from \"./\";\r\n\r\nexport enum DiamondIconColor {\r\n  GRAY,\r\n  COLORLESS,\r\n  YELLOW,\r\n  BLUE,\r\n  GREEN,\r\n  CYAN,\r\n  RED,\r\n  PINK,\r\n  PURPLE,\r\n}\r\n\r\nexport const getDiamondType = (\r\n  color: DiamondIconColor,\r\n  bordered = false,\r\n): DiamondIconType => {\r\n  return {\r\n    color,\r\n    bordered,\r\n  };\r\n};\r\n","import azureDiamond from \"assets/diamonds/azure-diamond.svg\";\r\nimport cyanDiamond from \"assets/diamonds/blue-diamond.svg\";\r\nimport pinkDiamond from \"assets/diamonds/pink-diamond.svg\";\r\nimport redDiamond from \"assets/diamonds/red-diamond.svg\";\r\nimport purpleDiamond from \"assets/diamonds/purple-diamond.svg\";\r\nimport orangeDiamond from \"assets/diamonds/orange-diamond.svg\";\r\nimport greenDiamond from \"assets/diamonds/green-diamond.svg\";\r\n\r\nimport { DiamondIndex } from \"./types\";\r\n\r\nexport enum Diamond {\r\n  GREEN = \"GREEN\",\r\n  PURPLE = \"PURPLE\",\r\n  YELLOW = \"YELLOW\",\r\n  RED = \"RED\",\r\n  CYAN = \"CYAN\",\r\n  PINK = \"PINK\",\r\n  BLUE = \"BLUE\",\r\n}\r\n\r\nexport const diamondIcons: Record<Diamond, string> = {\r\n  [Diamond.GREEN]: greenDiamond,\r\n  [Diamond.PURPLE]: purpleDiamond,\r\n  [Diamond.YELLOW]: orangeDiamond,\r\n  [Diamond.RED]: redDiamond,\r\n  [Diamond.CYAN]: cyanDiamond,\r\n  [Diamond.PINK]: pinkDiamond,\r\n  [Diamond.BLUE]: azureDiamond,\r\n};\r\n\r\nexport class Diamonds {\r\n  private static readonly list = Object.values(Diamond);\r\n\r\n  static getDiamond(index: DiamondIndex) {\r\n    if (index < Diamonds.list.length && index >= 0) {\r\n      return Diamonds.list[index];\r\n    }\r\n    throw new Error(\"index out of range\");\r\n  }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/azure-diamond.ea759542.svg\";","export default __webpack_public_path__ + \"static/media/blue-diamond.84cfdd36.svg\";","export default __webpack_public_path__ + \"static/media/pink-diamond.8f14dce1.svg\";","export default __webpack_public_path__ + \"static/media/red-diamond.667d3eff.svg\";","export default __webpack_public_path__ + \"static/media/purple-diamond.28d952ce.svg\";","export default __webpack_public_path__ + \"static/media/orange-diamond.ee41d5f1.svg\";","export default __webpack_public_path__ + \"static/media/green-diamond.51540c48.svg\";","import React, { FC } from \"react\";\r\n\r\nimport { GetCoinImg } from \"components\";\r\n\r\nimport styles from \"./style.module.scss\";\r\n\r\ninterface Props {\r\n  amount: string;\r\n  coin?: string;\r\n  text: string;\r\n  label: string;\r\n}\r\n\r\nconst InfoField: FC<Props> = ({ amount, coin, text, label }) => {\r\n  return (\r\n    <div className={styles.root}>\r\n      <span className={styles.label}>{label}</span>\r\n      <div className={styles.field}>\r\n        <span className={styles.amount}>{amount}</span>\r\n        {coin ? (\r\n          <GetCoinImg className={styles.coin} coin={coin} draggable={false} />\r\n        ) : (\r\n          <span className={styles.text}>{text}</span>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfoField;\r\n","import React, { FC } from \"react\";\r\n\r\nimport { Coin } from \"hooks\";\r\n\r\nimport styles from \"./style.module.scss\";\r\nimport InfoField from \"./InfoField\";\r\n\r\ninterface Props {\r\n  chance: number;\r\n  profitAmount: string;\r\n  coin?: Coin;\r\n}\r\n\r\nconst InfoBlock: FC<Props> = ({ chance, coin, profitAmount }) => {\r\n  return (\r\n    <div className={styles.root}>\r\n      <InfoField\r\n        amount={profitAmount}\r\n        coin={coin?.coin}\r\n        text=\"currency\"\r\n        label=\"Profit\"\r\n      />\r\n      <InfoField amount={chance.toFixed(2)} text=\"%\" label=\"Chance\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfoBlock;\r\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"g\", {\n  opacity: 0.5\n}, /*#__PURE__*/React.createElement(\"mask\", {\n  id: \"path-1-inside-1\",\n  fill: \"white\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  clipRule: \"evenodd\",\n  d: \"M5.58703 0H19.413L25 4.26332V4.29467V5.23511V5.26646L12.5129 20H12.4614L0 5.26646V5.23511V4.29467V4.26332L5.58703 0Z\"\n})), /*#__PURE__*/React.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  clipRule: \"evenodd\",\n  d: \"M5.58703 0H19.413L25 4.26332V4.29467V5.23511V5.26646L12.5129 20H12.4614L0 5.26646V5.23511V4.29467V4.26332L5.58703 0Z\",\n  fill: \"#15141E\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19.413 0L20.0196 -0.794982L19.7509 -1H19.413V0ZM5.58703 0V-1H5.24907L4.98039 -0.794983L5.58703 0ZM25 4.26332H26V3.76851L25.6066 3.46834L25 4.26332ZM25 5.26646L25.7629 5.91301L26 5.63322V5.26646H25ZM12.5129 20V21H12.9762L13.2757 20.6466L12.5129 20ZM12.4614 20L11.6979 20.6458L11.9975 21H12.4614V20ZM0 5.26646H-1V5.63264L-0.763526 5.91224L0 5.26646ZM0 4.26332L-0.606632 3.46834L-1 3.76851V4.26332H0ZM19.413 -1H5.58703V1H19.413V-1ZM25.6066 3.46834L20.0196 -0.794982L18.8064 0.794982L24.3934 5.05831L25.6066 3.46834ZM26 4.29467V4.26332H24V4.29467H26ZM26 5.23511V4.29467H24V5.23511H26ZM26 5.26646V5.23511H24V5.26646H26ZM13.2757 20.6466L25.7629 5.91301L24.2371 4.6199L11.75 19.3534L13.2757 20.6466ZM12.4614 21H12.5129V19H12.4614V21ZM-0.763526 5.91224L11.6979 20.6458L13.2249 19.3542L0.763526 4.62068L-0.763526 5.91224ZM-1 5.23511V5.26646H1V5.23511H-1ZM-1 4.29467V5.23511H1V4.29467H-1ZM-1 4.26332V4.29467H1V4.26332H-1ZM4.98039 -0.794983L-0.606632 3.46834L0.606632 5.05831L6.19366 0.794983L4.98039 -0.794983Z\",\n  fill: \"white\",\n  mask: \"url(#path-1-inside-1)\"\n}));\n\nfunction SvgWithBorder(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 25,\n    height: 20,\n    viewBox: \"0 0 25 20\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgWithBorder);\nexport default __webpack_public_path__ + \"static/media/with-border.3e99da32.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  clipRule: \"evenodd\",\n  d: \"M5.58703 0H19.413L25 4.26332V4.29467V5.23511V5.26646L12.5129 20H12.4614L0 5.26646V5.23511V4.29467V4.26332L5.58703 0Z\"\n});\n\nfunction SvgWithoutBorder(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 25,\n    height: 20,\n    viewBox: \"0 0 25 20\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgWithoutBorder);\nexport default __webpack_public_path__ + \"static/media/without-border.af3f2d46.svg\";\nexport { ForwardRef as ReactComponent };","import React, { FC } from \"react\";\r\n\r\nimport { ReactComponent as DiamondWithBorder } from \"assets/diamonds/with-border.svg\";\r\nimport { ReactComponent as DiamondWithoutBorder } from \"assets/diamonds/without-border.svg\";\r\n\r\nimport styles from \"./style.module.scss\";\r\nimport { DiamondIconColor } from \"./config\";\r\n\r\nexport interface DiamondIconType {\r\n  bordered: boolean;\r\n  color: DiamondIconColor;\r\n}\r\n\r\nexport interface Props {\r\n  type: DiamondIconType;\r\n}\r\n\r\nconst colorToStyleWithBorder = {\r\n  [DiamondIconColor.RED]: styles.withBorderRed,\r\n  [DiamondIconColor.PINK]: styles.withBorderPink,\r\n  [DiamondIconColor.BLUE]: styles.withBorderAzure,\r\n  [DiamondIconColor.CYAN]: styles.withBorderBlue,\r\n  [DiamondIconColor.GREEN]: styles.withBorderGreen,\r\n  [DiamondIconColor.PURPLE]: styles.withBorderPurple,\r\n  [DiamondIconColor.YELLOW]: styles.withBorderYellow,\r\n\r\n  [DiamondIconColor.COLORLESS]: styles.withBorderColorless,\r\n} as Record<DiamondIconColor, string>;\r\n\r\nconst colorToStyleWithoutBorder = {\r\n  [DiamondIconColor.RED]: styles.withoutBorderRed,\r\n  [DiamondIconColor.PINK]: styles.withoutBorderPink,\r\n  [DiamondIconColor.BLUE]: styles.withoutBorderAzure,\r\n  [DiamondIconColor.CYAN]: styles.withoutBorderBlue,\r\n  [DiamondIconColor.GREEN]: styles.withoutBorderGreen,\r\n  [DiamondIconColor.PURPLE]: styles.withoutBorderPurple,\r\n  [DiamondIconColor.YELLOW]: styles.withoutBorderYellow,\r\n\r\n  [DiamondIconColor.COLORLESS]: styles.withoutBorderColorless,\r\n  [DiamondIconColor.GRAY]: styles.withoutBorderGray,\r\n} as Record<DiamondIconColor, string>;\r\n\r\nconst DiamondIcon: FC<Props> = ({ type }) => {\r\n  return type.bordered ? (\r\n    <DiamondWithBorder className={colorToStyleWithBorder[type.color]} />\r\n  ) : (\r\n    <DiamondWithoutBorder className={colorToStyleWithoutBorder[type.color]} />\r\n  );\r\n};\r\n\r\nexport default DiamondIcon;\r\n","import React, { FC } from \"react\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { Coin } from \"hooks\";\r\n\r\nimport styles from \"./style.module.scss\";\r\nimport InfoBlock from \"./components/InfoBlock\";\r\nimport DiamondIcon, { DiamondIconType } from \"./components/DiamondIcon\";\r\n\r\ninterface Props {\r\n  diamondsConfig: Array<DiamondIconType>;\r\n  isSelect: boolean;\r\n  ratio: number;\r\n  chance: number;\r\n  profitAmount: string;\r\n  coin?: Coin;\r\n  isUsdAmount?: boolean;\r\n  onMouseEnter: () => void;\r\n  classes?: {\r\n    root?: string;\r\n    combinations?: string;\r\n  };\r\n}\r\n\r\nconst Row: FC<Props> = ({\r\n  diamondsConfig,\r\n  isSelect,\r\n  ratio,\r\n  coin,\r\n  chance,\r\n  profitAmount,\r\n  isUsdAmount,\r\n  onMouseEnter,\r\n  classes,\r\n}) => {\r\n  const diamondIcons = diamondsConfig.map((type, index) => {\r\n    return <DiamondIcon key={`Combinations ${index}`} type={type} />;\r\n  });\r\n\r\n  return (\r\n    <div\r\n      className={clsx(styles.root, classes?.root, {\r\n        [styles.selected]: isSelect,\r\n      })}\r\n      onMouseEnter={onMouseEnter}>\r\n      <div className={clsx(styles.combination, classes?.combinations)}>\r\n        {diamondIcons}\r\n      </div>\r\n      <span className={styles.ratio}>{`${ratio.toFixed(2)}x`}</span>\r\n      <div\r\n        className={clsx(styles.infoWrapper, { [styles.showInfo]: isSelect })}>\r\n        <InfoBlock\r\n          chance={chance}\r\n          coin={coin}\r\n          profitAmount={isUsdAmount ? `$${profitAmount}` : profitAmount}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Row;\r\n","import React, { FC, useState, useEffect, useMemo, memo } from \"react\";\r\n\r\nimport { Coin } from \"hooks\";\r\n\r\nimport { Outcome, combinations, paintRow } from \"./config\";\r\nimport { DiamondIndex } from \"../Position/types\";\r\nimport Row from \"./Row\";\r\nimport styles from \"./style.module.scss\";\r\n\r\ninterface Props {\r\n  firstDiamond: DiamondIndex;\r\n  secondDiamond: DiamondIndex;\r\n  coin?: Coin;\r\n  isUsdAmount?: boolean;\r\n  outcome: null | Outcome;\r\n  betAmount: string;\r\n}\r\n\r\nconst combinationList = Object.values(combinations);\r\nconst combinationNames = Object.keys(combinations);\r\n\r\nconst Combinations: FC<Props> = ({\r\n  firstDiamond,\r\n  secondDiamond,\r\n  coin,\r\n  betAmount,\r\n  outcome,\r\n  isUsdAmount,\r\n}) => {\r\n  const [rowList, setRowList] = useState(combinationList);\r\n  const [selectedRow, setSelectedRow] = useState<number | null>(null);\r\n\r\n  const defaultRow = useMemo(() => {\r\n    return outcome !== null\r\n      ? combinationNames.indexOf(outcome)\r\n      : combinationNames.length - 1;\r\n  }, [outcome]);\r\n\r\n  useEffect(() => setSelectedRow(defaultRow), [defaultRow]);\r\n\r\n  const rows = rowList.map((combination, index) => {\r\n    const profit = Number(betAmount) * combination.ratio;\r\n    return (\r\n      <Row\r\n        key={`Diamonds_Combinations_${index}`}\r\n        diamondsConfig={combination.type}\r\n        isSelect={index === selectedRow}\r\n        onMouseEnter={() => {\r\n          setSelectedRow(index);\r\n        }}\r\n        ratio={combination.ratio}\r\n        coin={coin}\r\n        chance={combination.chance}\r\n        profitAmount={isNaN(profit) || profit < 0 ? \"0\" : profit.toFixed(6)}\r\n        isUsdAmount={isUsdAmount}\r\n      />\r\n    );\r\n  });\r\n\r\n  useEffect(() => {\r\n    const cloneAndSetList = async () => {\r\n      //@ts-ignore\r\n      const { default: cloneDeep } = await import(\"lodash.clonedeep\");\r\n      if (selectedRow === null) {\r\n        setRowList(cloneDeep(combinationList));\r\n        return;\r\n      }\r\n      const rows = cloneDeep(combinationList);\r\n      rows[selectedRow].type = paintRow(\r\n        firstDiamond,\r\n        secondDiamond,\r\n        rows[selectedRow].type,\r\n      );\r\n      setRowList(rows);\r\n    };\r\n\r\n    cloneAndSetList();\r\n  }, [selectedRow, firstDiamond, secondDiamond]);\r\n\r\n  return (\r\n    <div\r\n      className={styles.root}\r\n      onMouseLeave={() => {\r\n        setSelectedRow(defaultRow);\r\n      }}>\r\n      {rows}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst areEqual = (prevProps: Props, nextProps: Props) => {\r\n  return (\r\n    prevProps.betAmount == nextProps.betAmount &&\r\n    prevProps.firstDiamond === nextProps.firstDiamond &&\r\n    prevProps.secondDiamond === nextProps.secondDiamond &&\r\n    prevProps.outcome === nextProps.outcome &&\r\n    prevProps.isUsdAmount === nextProps.isUsdAmount &&\r\n    prevProps?.coin?.coin === nextProps?.coin?.coin\r\n  );\r\n};\r\n\r\nexport default memo(Combinations, areEqual);\r\n","export default __webpack_public_path__ + \"static/media/diamond-shadow.a86aa88e.svg\";","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M172 10.0055C172 10.0305 171.986 10.068 171.986 10.093C171.986 10.1056 171.986 10.1306 171.972 10.1431C171.959 10.1806 171.959 10.2181 171.945 10.2556C171.945 10.2681 171.945 10.2681 171.945 10.2806C171.931 10.3307 171.917 10.3682 171.889 10.4182C171.889 10.4307 171.876 10.4432 171.876 10.4557C171.862 10.4932 171.848 10.5182 171.82 10.5558C171.806 10.5683 171.807 10.5933 171.793 10.6058C171.779 10.6308 171.765 10.6683 171.737 10.6933C171.724 10.7058 171.71 10.7308 171.71 10.7433C171.696 10.7683 171.668 10.8059 171.654 10.8309C171.641 10.8434 171.627 10.8684 171.613 10.8809C171.585 10.9059 171.572 10.9434 171.544 10.9684C171.53 10.9809 171.516 11.0059 171.502 11.0185C171.475 11.0435 171.447 11.081 171.419 11.106C171.406 11.1185 171.392 11.131 171.378 11.1435C171.35 11.181 171.309 11.206 171.267 11.2436C171.254 11.2561 171.254 11.2686 171.24 11.2686C171.198 11.3186 171.143 11.3561 171.088 11.4061C171.032 11.4561 170.977 11.4936 170.922 11.5437C170.908 11.5437 170.908 11.5562 170.894 11.5562C170.839 11.5937 170.798 11.6312 170.742 11.6687C170.728 11.6812 170.715 11.6937 170.701 11.7062C170.659 11.7438 170.604 11.7688 170.563 11.8063C170.549 11.8188 170.521 11.8313 170.507 11.8438C170.466 11.8688 170.41 11.9063 170.369 11.9314C170.341 11.9439 170.328 11.9564 170.3 11.9689C170.245 11.9939 170.203 12.0314 170.148 12.0564C170.12 12.0689 170.106 12.0814 170.079 12.0939C170.023 12.1189 169.968 12.1564 169.913 12.1815C169.885 12.194 169.871 12.2065 169.844 12.219C169.788 12.2565 169.719 12.2815 169.664 12.319C169.636 12.3315 169.623 12.344 169.595 12.3565C169.512 12.394 169.443 12.4316 169.36 12.4691C169.346 12.4691 169.346 12.4816 169.332 12.4816C169.236 12.5316 169.139 12.5691 169.042 12.6191C168.945 12.6567 168.849 12.7067 168.752 12.7442C168.724 12.7567 168.697 12.7692 168.683 12.7692C168.6 12.8067 168.531 12.8317 168.448 12.8693C168.42 12.8818 168.379 12.8943 168.351 12.9068C168.282 12.9318 168.213 12.9693 168.13 12.9943C168.088 13.0068 168.047 13.0193 168.019 13.0443C167.95 13.0693 167.867 13.1069 167.798 13.1319C167.757 13.1444 167.715 13.1569 167.674 13.1819C167.591 13.2069 167.508 13.2444 167.439 13.2694C167.397 13.2819 167.37 13.2944 167.328 13.3069C167.218 13.3445 167.093 13.3945 166.983 13.432C166.983 13.432 166.969 13.432 166.969 13.4445C166.844 13.482 166.72 13.532 166.582 13.5696C166.54 13.5821 166.499 13.5946 166.457 13.6071C166.361 13.6321 166.278 13.6696 166.181 13.6946C166.126 13.7071 166.084 13.7321 166.029 13.7446C165.946 13.7696 165.863 13.7947 165.766 13.8197C165.711 13.8322 165.656 13.8572 165.6 13.8697C165.504 13.8947 165.407 13.9322 165.296 13.9572C165.241 13.9697 165.2 13.9822 165.144 13.9947C165.006 14.0323 164.882 14.0698 164.743 14.1073C164.73 14.1073 164.702 14.1198 164.688 14.1198C164.536 14.1573 164.37 14.2073 164.218 14.2448C164.177 14.2574 164.135 14.2699 164.094 14.2824C163.969 14.3199 163.845 14.3449 163.721 14.3824C163.665 14.3949 163.624 14.4074 163.569 14.4199C163.43 14.4574 163.292 14.495 163.154 14.52C163.113 14.5325 163.071 14.545 163.016 14.5575C162.836 14.6075 162.643 14.645 162.463 14.695C162.269 14.7451 162.076 14.7826 161.882 14.8326C161.841 14.8451 161.799 14.8451 161.758 14.8576C161.592 14.8951 161.44 14.9326 161.274 14.9702C161.233 14.9827 161.191 14.9827 161.15 14.9952C160.929 15.0452 160.707 15.0952 160.486 15.1327C160.265 15.1828 160.03 15.2328 159.809 15.2703C159.768 15.2828 159.726 15.2828 159.698 15.2953C159.477 15.3453 159.27 15.3828 159.049 15.4329C159.035 15.4329 159.021 15.4329 159.007 15.4454C158.759 15.4954 158.524 15.5454 158.275 15.5829C158.247 15.5829 158.22 15.5954 158.206 15.5954C157.943 15.6454 157.68 15.6955 157.418 15.7455C157.404 15.7455 157.376 15.758 157.363 15.758C157.086 15.808 156.81 15.858 156.519 15.9081C156.478 15.9081 156.45 15.9206 156.409 15.9206C156.132 15.9706 155.842 16.0206 155.552 16.0706C155.552 16.0706 155.552 16.0706 155.538 16.0706C155.248 16.1207 154.958 16.1707 154.653 16.2207C154.612 16.2332 154.571 16.2332 154.515 16.2457C154.184 16.2957 153.852 16.3457 153.52 16.4083C153.492 16.4083 153.465 16.4208 153.437 16.4208C153.092 16.4708 152.746 16.5208 152.401 16.5834C152.387 16.5834 152.387 16.5834 152.373 16.5834C152.027 16.6334 151.682 16.6834 151.322 16.7334C151.267 16.7459 151.212 16.7459 151.17 16.7584C150.825 16.8085 150.493 16.8585 150.134 16.9085C150.037 16.921 149.926 16.9335 149.83 16.946C149.733 16.9585 149.622 16.971 149.526 16.9835C149.401 16.996 149.277 17.021 149.152 17.0335C149.056 17.0461 148.959 17.0586 148.848 17.0711C148.724 17.0836 148.586 17.1086 148.461 17.1211C148.365 17.1336 148.268 17.1461 148.171 17.1586C148.019 17.1836 147.867 17.1961 147.715 17.2211C147.632 17.2336 147.549 17.2461 147.466 17.2461C147.273 17.2712 147.065 17.2962 146.858 17.3212C146.816 17.3212 146.789 17.3337 146.747 17.3337C146.512 17.3587 146.277 17.3962 146.056 17.4212C145.628 17.4712 145.199 17.5213 144.771 17.5713C144.729 17.5713 144.674 17.5838 144.633 17.5838C144.218 17.6338 143.817 17.6713 143.402 17.7213C143.347 17.7338 143.292 17.7339 143.237 17.7464C142.822 17.7964 142.393 17.8339 141.965 17.8839C141.923 17.8839 141.882 17.8964 141.841 17.8964C141.398 17.9464 140.942 17.9965 140.486 18.034C140.002 18.084 139.518 18.134 139.021 18.1841C138.592 18.2216 138.164 18.2716 137.735 18.3091C137.694 18.3091 137.653 18.3216 137.611 18.3216C137.183 18.3591 136.74 18.3966 136.298 18.4342C135.856 18.4717 135.4 18.5092 134.957 18.5467C134.93 18.5467 134.902 18.5467 134.874 18.5592C134.432 18.5967 133.976 18.6342 133.52 18.6717C133.492 18.6717 133.451 18.6718 133.423 18.6843C132.981 18.7218 132.552 18.7593 132.11 18.7843C131.668 18.8218 131.225 18.8468 130.783 18.8843C130.728 18.8843 130.672 18.8969 130.631 18.8969C130.189 18.9344 129.746 18.9594 129.304 18.9969C128.862 19.0344 128.419 19.0594 127.977 19.0844C127.908 19.0844 127.853 19.0969 127.784 19.0969C127.258 19.1345 126.733 19.172 126.208 19.197C126.139 19.197 126.084 19.2095 126.014 19.2095C125.489 19.247 124.95 19.272 124.411 19.3095C124.356 19.3095 124.287 19.322 124.231 19.322C123.679 19.3596 123.14 19.3846 122.587 19.4221C122.545 19.4221 122.518 19.4221 122.476 19.4221C121.909 19.4596 121.356 19.4846 120.79 19.5221C120.762 19.5221 120.748 19.5221 120.721 19.5221C120.665 19.5221 120.61 19.5221 120.541 19.5346C119.988 19.5596 119.435 19.5972 118.882 19.6222C118.689 19.6347 118.482 19.6472 118.288 19.6472C117.86 19.6722 117.445 19.6847 117.016 19.7097C116.795 19.7222 116.574 19.7347 116.367 19.7347C115.924 19.7597 115.482 19.7722 115.026 19.7972C114.846 19.8097 114.653 19.8097 114.473 19.8223C113.865 19.8473 113.257 19.8723 112.635 19.8973C112.441 19.9098 112.234 19.9098 112.04 19.9223C111.598 19.9348 111.17 19.9598 110.727 19.9723C110.465 19.9848 110.202 19.9973 109.953 19.9973C109.566 20.0098 109.179 20.0223 108.792 20.0348C108.516 20.0473 108.253 20.0474 107.977 20.0599C107.452 20.0724 106.926 20.0974 106.401 20.1099C106.332 20.1099 106.249 20.1099 106.18 20.1224C106.042 20.1224 105.917 20.1349 105.779 20.1349C105.295 20.1474 104.798 20.1599 104.314 20.1724C104.065 20.1849 103.816 20.1849 103.581 20.1974C103.139 20.2099 102.711 20.2224 102.268 20.2349C102.061 20.2349 101.84 20.2474 101.633 20.2474C100.983 20.2599 100.333 20.2724 99.6837 20.2849H99.6699C99.5869 20.2849 99.4902 20.2849 99.4073 20.2849C98.7853 20.2975 98.1495 20.31 97.5275 20.3225C97.4169 20.3225 97.2925 20.3225 97.1819 20.3225C96.5599 20.335 95.9241 20.3475 95.3022 20.3475C95.2054 20.3475 95.1087 20.3475 95.0257 20.3475C94.3346 20.36 93.6573 20.36 92.9524 20.3725C92.8833 20.3725 92.8142 20.3725 92.7451 20.3725C92.0402 20.385 91.3214 20.385 90.6027 20.385H90.5889C90.5751 20.385 90.5612 20.385 90.5336 20.385C89.8148 20.385 89.0823 20.3975 88.3497 20.3975C88.3083 20.3975 88.2668 20.3975 88.2253 20.3975C87.479 20.3975 86.7187 20.3975 85.9724 20.3975C85.2122 20.3975 84.452 20.3975 83.6917 20.3975C83.6641 20.3975 83.6365 20.3975 83.6088 20.3975C82.8901 20.3975 82.1852 20.3975 81.4664 20.385C81.4111 20.385 81.3558 20.385 81.3005 20.385C80.5956 20.385 79.8907 20.3725 79.1858 20.3725C79.1029 20.3725 79.0338 20.3725 78.9508 20.3725C78.2874 20.36 77.6377 20.36 76.9743 20.3475C76.8914 20.3475 76.8084 20.3475 76.7393 20.3475C76.0482 20.335 75.3709 20.3225 74.6937 20.3225C74.5969 20.3225 74.5002 20.3225 74.4034 20.3225C73.7814 20.31 73.1733 20.2975 72.5651 20.2849C72.4269 20.2849 72.2887 20.285 72.1643 20.2724C71.5699 20.2599 70.9894 20.2474 70.3951 20.2349C70.2568 20.2349 70.1324 20.2349 69.9942 20.2224C69.3999 20.2099 68.8055 20.1974 68.225 20.1849C68.1006 20.1849 67.9762 20.1724 67.8518 20.1724C67.2437 20.1599 66.6355 20.1349 66.0273 20.1224C65.9167 20.1224 65.82 20.1224 65.7094 20.1099C65.1013 20.0974 64.4793 20.0724 63.8711 20.0473C63.7743 20.0473 63.6776 20.0473 63.5808 20.0348C63.567 20.0348 63.5532 20.0348 63.5532 20.0348C62.945 20.0098 62.3369 19.9973 61.7287 19.9723C61.632 19.9723 61.5352 19.9598 61.4523 19.9598C60.8441 19.9348 60.2359 19.9098 59.6278 19.8848C59.531 19.8848 59.4343 19.8723 59.3375 19.8723C58.7293 19.8473 58.135 19.8222 57.5407 19.7972C57.4439 19.7972 57.3472 19.7847 57.2366 19.7847C56.6422 19.7597 56.0617 19.7347 55.4812 19.7097C55.3706 19.7097 55.26 19.6972 55.1633 19.6972C54.5828 19.6722 54.0023 19.6472 53.4217 19.6097C53.325 19.6097 53.2144 19.5972 53.1176 19.5972C52.5371 19.5721 51.9566 19.5346 51.3761 19.5096C51.1688 19.4971 50.9752 19.4846 50.7679 19.4721C50.6435 19.4596 50.5191 19.4596 50.3947 19.4471C50.1183 19.4346 49.8419 19.4221 49.5654 19.3971C49.4963 19.3971 49.4272 19.3846 49.3581 19.3846C48.9987 19.3596 48.6532 19.347 48.3076 19.322C48.28 19.322 48.2385 19.322 48.2109 19.322C47.893 19.297 47.5889 19.2845 47.271 19.2595C47.188 19.2595 47.1051 19.247 47.0084 19.247C46.7457 19.2345 46.4831 19.2095 46.2205 19.197C46.1238 19.1845 46.0132 19.1845 45.9164 19.172C45.6676 19.1595 45.4188 19.1345 45.17 19.122C45.0733 19.1094 44.9765 19.1094 44.866 19.0969C44.6033 19.0844 44.3545 19.0594 44.0919 19.0469C44.009 19.0469 43.9261 19.0344 43.8431 19.0344C43.5529 19.0094 43.2626 18.9969 42.9724 18.9719C42.9309 18.9719 42.8756 18.9594 42.8341 18.9594C42.4748 18.9344 42.1016 18.9094 41.7422 18.8843C41.3828 18.8593 41.0235 18.8343 40.6779 18.8093C40.6364 18.8093 40.595 18.8093 40.5535 18.7968C40.2356 18.7718 39.9315 18.7468 39.6275 18.7218C39.5722 18.7218 39.5169 18.7093 39.4616 18.7093C39.1575 18.6843 38.8534 18.6593 38.5493 18.6342C38.5079 18.6342 38.4664 18.6217 38.4249 18.6217C38.0656 18.5967 37.7062 18.5592 37.3468 18.5342C36.9875 18.5092 36.6143 18.4717 36.2549 18.4467C36.2273 18.4467 36.2134 18.4467 36.1858 18.4467C35.8679 18.4216 35.5362 18.3841 35.2183 18.3591C35.163 18.3591 35.1215 18.3466 35.0662 18.3466C34.7483 18.3216 34.4166 18.2841 34.0987 18.2591C34.0849 18.2591 34.071 18.2591 34.0434 18.2591C33.6702 18.2216 33.297 18.184 32.9238 18.159C32.5783 18.1215 32.2327 18.0965 31.8872 18.059C31.8319 18.059 31.7766 18.0465 31.7213 18.0465C31.3896 18.009 31.0717 17.984 30.74 17.9464C30.7261 17.9464 30.7123 17.9464 30.6985 17.9464C30.3529 17.9089 30.0074 17.8714 29.6618 17.8339C29.6204 17.8339 29.5789 17.8214 29.5374 17.8214C29.2057 17.7839 28.8878 17.7464 28.5699 17.7213C28.5146 17.7088 28.4455 17.7088 28.3902 17.6963C28.0447 17.6588 27.6853 17.6213 27.3536 17.5838C27.3121 17.5838 27.2568 17.5713 27.2154 17.5713C26.9113 17.5338 26.621 17.4962 26.3169 17.4712C26.2478 17.4587 26.1787 17.4587 26.0958 17.4462C25.7641 17.4087 25.4323 17.3712 25.1144 17.3212C25.073 17.3212 25.0315 17.3087 24.99 17.3087C24.6168 17.2587 24.2575 17.2211 23.8981 17.1711C23.8566 17.1711 23.8152 17.1586 23.7875 17.1586C23.4143 17.1086 23.055 17.0586 22.6956 17.021C22.6403 17.0085 22.5712 17.0085 22.5159 16.996C22.1565 16.946 21.811 16.896 21.4654 16.846C21.4102 16.8335 21.3549 16.8335 21.2996 16.821C20.9402 16.7709 20.5947 16.7209 20.2353 16.6709C20.1938 16.6584 20.1385 16.6584 20.0971 16.6459C19.9036 16.6209 19.7239 16.5959 19.5304 16.5583C19.4613 16.5458 19.406 16.5333 19.3369 16.5333C19.171 16.5083 18.9913 16.4833 18.8255 16.4583C18.7564 16.4458 18.6872 16.4333 18.6181 16.4208C18.4523 16.3958 18.2864 16.3708 18.1344 16.3457C18.0653 16.3332 17.9961 16.3207 17.927 16.3082C17.7612 16.2832 17.5953 16.2582 17.4294 16.2332C17.3742 16.2207 17.305 16.2082 17.2498 16.2082C17.0701 16.1832 16.8904 16.1457 16.7107 16.1207C16.6692 16.1082 16.6278 16.1081 16.5863 16.0956C16.3652 16.0581 16.1578 16.0206 15.9367 15.9831C15.4944 15.9081 15.0659 15.833 14.6374 15.758C14.6236 15.758 14.6098 15.758 14.5959 15.7455C14.3195 15.6955 14.0569 15.6454 13.7943 15.5954C13.7666 15.5954 13.739 15.5829 13.7252 15.5829C13.4626 15.5329 13.1861 15.4829 12.9235 15.4329C12.8959 15.4329 12.8682 15.4203 12.8406 15.4203C12.5918 15.3703 12.343 15.3203 12.0942 15.2703C12.0804 15.2703 12.0665 15.2703 12.0527 15.2578C11.8039 15.2078 11.5551 15.1577 11.3063 15.0952C11.2649 15.0827 11.2372 15.0827 11.1958 15.0702C10.712 14.9702 10.242 14.8576 9.78592 14.7576C9.74445 14.7451 9.70299 14.7325 9.66152 14.7325C9.44037 14.6825 9.21922 14.6325 8.99807 14.57C8.98425 14.57 8.98425 14.57 8.97043 14.57C8.7631 14.52 8.55577 14.4699 8.36226 14.4199C8.3208 14.4074 8.27933 14.3949 8.23787 14.3949C8.03054 14.3449 7.83703 14.2949 7.64352 14.2448C7.61588 14.2323 7.58824 14.2323 7.56059 14.2198C7.39473 14.1698 7.21504 14.1323 7.04918 14.0823C7.00771 14.0698 6.96625 14.0573 6.93861 14.0448C6.75892 13.9947 6.57923 13.9447 6.39955 13.8947C6.35808 13.8822 6.33044 13.8697 6.3028 13.8697C6.15076 13.8197 5.99871 13.7821 5.84667 13.7321C5.81903 13.7196 5.79139 13.7196 5.76374 13.7071C5.59788 13.6571 5.43202 13.6071 5.27998 13.5445C5.23851 13.532 5.21086 13.5195 5.18322 13.507C5.03118 13.457 4.87914 13.407 4.7271 13.3445H4.71328C4.56124 13.2944 4.40919 13.2319 4.25715 13.1819C4.22951 13.1694 4.20187 13.1569 4.17422 13.1444C4.02218 13.0943 3.88396 13.0318 3.74574 12.9818C3.73192 12.9818 3.7181 12.9693 3.70427 12.9693C3.57988 12.9193 3.45548 12.8693 3.33108 12.8067C3.30344 12.7942 3.28962 12.7817 3.26197 12.7817C3.13758 12.7317 3.01318 12.6692 2.88878 12.6191C2.87496 12.6066 2.86114 12.6066 2.83349 12.5941C2.72292 12.5441 2.61234 12.4941 2.50177 12.4316C2.48795 12.4191 2.47412 12.4191 2.4603 12.4065C2.34973 12.344 2.23915 12.294 2.12858 12.2315C2.11475 12.219 2.08711 12.2065 2.07329 12.2065C1.96271 12.1439 1.86596 12.0939 1.7692 12.0314C1.67245 11.9689 1.5757 11.9188 1.49277 11.8563C1.47894 11.8438 1.46512 11.8313 1.4513 11.8313C1.36837 11.7688 1.27162 11.7187 1.18869 11.6562C1.10575 11.5937 1.03664 11.5437 0.967535 11.4811C0.953713 11.4686 0.939892 11.4561 0.92607 11.4561C0.856961 11.3936 0.787848 11.3436 0.73256 11.2811C0.718738 11.2686 0.718741 11.2686 0.704919 11.2561C0.649631 11.206 0.594343 11.156 0.552877 11.0935C0.539055 11.081 0.539053 11.0685 0.525231 11.0685C0.469944 11.0059 0.428478 10.9559 0.387012 10.8934C0.37319 10.8809 0.373193 10.8684 0.359371 10.8684C0.317905 10.8184 0.290259 10.7683 0.248793 10.7183C0.248793 10.7058 0.234974 10.7058 0.234974 10.6933C0.193509 10.6308 0.165863 10.5808 0.138219 10.5182C0.138219 10.5057 0.124396 10.4932 0.124396 10.4807C0.0967526 10.4307 0.0829307 10.3807 0.0552868 10.3182V10.3056C0.0414649 10.2431 0.0276447 10.1931 0.0138228 10.1306C0.0138228 10.1181 0.0138228 10.1056 0.0138228 10.093C8.43778e-07 10.0305 0 9.9805 0 9.91797L0.635809 41.0564C0.635809 41.1314 0.649632 41.2065 0.649632 41.2815C0.649632 41.294 0.649629 41.319 0.663451 41.3315C0.677272 41.4066 0.691097 41.4816 0.704919 41.5566C0.704919 41.5691 0.704919 41.5691 0.704919 41.5816C0.718741 41.6567 0.746385 41.7192 0.774028 41.7942C0.774028 41.8067 0.787851 41.8318 0.787851 41.8443C0.815495 41.9193 0.843136 41.9943 0.884602 42.0694C0.884602 42.0819 0.898425 42.0944 0.898425 42.1069C0.926069 42.1694 0.967533 42.2444 1.009 42.307C1.02282 42.3195 1.02282 42.332 1.03664 42.3445C1.07811 42.4195 1.1334 42.4945 1.18869 42.5696C1.20251 42.5821 1.20251 42.5946 1.21633 42.6071C1.27162 42.6821 1.31308 42.7447 1.36837 42.8197C1.38219 42.8322 1.38219 42.8322 1.39602 42.8447C1.4513 42.9197 1.52041 42.9948 1.58952 43.0698L1.60334 43.0823C1.61717 43.0948 1.61716 43.0948 1.63099 43.1073C1.70009 43.1823 1.78303 43.2574 1.85214 43.3324C1.93507 43.4074 2.018 43.4825 2.10093 43.57C2.11476 43.5825 2.12858 43.595 2.1424 43.6075C2.23915 43.6825 2.32208 43.7576 2.41884 43.8451C2.51559 43.9202 2.61234 43.9952 2.72292 44.0702C2.73674 44.0827 2.75056 44.0952 2.77821 44.1077C2.88878 44.1828 2.99936 44.2578 3.10993 44.3328C3.12375 44.3453 3.13757 44.3453 3.1514 44.3578C3.26197 44.4329 3.37255 44.4954 3.48313 44.5704C3.49695 44.583 3.51077 44.5954 3.53841 44.6079C3.66281 44.683 3.7872 44.758 3.9116 44.8331C3.93925 44.8456 3.95307 44.8581 3.98071 44.8706C4.10511 44.9456 4.22951 45.0081 4.35391 45.0832C4.36773 45.0832 4.36773 45.0957 4.38155 45.0957C4.38155 45.0957 4.38155 45.0957 4.39537 45.0957C4.53359 45.1707 4.67181 45.2457 4.82385 45.3208C4.85149 45.3333 4.87914 45.3458 4.90678 45.3708C5.05882 45.4458 5.19704 45.5209 5.3629 45.5959C5.3629 45.5959 5.37673 45.5959 5.37673 45.6084C5.52877 45.6834 5.68081 45.7459 5.83285 45.821C5.87432 45.8335 5.90196 45.846 5.94343 45.871C6.09547 45.946 6.26133 46.0086 6.42719 46.0836C6.45484 46.0961 6.48248 46.1086 6.51013 46.1211C6.59306 46.1586 6.66216 46.1836 6.7451 46.2212C6.81421 46.2462 6.89714 46.2837 6.96625 46.3087C7.00771 46.3212 7.03536 46.3337 7.07683 46.3462C7.25651 46.4212 7.42237 46.4838 7.60206 46.5588C7.64352 46.5713 7.68499 46.5838 7.71263 46.6088C7.87849 46.6713 8.04436 46.7339 8.21022 46.7964C8.23787 46.8089 8.26551 46.8214 8.29315 46.8214C8.48666 46.8965 8.68017 46.959 8.87368 47.034C8.8875 47.034 8.90132 47.0465 8.92896 47.0465C8.95661 47.059 8.97043 47.059 8.99807 47.0715C9.19158 47.134 9.39891 47.2091 9.60624 47.2716C9.62006 47.2716 9.62006 47.2716 9.63388 47.2841C9.85503 47.3591 10.0624 47.4217 10.2835 47.4967C10.325 47.5092 10.3664 47.5217 10.4079 47.5342C10.864 47.6718 11.3202 47.8093 11.8039 47.9469C11.8454 47.9594 11.873 47.9719 11.9145 47.9719C12.1633 48.0469 12.3983 48.1095 12.6471 48.1845C12.6609 48.1845 12.6747 48.197 12.6885 48.197C12.9373 48.2595 13.1861 48.3346 13.4349 48.3971C13.4626 48.4096 13.4902 48.4096 13.5178 48.4221C13.7805 48.4846 14.0431 48.5597 14.3057 48.6222C14.3333 48.6347 14.361 48.6347 14.3748 48.6472C14.6374 48.7097 14.9 48.7848 15.1627 48.8473C15.1765 48.8473 15.1765 48.8473 15.1903 48.8598H15.2041C15.8261 49.0099 16.4757 49.1599 17.1392 49.31C17.1806 49.3225 17.2221 49.3225 17.2636 49.335C17.4433 49.3725 17.6091 49.41 17.7888 49.4476C17.8165 49.4476 17.8303 49.4601 17.8579 49.4601C17.8994 49.4726 17.9409 49.4726 17.9685 49.4851C18.1344 49.5226 18.3002 49.5601 18.4523 49.5851C18.5214 49.5976 18.5905 49.6101 18.6596 49.6226C18.8255 49.6601 18.9775 49.6851 19.1434 49.7227C19.1848 49.7352 19.2263 49.7352 19.2678 49.7477C19.2954 49.7477 19.323 49.7602 19.3507 49.7602C19.5166 49.7977 19.6824 49.8227 19.8483 49.8602C19.9174 49.8727 19.9865 49.8852 20.0418 49.8977C20.2215 49.9353 20.415 49.9728 20.5947 50.0103C20.6361 50.0228 20.6776 50.0228 20.7191 50.0353H20.7329C21.0784 50.0978 21.424 50.1729 21.7833 50.2354C21.811 50.2354 21.8525 50.2479 21.8801 50.2479C21.9077 50.2479 21.9354 50.2604 21.9492 50.2604C22.2948 50.3229 22.6403 50.3855 22.9859 50.448C23.0135 50.448 23.0411 50.4605 23.0688 50.4605C23.1103 50.4605 23.1379 50.473 23.1794 50.473C23.5111 50.5355 23.8566 50.598 24.2022 50.6481C24.2298 50.6481 24.2436 50.6606 24.2713 50.6606C24.2851 50.6606 24.2989 50.6606 24.2989 50.6606C24.3266 50.6606 24.3542 50.6731 24.3819 50.6731C24.7412 50.7356 25.1006 50.7981 25.46 50.8607C25.4876 50.8607 25.5153 50.8732 25.5429 50.8732C25.5567 50.8732 25.5706 50.8732 25.5844 50.8857C25.9023 50.9357 26.234 50.9857 26.5519 51.0482C26.5796 51.0482 26.6072 51.0607 26.6348 51.0607C26.6763 51.0732 26.7316 51.0732 26.7731 51.0858C27.0633 51.1358 27.3536 51.1733 27.6577 51.2233C27.6991 51.2233 27.7268 51.2358 27.7682 51.2358C27.7821 51.2358 27.7959 51.2358 27.8097 51.2483C28.1553 51.2983 28.5008 51.3484 28.8464 51.3984C28.874 51.3984 28.8878 51.4109 28.9155 51.4109C28.9569 51.4109 28.9984 51.4234 29.026 51.4234C29.3439 51.4734 29.6618 51.5109 29.9936 51.561C30.0212 51.561 30.0489 51.5735 30.0765 51.5735C30.0903 51.5735 30.1041 51.5735 30.118 51.5735C30.4497 51.6235 30.7952 51.6735 31.1408 51.711H31.1546C31.1684 51.711 31.1823 51.711 31.1961 51.7235C31.514 51.761 31.8319 51.8111 32.1498 51.8486C32.1774 51.8486 32.2051 51.8611 32.2465 51.8611C32.2742 51.8611 32.3018 51.8736 32.3295 51.8736C32.6612 51.9236 33.0068 51.9611 33.3385 52.0112C33.3385 52.0112 33.3385 52.0112 33.3523 52.0112C33.7117 52.0612 34.0849 52.1112 34.458 52.1487H34.4719C34.4857 52.1487 34.4995 52.1487 34.5133 52.1487C34.8312 52.1862 35.1491 52.2238 35.467 52.2613C35.4947 52.2613 35.5223 52.2613 35.5362 52.2738C35.5638 52.2738 35.5914 52.2738 35.6191 52.2863C35.937 52.3238 36.2549 52.3613 36.5866 52.3988C36.6004 52.3988 36.6143 52.3988 36.6281 52.3988H36.6419C37.3468 52.4864 38.0656 52.5614 38.7843 52.6364C38.7981 52.6364 38.812 52.6364 38.8258 52.6364C38.8534 52.6364 38.8811 52.6364 38.9087 52.6489C39.2128 52.6864 39.5031 52.7114 39.8071 52.749C39.8348 52.749 39.8624 52.7615 39.9039 52.7615C39.9315 52.7615 39.9592 52.7615 39.9868 52.774C40.2909 52.8115 40.595 52.8365 40.8991 52.874C40.9267 52.874 40.9544 52.874 40.982 52.8865C40.9958 52.8865 41.0096 52.8865 41.0235 52.8865C41.7284 52.9616 42.4471 53.0241 43.1659 53.0991C43.1797 53.0991 43.1797 53.0991 43.1935 53.0991C43.2212 53.0991 43.2626 53.1116 43.2903 53.1116C43.5805 53.1366 43.8708 53.1617 44.161 53.1992C44.1887 53.1992 44.2163 53.1992 44.244 53.2117C44.2993 53.2117 44.3545 53.2242 44.4098 53.2242C44.6586 53.2492 44.9212 53.2742 45.17 53.2992C45.2253 53.2992 45.2668 53.3117 45.3221 53.3117C45.3774 53.3117 45.4188 53.3242 45.4741 53.3242C45.7229 53.3492 45.9717 53.3617 46.2205 53.3867C46.2896 53.3867 46.3449 53.3993 46.414 53.3993C46.4555 53.3993 46.4831 53.4118 46.5246 53.4118C46.7872 53.4368 47.036 53.4493 47.2986 53.4743C47.3677 53.4743 47.4368 53.4868 47.5059 53.4868C47.5336 53.4868 47.5474 53.4868 47.5751 53.4868C47.8653 53.5118 48.1556 53.5368 48.4458 53.5618C48.4873 53.5618 48.5426 53.5743 48.5841 53.5743H48.5979C48.9434 53.5993 49.289 53.6243 49.6345 53.6619C49.6483 53.6619 49.6483 53.6619 49.6622 53.6619C49.7313 53.6619 49.8142 53.6744 49.8833 53.6744C50.1459 53.6994 50.3947 53.7119 50.6573 53.7369C50.685 53.7369 50.7126 53.7369 50.7541 53.7494C50.8509 53.7619 50.9476 53.7619 51.0582 53.7744C51.224 53.7869 51.3761 53.7994 51.542 53.8119C51.5696 53.8119 51.6111 53.8119 51.6387 53.8244C51.7078 53.8244 51.7769 53.8369 51.8599 53.8369C52.2192 53.8619 52.5786 53.887 52.9518 53.912C53.09 53.9245 53.242 53.937 53.3803 53.937C53.477 53.9495 53.5876 53.9495 53.6843 53.962C53.8087 53.9745 53.9193 53.9745 54.0437 53.987C54.4031 54.012 54.7763 54.037 55.1495 54.062C55.2324 54.062 55.3292 54.0745 55.4121 54.0745C55.5227 54.0871 55.6332 54.087 55.73 54.0996C55.9097 54.1121 56.0755 54.1246 56.2552 54.1371C56.6146 54.1621 56.9601 54.1746 57.3195 54.1996C57.3748 54.1996 57.4163 54.1996 57.4715 54.2121C57.5683 54.2121 57.6651 54.2246 57.7756 54.2246C57.983 54.2371 58.1903 54.2496 58.3976 54.2621C58.757 54.2871 59.1164 54.2996 59.4757 54.3247C59.5034 54.3247 59.531 54.3247 59.5448 54.3247C59.6416 54.3247 59.7384 54.3372 59.8351 54.3372C60.0701 54.3497 60.3189 54.3622 60.5538 54.3747C60.8994 54.3872 61.2588 54.4122 61.6181 54.4247C61.6319 54.4247 61.632 54.4247 61.6458 54.4247C61.7425 54.4247 61.8393 54.4372 61.9222 54.4372C62.171 54.4497 62.4336 54.4622 62.6824 54.4747C63.028 54.4872 63.3735 54.5122 63.7329 54.5247C63.8296 54.5247 63.9402 54.5372 64.0508 54.5372C64.3134 54.5497 64.576 54.5623 64.8386 54.5748C65.1704 54.5873 65.5159 54.5998 65.8615 54.6123C65.972 54.6123 66.0826 54.6248 66.1932 54.6248C66.4282 54.6373 66.6769 54.6498 66.9119 54.6498C67.2575 54.6623 67.603 54.6748 67.9624 54.6873C67.9762 54.6873 67.99 54.6873 68.0039 54.6873C68.1283 54.6873 68.2527 54.6998 68.3771 54.6998C68.5844 54.7123 68.8055 54.7123 69.0129 54.7248C69.3308 54.7373 69.6625 54.7498 69.9942 54.7623C70.0357 54.7623 70.091 54.7623 70.1324 54.7623C70.2568 54.7623 70.3951 54.7748 70.5194 54.7748C70.6715 54.7748 70.8235 54.7873 70.9618 54.7873C71.2935 54.7999 71.6114 54.8124 71.9431 54.8124C72.0537 54.8124 72.1643 54.8124 72.2748 54.8249C72.4131 54.8249 72.5374 54.8374 72.6757 54.8374C72.7586 54.8374 72.8554 54.8374 72.9383 54.8499C73.2562 54.8624 73.5741 54.8624 73.892 54.8749C74.0993 54.8749 74.3066 54.8874 74.514 54.8874C74.6107 54.8874 74.7075 54.8874 74.8042 54.8999C74.8181 54.8999 74.8319 54.8999 74.8457 54.8999C75.1636 54.9124 75.4815 54.9124 75.7994 54.9249C76.1173 54.9249 76.4352 54.9374 76.7531 54.9374C76.7808 54.9374 76.8084 54.9374 76.8222 54.9374C76.9052 54.9374 76.9881 54.9374 77.0572 54.9374C77.2507 54.9374 77.4442 54.9499 77.6377 54.9499C77.9418 54.9499 78.2321 54.9624 78.5362 54.9624C78.702 54.9624 78.8541 54.9624 79.0199 54.9749C79.1029 54.9749 79.172 54.9749 79.2549 54.9749C79.3102 54.9749 79.3655 54.9749 79.4346 54.9749C79.7387 54.9749 80.0289 54.9874 80.333 54.9874C80.6233 54.9874 80.9135 54.9874 81.19 54.9999C81.2453 54.9999 81.3005 54.9999 81.342 54.9999C81.3973 54.9999 81.4526 54.9999 81.5079 54.9999C81.6876 54.9999 81.8672 54.9999 82.0469 54.9999C82.3372 54.9999 82.6275 54.9999 82.9177 54.9999C83.1527 54.9999 83.3877 54.9999 83.6365 54.9999C83.6641 54.9999 83.6917 54.9999 83.7194 54.9999C83.747 54.9999 83.7608 54.9999 83.7885 54.9999C83.9682 54.9999 84.1479 54.9999 84.3414 54.9999C84.521 54.9999 84.7007 54.9999 84.8942 54.9999C85.0739 54.9999 85.2536 54.9999 85.4471 54.9999C85.6268 54.9999 85.8065 54.9999 86 54.9999C86.1106 54.9999 86.2073 54.9999 86.3179 54.9999C86.4285 54.9999 86.5252 54.9999 86.6358 54.9999C86.7464 54.9999 86.8431 54.9999 86.9399 54.9999C87.0366 54.9999 87.1472 54.9999 87.244 54.9999C87.5204 54.9999 87.7969 54.9999 88.0871 54.9999C88.1424 54.9999 88.1977 54.9999 88.2392 54.9999C88.2806 54.9999 88.3221 54.9999 88.3774 54.9999C88.5571 54.9999 88.7367 54.9999 88.9303 54.9999C89.2067 54.9999 89.4831 54.9999 89.7596 54.9999C90.0222 54.9999 90.2848 54.9999 90.5336 54.9999C90.5612 54.9999 90.5751 54.9999 90.6027 54.9999C90.8791 54.9999 91.1418 54.9999 91.4182 54.9874C91.6946 54.9874 91.9711 54.9874 92.2475 54.9749C92.3996 54.9749 92.5654 54.9749 92.7175 54.9749C92.7866 54.9749 92.8557 54.9749 92.9248 54.9749C92.9801 54.9749 93.0215 54.9749 93.0768 54.9749C93.3533 54.9749 93.6297 54.9624 93.9061 54.9624C94.224 54.9624 94.542 54.9499 94.8599 54.9499C94.9013 54.9499 94.9428 54.9499 94.9704 54.9499C95.0672 54.9499 95.1639 54.9499 95.2469 54.9499C95.4266 54.9499 95.62 54.9374 95.7997 54.9374C96.1176 54.9374 96.4356 54.9249 96.7535 54.9249C96.8779 54.9249 96.9884 54.9249 97.1128 54.9124C97.2372 54.9124 97.3478 54.9124 97.4722 54.8999C97.5551 54.8999 97.6242 54.8999 97.7072 54.8999C98.0251 54.8874 98.343 54.8874 98.647 54.8749C98.8682 54.8749 99.1032 54.8624 99.3243 54.8624C99.4211 54.8624 99.5178 54.8624 99.6146 54.8499C99.9187 54.8374 100.223 54.8374 100.527 54.8249C100.845 54.8124 101.149 54.8124 101.467 54.7999C101.494 54.7999 101.522 54.7999 101.55 54.7999C101.757 54.7873 101.964 54.7873 102.172 54.7748C102.448 54.7623 102.725 54.7623 103.015 54.7498C103.167 54.7498 103.319 54.7373 103.485 54.7373C103.734 54.7248 103.968 54.7248 104.217 54.7123C104.328 54.7123 104.438 54.6998 104.549 54.6998C104.922 54.6873 105.295 54.6748 105.669 54.6623C105.876 54.6498 106.083 54.6498 106.277 54.6373C106.705 54.6248 107.134 54.5998 107.562 54.5873C107.659 54.5873 107.742 54.5748 107.839 54.5748C108.115 54.5623 108.378 54.5497 108.64 54.5372C109.027 54.5247 109.401 54.4997 109.788 54.4872C110.05 54.4747 110.313 54.4622 110.575 54.4497C110.686 54.4497 110.783 54.4372 110.893 54.4372C111.225 54.4247 111.543 54.3997 111.875 54.3872C112.068 54.3747 112.262 54.3622 112.455 54.3622C113.022 54.3372 113.589 54.2996 114.155 54.2621C114.197 54.2621 114.238 54.2621 114.28 54.2496C114.459 54.2371 114.653 54.2246 114.833 54.2121C115.275 54.1871 115.717 54.1621 116.159 54.1371C116.381 54.1246 116.602 54.1121 116.809 54.0996C116.989 54.087 117.182 54.0745 117.362 54.062C117.597 54.0495 117.832 54.0245 118.067 54.012C118.26 53.9995 118.468 53.987 118.661 53.9745C119.214 53.937 119.753 53.8995 120.306 53.8619C120.347 53.8619 120.403 53.8494 120.444 53.8494C120.458 53.8494 120.458 53.8494 120.472 53.8494H120.486C120.5 53.8494 120.513 53.8494 120.541 53.8494C121.108 53.8119 121.661 53.7619 122.227 53.7244C122.255 53.7244 122.269 53.7244 122.296 53.7244C122.31 53.7244 122.31 53.7244 122.324 53.7244C122.877 53.6869 123.416 53.6369 123.969 53.5993C124.01 53.5993 124.038 53.5993 124.079 53.5868C124.093 53.5868 124.121 53.5868 124.135 53.5868C124.66 53.5493 125.199 53.4993 125.71 53.4493C125.752 53.4493 125.78 53.4493 125.821 53.4368C125.849 53.4368 125.876 53.4368 125.904 53.4243C126.429 53.3742 126.941 53.3367 127.466 53.2867C127.493 53.2867 127.521 53.2867 127.549 53.2742C127.59 53.2742 127.618 53.2617 127.659 53.2617C128.544 53.1742 129.428 53.0991 130.299 53.0116C130.327 53.0116 130.355 53.0116 130.382 52.9991C130.41 52.9991 130.424 52.9991 130.451 52.9866C131.336 52.899 132.207 52.8115 133.064 52.7115C133.091 52.7115 133.105 52.7115 133.133 52.699C133.147 52.699 133.16 52.699 133.174 52.699C133.63 52.6489 134.073 52.5989 134.515 52.5489C134.529 52.5489 134.529 52.5489 134.543 52.5489C134.556 52.5489 134.57 52.5489 134.598 52.5489C135.482 52.4488 136.367 52.3488 137.238 52.2362C137.266 52.2362 137.279 52.2362 137.307 52.2237C137.321 52.2237 137.348 52.2237 137.362 52.2112C137.791 52.1612 138.219 52.0987 138.648 52.0487C139.601 51.9236 140.527 51.7986 141.44 51.6735C141.467 51.6735 141.495 51.661 141.523 51.661C141.536 51.661 141.55 51.661 141.578 51.6485C142.006 51.586 142.421 51.5234 142.836 51.4609C142.863 51.4609 142.891 51.4484 142.919 51.4484C142.946 51.4484 142.974 51.4359 143.002 51.4359C143.416 51.3734 143.817 51.3108 144.232 51.2483C144.246 51.2483 144.259 51.2483 144.287 51.2358C144.315 51.2358 144.342 51.2233 144.37 51.2233C144.798 51.1608 145.227 51.0858 145.642 51.0232H145.655C145.669 51.0232 145.683 51.0232 145.697 51.0107C146.112 50.9482 146.526 50.8732 146.941 50.8106C146.955 50.8106 146.982 50.7981 146.996 50.7981C147.01 50.7981 147.024 50.7981 147.038 50.7981C147.121 50.7856 147.203 50.7731 147.286 50.7606C147.438 50.7356 147.59 50.7106 147.743 50.6856C147.756 50.6856 147.784 50.6731 147.798 50.6731C147.867 50.6606 147.95 50.6481 148.019 50.6356C148.116 50.6231 148.226 50.598 148.323 50.5855C148.351 50.5855 148.378 50.573 148.42 50.573C148.517 50.5605 148.613 50.5355 148.71 50.523C148.834 50.498 148.959 50.473 149.083 50.4605C149.18 50.448 149.291 50.423 149.387 50.4105C149.456 50.398 149.526 50.3854 149.608 50.3729C149.636 50.3729 149.664 50.3604 149.691 50.3604C150.037 50.2979 150.383 50.2354 150.714 50.1729C150.742 50.1729 150.756 50.1604 150.783 50.1604C150.811 50.1604 150.839 50.1479 150.88 50.1479C151.226 50.0853 151.571 50.0103 151.917 49.9478C151.917 49.9478 151.917 49.9478 151.931 49.9478H151.944C152.29 49.8727 152.635 49.8102 152.981 49.7352C152.995 49.7352 153.022 49.7227 153.036 49.7227C153.05 49.7227 153.05 49.7227 153.064 49.7227C153.396 49.6476 153.727 49.5851 154.045 49.5101C154.073 49.5101 154.087 49.4976 154.114 49.4976C154.142 49.4976 154.156 49.4851 154.184 49.4851C154.474 49.4225 154.778 49.36 155.054 49.285C155.345 49.2224 155.621 49.1599 155.897 49.0849C155.925 49.0849 155.939 49.0724 155.967 49.0724C155.98 49.0724 155.994 49.0599 156.008 49.0599C156.284 48.9973 156.561 48.9223 156.837 48.8598H156.851C156.865 48.8598 156.879 48.8473 156.893 48.8473C157.155 48.7848 157.418 48.7222 157.667 48.6472C157.68 48.6472 157.694 48.6347 157.708 48.6347C157.722 48.6347 157.722 48.6347 157.736 48.6222C157.985 48.5597 158.22 48.4971 158.468 48.4346H158.482C158.496 48.4346 158.51 48.4346 158.51 48.4221C158.731 48.3596 158.952 48.3095 159.159 48.247C159.187 48.247 159.201 48.2345 159.229 48.2345C159.242 48.2345 159.256 48.222 159.284 48.222C159.74 48.097 160.182 47.9719 160.611 47.8469C160.625 47.8469 160.638 47.8344 160.666 47.8344C160.694 47.8218 160.721 47.8218 160.735 47.8093C160.901 47.7593 161.053 47.7093 161.219 47.6593C161.247 47.6468 161.274 47.6468 161.302 47.6343C161.316 47.6343 161.329 47.6217 161.343 47.6217C161.73 47.5092 162.104 47.3842 162.477 47.2591C162.491 47.2591 162.504 47.2466 162.518 47.2466C162.546 47.2341 162.573 47.2216 162.601 47.2216C162.739 47.1716 162.878 47.134 163.016 47.084C163.043 47.0715 163.071 47.059 163.099 47.059C163.126 47.0465 163.14 47.0465 163.168 47.034C163.292 46.9965 163.417 46.9465 163.541 46.9089C163.569 46.8964 163.61 46.8839 163.638 46.8714C163.652 46.8714 163.652 46.8589 163.665 46.8589C163.831 46.7964 163.983 46.7464 164.135 46.6838C164.149 46.6838 164.163 46.6713 164.177 46.6713C164.315 46.6213 164.439 46.5713 164.578 46.5213C164.591 46.5213 164.605 46.5088 164.619 46.5088C164.647 46.4963 164.688 46.4838 164.716 46.4713C164.813 46.4337 164.909 46.3962 165.006 46.3587C165.034 46.3462 165.061 46.3337 165.089 46.3337C165.117 46.3212 165.144 46.3087 165.172 46.2962C165.213 46.2837 165.255 46.2587 165.283 46.2462C165.324 46.2211 165.379 46.2086 165.421 46.1836C165.448 46.1711 165.49 46.1586 165.518 46.1461C165.531 46.1336 165.559 46.1336 165.573 46.1211C165.67 46.0836 165.752 46.0461 165.849 46.0086C165.877 45.9961 165.918 45.9835 165.946 45.971C165.96 45.971 165.96 45.9585 165.974 45.9585C166.098 45.896 166.236 45.846 166.361 45.7835C166.361 45.7835 166.374 45.7835 166.374 45.771C166.499 45.7209 166.609 45.6584 166.72 45.6084C166.734 45.6084 166.734 45.5959 166.748 45.5959C166.775 45.5834 166.803 45.5709 166.831 45.5584C166.914 45.5208 166.996 45.4833 167.066 45.4458C167.079 45.4333 167.093 45.4333 167.107 45.4208C167.135 45.4083 167.148 45.3958 167.176 45.3833C167.245 45.3458 167.328 45.3083 167.397 45.2707C167.411 45.2582 167.439 45.2457 167.453 45.2457C167.466 45.2332 167.494 45.2207 167.508 45.2207C167.577 45.1832 167.66 45.1457 167.729 45.1082C167.757 45.0957 167.77 45.0832 167.798 45.0707C167.812 45.0582 167.826 45.0581 167.826 45.0456C167.909 45.0081 167.978 44.9581 168.061 44.9206C168.075 44.9081 168.102 44.8956 168.116 44.8831C168.116 44.8831 168.13 44.8831 168.13 44.8706C168.323 44.758 168.517 44.6455 168.697 44.5204C168.71 44.5204 168.71 44.5079 168.71 44.5079C168.793 44.4579 168.876 44.4079 168.945 44.3578L168.959 44.3453C168.973 44.3328 168.987 44.3203 169.001 44.3078C169.07 44.2703 169.125 44.2203 169.18 44.1828C169.194 44.1828 169.194 44.1703 169.208 44.1703C169.222 44.1578 169.236 44.1453 169.249 44.1328C169.305 44.0952 169.36 44.0577 169.415 44.0077C169.429 43.9952 169.443 43.9952 169.443 43.9827C169.457 43.9702 169.471 43.9577 169.484 43.9577C169.54 43.9202 169.581 43.8826 169.636 43.8451C169.65 43.8326 169.664 43.8201 169.678 43.8201C169.692 43.8076 169.692 43.8076 169.706 43.7951C169.761 43.7576 169.802 43.7201 169.844 43.67C169.858 43.6575 169.871 43.645 169.885 43.6325L169.899 43.62C169.954 43.5825 169.996 43.5325 170.037 43.495C170.051 43.4825 170.065 43.47 170.079 43.4575L170.093 43.445C170.148 43.3949 170.189 43.3449 170.245 43.2949C170.245 43.2824 170.258 43.2824 170.258 43.2699C170.369 43.1573 170.48 43.0323 170.576 42.9197C170.59 42.9072 170.59 42.8947 170.604 42.8822C170.645 42.8322 170.673 42.7947 170.715 42.7446L170.728 42.7321C170.742 42.7196 170.742 42.7071 170.756 42.6946C170.784 42.6571 170.811 42.6196 170.839 42.5696C170.839 42.5571 170.853 42.5571 170.853 42.5446C170.867 42.5321 170.867 42.5196 170.88 42.5071C170.908 42.4695 170.922 42.432 170.95 42.3945C170.95 42.382 170.963 42.3695 170.963 42.357C170.963 42.3445 170.977 42.332 170.977 42.3195C170.991 42.282 171.019 42.2444 171.032 42.2069C171.032 42.1944 171.046 42.1819 171.06 42.1694C171.06 42.1569 171.074 42.1569 171.074 42.1444C171.088 42.1069 171.102 42.0694 171.129 42.0318C171.129 42.0193 171.143 42.0068 171.143 41.9818V41.9693C171.157 41.9193 171.171 41.8818 171.198 41.8318C171.198 41.8193 171.212 41.8067 171.212 41.7942C171.212 41.7942 171.212 41.7942 171.212 41.7817C171.226 41.7192 171.254 41.6567 171.267 41.5942C171.267 41.5816 171.267 41.5691 171.267 41.5691C171.281 41.5191 171.295 41.4691 171.295 41.4191V41.4066C171.295 41.3941 171.295 41.3691 171.295 41.3565C171.295 41.319 171.309 41.2815 171.309 41.244C171.309 41.2315 171.309 41.2315 171.309 41.219C171.309 41.2065 171.309 41.2065 171.309 41.194C171.309 41.1815 171.309 41.1815 171.309 41.169C171.309 41.1565 171.309 41.1565 171.309 41.144C171.309 41.1315 171.309 41.1314 171.309 41.1189L171.945 9.9805C172 9.94298 172 9.968 172 10.0055Z\",\n  fill: \"url(#paint0_linear)\"\n});\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M86.0138 0C96.586 0 106.73 0.237654 116.072 0.662945C125.525 1.10074 134.259 1.72618 141.86 2.52672C149.613 3.33978 156.274 4.32796 161.332 5.45373C166.528 6.61703 170.08 7.91792 171.42 9.33139C172.802 10.7949 171.683 12.2334 168.394 13.5843C165.008 14.9727 159.328 16.2486 151.741 17.3619C143.988 18.4876 134.3 19.4258 123.189 20.0762C111.926 20.7392 99.3223 21.1144 86 21.1144C72.6777 21.1144 60.0741 20.7392 48.8109 20.0762C37.6998 19.4258 28.0121 18.4876 20.2592 17.3619C12.6722 16.2611 7.00604 14.9727 3.60637 13.5843C0.317258 12.2334 -0.802145 10.7949 0.579835 9.33139C1.92036 7.91792 5.47204 6.60452 10.6683 5.45373C15.7263 4.32796 22.3875 3.33978 30.1404 2.52672C37.7551 1.72618 46.4892 1.08824 55.9281 0.662945C65.2979 0.237654 75.4417 0 86.0138 0Z\",\n  fill: \"url(#paint1_linear)\"\n});\n\nvar _ref4 = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n  id: \"paint0_linear\",\n  x1: -0.00352459,\n  y1: 32.457,\n  x2: 172.001,\n  y2: 32.457,\n  gradientUnits: \"userSpaceOnUse\"\n}, /*#__PURE__*/React.createElement(\"stop\", {\n  stopColor: \"#1F1E2D\"\n}), /*#__PURE__*/React.createElement(\"stop\", {\n  offset: 0.494792,\n  stopColor: \"#1E1B30\"\n}), /*#__PURE__*/React.createElement(\"stop\", {\n  offset: 1,\n  stopColor: \"#1F1E2D\"\n})), /*#__PURE__*/React.createElement(\"linearGradient\", {\n  id: \"paint1_linear\",\n  x1: 86.0126,\n  y1: 0.00406528,\n  x2: 86.0126,\n  y2: 25.0247,\n  gradientUnits: \"userSpaceOnUse\"\n}, /*#__PURE__*/React.createElement(\"stop\", {\n  stopColor: \"#1F1E2D\"\n}), /*#__PURE__*/React.createElement(\"stop\", {\n  offset: 1,\n  stopColor: \"#2C2A45\"\n})));\n\nfunction SvgStand(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 172,\n    height: 55,\n    viewBox: \"0 0 172 55\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2, _ref3, _ref4);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgStand);\nexport default __webpack_public_path__ + \"static/media/stand.bd77c6b0.svg\";\nexport { ForwardRef as ReactComponent };","import React, { FC } from \"react\";\r\nimport clsx from \"clsx\";\r\n\r\nimport diamondShadow from \"assets/diamonds/diamond-shadow.svg\";\r\nimport { ReactComponent as StandSvg } from \"assets/diamonds/stand.svg\";\r\nimport { isNumber } from \"utils\";\r\n\r\nimport { Diamonds, Diamond, diamondIcons } from \"./config\";\r\nimport { DiamondIndex } from \"./types\";\r\nimport { useSassImport } from \"hooks\";\r\n\r\ninterface Props {\r\n  diamondIndex: DiamondIndex | null;\r\n  isWinCombination?: boolean;\r\n}\r\n\r\nconst diamondToStandColorMap: Record<\r\n  Diamond,\r\n  | \"blueStand\"\r\n  | \"purpleStand\"\r\n  | \"greenStand\"\r\n  | \"yellowStand\"\r\n  | \"redStand\"\r\n  | \"cyanStand\"\r\n  | \"pinkStand\"\r\n> = {\r\n  [Diamond.BLUE]: \"blueStand\",\r\n  [Diamond.PURPLE]: \"purpleStand\",\r\n  [Diamond.GREEN]: \"greenStand\",\r\n  [Diamond.YELLOW]: \"yellowStand\",\r\n  [Diamond.RED]: \"redStand\",\r\n  [Diamond.CYAN]: \"cyanStand\",\r\n  [Diamond.PINK]: \"pinkStand\",\r\n};\r\n\r\nconst Position: FC<Props> = ({ diamondIndex, isWinCombination }) => {\r\n  const styles = useSassImport(() => import(\"./style.module.scss\"));\r\n  const diamond = isNumber(diamondIndex)\r\n    ? Diamonds.getDiamond(diamondIndex)\r\n    : null;\r\n\r\n  const standColorClass = diamond\r\n    ? styles[diamondToStandColorMap[diamond]]\r\n    : \"\";\r\n\r\n  return (\r\n    <div className={styles.root}>\r\n      {diamond !== null ? (\r\n        <>\r\n          <div className={styles.diamond}>\r\n            <img src={diamondIcons[diamond]} alt=\"diamond\" />\r\n          </div>\r\n          <img\r\n            className={clsx(styles.diamondShadow, {\r\n              [styles.greenDiamondShadow]: diamond === Diamond.GREEN,\r\n            })}\r\n            src={diamondShadow}\r\n            alt=\"shadow\"\r\n          />\r\n        </>\r\n      ) : null}\r\n      <div className={styles.stand}>\r\n        <StandSvg\r\n          className={clsx({\r\n            [standColorClass]: isWinCombination,\r\n          })}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Position;\r\n","import React, { FC, useRef, useMemo, CSSProperties } from \"react\";\r\n\r\nimport styles from \"./style.module.scss\";\r\n\r\nconst fieldWidth = 1086;\r\nconst fieldHeight = 220;\r\n\r\nconst minFieldWidth = fieldWidth;\r\nconst scaleCoefficient = 0.01; // experimentally established\r\nconst positionHeight = fieldHeight;\r\ninterface IProps {\r\n  fieldWidthProps?: number;\r\n  classes?: {\r\n    root?: string;\r\n    field?: string;\r\n  };\r\n}\r\nconst Field: FC<IProps> = ({ children, fieldWidthProps, classes }) => {\r\n  const fieldRef = useRef<HTMLDivElement>(null);\r\n\r\n  let zoom = 1;\r\n  if (fieldRef.current) {\r\n    zoom =\r\n      fieldRef.current.offsetWidth / (fieldWidthProps || minFieldWidth) +\r\n      scaleCoefficient;\r\n  }\r\n  const scale = zoom > 1 ? 1 : zoom;\r\n\r\n  const fieldScale = useMemo(() => {\r\n    if (!fieldRef.current) return \"scale(1)\";\r\n    fieldRef.current.style.height = `${(scale * positionHeight).toFixed()}px`;\r\n    return `scale(${scale.toFixed(2)})`;\r\n  }, [scale]);\r\n\r\n  return (\r\n    <div\r\n      ref={fieldRef}\r\n      style={\r\n        {\r\n          [\"--fieldWidth\"]: (fieldWidthProps || minFieldWidth) + \"px\",\r\n        } as CSSProperties\r\n      }\r\n      className={`${styles.root} ${classes?.root ? classes?.root : \"\"}`}>\r\n      <div\r\n        className={`${styles.field} ${classes?.field ? classes?.field : \"\"}`}\r\n        style={{ transform: fieldScale }}>\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Field;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrapperPadding\":\"10px\",\"desktopHeaderSize\":\"64px\",\"bottomButtonsSize\":\"60px\",\"desktopChatWidth\":\"310px\",\"swipedChatWidth\":\"960px\",\"arrBlockWidth\":\"12px\",\"headerHeight\":\"60px\",\"inputPadding\":\"16px\",\"chatPadding\":\"16px\",\"inputHeight\":\"56px\",\"chatWidth\":\"280px\",\"spacing\":\"8px\",\"mobileScreen\":\"600px\",\"feyorraDisableSize\":\"1080px\",\"root\":\"style_root__2SnOQ\",\"infoWrapper\":\"style_infoWrapper__2t_bd\",\"selected\":\"style_selected__1bbn5\",\"combination\":\"style_combination__2-joa\",\"ratio\":\"style_ratio__2hlaF\",\"showInfo\":\"style_showInfo__194n3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrapperPadding\":\"10px\",\"desktopHeaderSize\":\"64px\",\"bottomButtonsSize\":\"60px\",\"desktopChatWidth\":\"310px\",\"swipedChatWidth\":\"960px\",\"arrBlockWidth\":\"12px\",\"headerHeight\":\"60px\",\"inputPadding\":\"16px\",\"chatPadding\":\"16px\",\"inputHeight\":\"56px\",\"chatWidth\":\"280px\",\"spacing\":\"8px\",\"mobileScreen\":\"600px\",\"feyorraDisableSize\":\"1080px\",\"root\":\"style_root__3WnvS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrapperPadding\":\"10px\",\"desktopHeaderSize\":\"64px\",\"bottomButtonsSize\":\"60px\",\"desktopChatWidth\":\"310px\",\"swipedChatWidth\":\"960px\",\"arrBlockWidth\":\"12px\",\"headerHeight\":\"60px\",\"inputPadding\":\"16px\",\"chatPadding\":\"16px\",\"inputHeight\":\"56px\",\"chatWidth\":\"280px\",\"spacing\":\"8px\",\"mobileScreen\":\"600px\",\"feyorraDisableSize\":\"1080px\",\"diamonds\":\"style_diamonds__3_LI5\",\"root\":\"style_root__5zyy0\",\"field\":\"style_field__1hUCu\",\"coin\":\"style_coin___kXQB\",\"amount\":\"style_amount__KZA0Q\",\"text\":\"style_text__3GaLy\",\"label\":\"style_label__2-vgK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrapperPadding\":\"10px\",\"desktopHeaderSize\":\"64px\",\"bottomButtonsSize\":\"60px\",\"desktopChatWidth\":\"310px\",\"swipedChatWidth\":\"960px\",\"arrBlockWidth\":\"12px\",\"headerHeight\":\"60px\",\"inputPadding\":\"16px\",\"chatPadding\":\"16px\",\"inputHeight\":\"56px\",\"chatWidth\":\"280px\",\"spacing\":\"8px\",\"mobileScreen\":\"600px\",\"feyorraDisableSize\":\"1080px\",\"diamonds\":\"style_diamonds__3FDJk\",\"withBorderColorless\":\"style_withBorderColorless__3cL9m\",\"withoutBorderColorless\":\"style_withoutBorderColorless__M0YWz\",\"withoutBorderGray\":\"style_withoutBorderGray__2CoGd\",\"withBorderRed\":\"style_withBorderRed__3FIc9\",\"withoutBorderRed\":\"style_withoutBorderRed__3wJPN\",\"withBorderAzure\":\"style_withBorderAzure__117pV\",\"withoutBorderAzure\":\"style_withoutBorderAzure__1gYJK\",\"withBorderPink\":\"style_withBorderPink__nlv3n\",\"withoutBorderPink\":\"style_withoutBorderPink__2lylW\",\"withBorderBlue\":\"style_withBorderBlue__3uG7x\",\"withoutBorderBlue\":\"style_withoutBorderBlue__1W3wR\",\"withBorderGreen\":\"style_withBorderGreen__18PWI\",\"withoutBorderGreen\":\"style_withoutBorderGreen__GmvAp\",\"withBorderPurple\":\"style_withBorderPurple__2Mxav\",\"withoutBorderPurple\":\"style_withoutBorderPurple__2x4Bo\",\"withBorderYellow\":\"style_withBorderYellow__2g57R\",\"withoutBorderYellow\":\"style_withoutBorderYellow__1SRTa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"style_root__2OAcK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"style_root__2XMHX\",\"field\":\"style_field__1q1vA\"};"],"sourceRoot":""}