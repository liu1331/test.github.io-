{"version":3,"sources":["assets/icons/racing-flag.svg","components/Statistics/Tabs/WageringRace/Content.tsx","components/Statistics/Tabs/WageringRace/style.module.scss"],"names":["avatarStyle","width","height","medals","GoldMedal","SilverMedal","CooperMedal","mobileScreen","parseInt","css","scrollStyle","mobileScrollStyle","WageringRace","open","intl","useGetLocale","isMobile","useWindowSize","useFetch","contestFetch","contestData","data","personalFetch","personalData","useState","sended","setSended","leaderBord","setLeaderBord","timeEndOn","setTimeEndOn","myWagered","setMyWagered","useInterval","useEffect","wagering_race_leaderboard","time","wagering_race_ends_on","padEnd","Number","Date","now","my_wagered_amount","formatMessage","getIntlValue","className","root","info","raceBox","src","raceFrag","raceImg","alt","raceTitle","raceText","timeBox","timeTitle","overtime","date","timer","renderer","CountdownRenderer","timeText","wageredAmount","toFixed","tableWrapper","Scrollbar","scrollbarStyle","style","tableTitle","head","values","classes","th","body","rows","map","position","reward_usd","user_name","profile_picture_url","total_wagered_competition","Medal","medal","setPlayerSearchParams","tCellData","clsx","circle","userLogo","userName","avatar","money","td","module","exports"],"mappings":"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","file":"static/js/109.b76f9f4d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/racing-flag.3bd8489e.svg\";","import React, { useEffect, useState } from \"react\";\r\nimport Countdown from \"react-countdown\";\r\nimport { useGetLocale } from \"providers\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { Avatar, LinkWithSearch, Table } from \"components\";\r\nimport { useFetch, useInterval } from \"hooks\";\r\nimport { getIntlValue, useWindowSize } from \"providers\";\r\n\r\nimport { setPlayerSearchParams } from \"components/LinkWithSearch/utils\";\r\nimport raceFrag from \"assets/icons/racing-flag.svg\";\r\nimport { ReactComponent as GoldMedal } from \"assets/icons/gold-medal.svg\";\r\nimport { ReactComponent as SilverMedal } from \"assets/icons/silver-medal.svg\";\r\nimport { ReactComponent as CooperMedal } from \"assets/icons/cooper-medal.svg\";\r\nimport LazyComponentLoader from \"config/LazyComponentLoader\";\r\n\r\nimport { CountdownRenderer } from \"./components/CountdownRenderer\";\r\nimport { WageringType, LeaderboardType, UserWagered } from \"./types\";\r\nimport css from \"./style.module.scss\";\r\n\r\nimport { Scrollbar } from \"components/Scrollbar\";\r\n\r\nconst avatarStyle = { width: 32, height: 32 };\r\nconst medals = [GoldMedal, SilverMedal, CooperMedal];\r\n\r\nconst mobileScreen = parseInt(css.mobileScreen);\r\nconst scrollStyle = { height: 730 };\r\nconst mobileScrollStyle = { height: 375 };\r\ninterface Props {\r\n  open: boolean;\r\n}\r\n\r\nconst WageringRace = ({ open }: Props) => {\r\n  const intl = useGetLocale();\r\n  const { width } = useWindowSize();\r\n  const isMobile = width < mobileScreen;\r\n\r\n  const [contestFetch, { data: contestData }] =\r\n    useFetch<WageringType>(\"statistics/contest\");\r\n  const [personalFetch, { data: personalData }] = useFetch<UserWagered>(\r\n    \"statistics/contest-personal\",\r\n  );\r\n  const [sended, setSended] = useState(false);\r\n  const [leaderBord, setLeaderBord] = useState<LeaderboardType[] | undefined>();\r\n  const [timeEndOn, setTimeEndOn] = useState<number | null>(null);\r\n\r\n  const [myWagered, setMyWagered] = useState<string | undefined>();\r\n\r\n  useInterval(contestFetch, 10000);\r\n  useInterval(personalFetch, 10000);\r\n\r\n  useEffect(() => {\r\n    if (open) {\r\n      if (!sended) {\r\n        contestFetch();\r\n        personalFetch();\r\n\r\n        setSended(true);\r\n      }\r\n\r\n      if (contestData) {\r\n        setLeaderBord(contestData.wagering_race_leaderboard);\r\n        const time = contestData.wagering_race_ends_on.padEnd(13, \"0\");\r\n\r\n        if (Number(time) - Date.now() >= 0) {\r\n          setTimeEndOn(Number(time));\r\n        } else {\r\n          setTimeEndOn(null);\r\n        }\r\n      }\r\n\r\n      if (personalData) {\r\n        setMyWagered(personalData.my_wagered_amount);\r\n      }\r\n    } else {\r\n      if (sended) {\r\n        setSended(false);\r\n      }\r\n    }\r\n  }, [open, contestData, sended, personalData]);\r\n\r\n  const formatMessage = getIntlValue(\r\n    intl,\r\n    \"gameTemplate.statistics.wageringTable.\",\r\n  );\r\n\r\n  return (\r\n    <div className={css.root}>\r\n      <div className={css.info}>\r\n        <div className={css.raceBox}>\r\n          <img src={raceFrag} className={css.raceImg} alt=\"flag\" />\r\n          <span className={css.raceTitle}>{formatMessage(\"wageringRace\")}</span>\r\n          <span className={css.raceText}>{formatMessage(\"text\")}</span>\r\n        </div>\r\n\r\n        <div className={css.timeBox}>\r\n          <p className={css.timeTitle}>{formatMessage(\"timeTitle\")}</p>\r\n          {timeEndOn ? (\r\n            <Countdown\r\n              overtime\r\n              date={timeEndOn}\r\n              className={css.timer}\r\n              renderer={CountdownRenderer}\r\n            />\r\n          ) : (\r\n            <p className={css.timeText}>{formatMessage(\"processing\")}</p>\r\n          )}\r\n        </div>\r\n\r\n        {myWagered ? (\r\n          <div className={css.timeBox}>\r\n            <p className={css.timeTitle}>{formatMessage(\"wageredTitle\")}</p>\r\n            <div className={css.wageredAmount}>\r\n              {Number(myWagered).toFixed(5)}\r\n              <span>USD</span>\r\n            </div>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n\r\n      <div className={css.tableWrapper}>\r\n        <Scrollbar\r\n          className={css.scrollbarStyle}\r\n          style={isMobile ? mobileScrollStyle : scrollStyle}>\r\n          <div className={css.tableTitle}>\r\n            {formatMessage(\"currentRanking\")}\r\n          </div>\r\n\r\n          <Table\r\n            head={{\r\n              values: [\r\n                formatMessage(\"position\"),\r\n                formatMessage(\"user\"),\r\n                formatMessage(\"reward\"),\r\n                formatMessage(\"total\"),\r\n              ],\r\n              classes: {\r\n                th: css.th,\r\n              },\r\n            }}\r\n            body={{\r\n              rows: leaderBord?.map(\r\n                ({\r\n                  position,\r\n                  reward_usd,\r\n                  user_name,\r\n                  profile_picture_url,\r\n                  total_wagered_competition,\r\n                }) => {\r\n                  const Medal = medals[position - 1];\r\n\r\n                  return {\r\n                    values: [\r\n                      Medal ? <Medal className={css.medal} /> : position,\r\n\r\n                      <LinkWithSearch\r\n                        {...setPlayerSearchParams(user_name)}\r\n                        className={css.tCellData}>\r\n                        <div className={clsx(css.circle, css.userLogo)}>\r\n                          <Avatar\r\n                            userName={user_name}\r\n                            style={avatarStyle}\r\n                            avatar={profile_picture_url}\r\n                          />\r\n                        </div>\r\n                        {user_name}\r\n                      </LinkWithSearch>,\r\n\r\n                      <span className={css.money}>{reward_usd} USD</span>,\r\n\r\n                      <span className={css.money}>\r\n                        {total_wagered_competition} USD\r\n                      </span>,\r\n                    ],\r\n                  };\r\n                },\r\n              ),\r\n              classes: {\r\n                td: css.td,\r\n              },\r\n            }}\r\n          />\r\n        </Scrollbar>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WageringRace;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrapperPadding\":\"10px\",\"desktopHeaderSize\":\"64px\",\"bottomButtonsSize\":\"60px\",\"desktopChatWidth\":\"310px\",\"swipedChatWidth\":\"960px\",\"arrBlockWidth\":\"12px\",\"headerHeight\":\"60px\",\"inputPadding\":\"16px\",\"chatPadding\":\"16px\",\"inputHeight\":\"56px\",\"chatWidth\":\"280px\",\"spacing\":\"8px\",\"mobileScreen\":\"600px\",\"feyorraDisableSize\":\"1080px\",\"root\":\"style_root__1hU76\",\"info\":\"style_info__3n4z8\",\"raceImg\":\"style_raceImg__24L28\",\"raceTitle\":\"style_raceTitle__2fp7G\",\"raceText\":\"style_raceText__1n5_V\",\"raceBox\":\"style_raceBox__1j2I9\",\"tableWrapper\":\"style_tableWrapper__3OM9Y\",\"tCell\":\"style_tCell__s_OKk\",\"tableTitle\":\"style_tableTitle__28ddh\",\"tCellData\":\"style_tCellData__rDrdH\",\"circle\":\"style_circle__3g-br\",\"userLogo\":\"style_userLogo__3CEwX\",\"medal\":\"style_medal__1m9Qw\",\"timeBox\":\"style_timeBox__NERJD\",\"timeTitle\":\"style_timeTitle__2Qt98\",\"timeText\":\"style_timeText__3AyC_\",\"wageredAmount\":\"style_wageredAmount__3qdNm\",\"timer\":\"style_timer__2vxKr\",\"th\":\"style_th__1nde8\",\"td\":\"style_td__2_lrt\",\"money\":\"style_money__1jz1X\"};"],"sourceRoot":""}