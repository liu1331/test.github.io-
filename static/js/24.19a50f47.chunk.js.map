{"version":3,"sources":["hooks/useFetch/fetchToken.ts"],"names":["resolvers","memoizedIsTokenRefreshing","isTokenRefreshing","Promise","resolve","reject","push","refreshToken","a","queryHeaders","queryBody","setToken","setExpirationTime","setIsTokenRefreshing","token","window","localStorage","getItem","fetch","process","method","headers","body","JSON","stringify","response","json","data","new_token","Date","now","length","forEach","resolver"],"mappings":"wMAWIA,EAAsC,GAE7BC,EAA4B,SAACC,GACxC,OAAO,IAAIC,SAAa,SAACC,EAASC,GAC5BH,EACFF,EAAUM,KAAKF,GAEfA,GAAQ,OAKRG,EAAY,uCAAG,2CAAAC,EAAA,6DACnBC,EADmB,EACnBA,aACAC,EAFmB,EAEnBA,UACAC,EAHmB,EAGnBA,SACAC,EAJmB,EAInBA,kBACAC,EALmB,EAKnBA,qBAEoB,wBAEpBA,GAAqB,GAEjBC,EAAQC,OAAOC,aAAaC,QAAQ,SAXrB,SAaIC,MAAM,GAAD,OAAIC,4BAAJ,YANR,yBAMwD,CAC1EC,OAAQ,OACRC,QAASZ,EACTa,KAAMC,KAAKC,UAAL,aACJV,SACGJ,MAlBY,cAabe,EAba,gBAsBAA,EAASC,OAtBT,cAwBnB,QAFMC,EAtBa,cAwBnB,IAAIA,OAAJ,EAAIA,EAAMC,aACQ,KAChBhB,EAAkB,GAAD,OAAIiB,KAAKC,MADV,OAEhBnB,EAAQ,OAACgB,QAAD,IAACA,OAAD,EAACA,EAAMC,YAGb5B,EAAU+B,QACZ/B,EAAUgC,SAAQ,SAACC,GAAD,OAAcA,GAAS,MAG3CpB,GAAqB,GAlCF,yBAoCZc,QApCY,IAoCZA,OApCY,EAoCZA,EAAMC,WApCM,4CAAH,sDAuCHrB","file":"static/js/24.19a50f47.chunk.js","sourcesContent":["interface FetchTokenProps {\r\n  isTokenRefreshing: boolean;\r\n  setIsTokenRefreshing: (newValue: boolean) => void;\r\n  queryHeaders?: HeadersInit;\r\n  queryBody: {\r\n    [key: string]: any;\r\n  };\r\n  setToken: (newValue: string) => void;\r\n  setExpirationTime: (newValue: string) => void;\r\n}\r\n\r\nlet resolvers: ((value: any) => void)[] = [];\r\n\r\nexport const memoizedIsTokenRefreshing = (isTokenRefreshing: boolean) => {\r\n  return new Promise<any>((resolve, reject) => {\r\n    if (isTokenRefreshing) {\r\n      resolvers.push(resolve);\r\n    } else {\r\n      resolve(true);\r\n    }\r\n  });\r\n};\r\n\r\nconst refreshToken = async ({\r\n  queryHeaders,\r\n  queryBody,\r\n  setToken,\r\n  setExpirationTime,\r\n  setIsTokenRefreshing,\r\n}: FetchTokenProps) => {\r\n  const queryString = \"account/refresh-token\";\r\n\r\n  setIsTokenRefreshing(true);\r\n\r\n  let token = window.localStorage.getItem(\"token\");\r\n\r\n  const response = await fetch(`${process.env.REACT_APP_URL}/${queryString}`, {\r\n    method: \"POST\",\r\n    headers: queryHeaders,\r\n    body: JSON.stringify({\r\n      token,\r\n      ...queryBody,\r\n    }),\r\n  });\r\n\r\n  const data = await response.json();\r\n\r\n  if (data?.new_token) {\r\n    const oneHour = 60 * 60 * 1000;\r\n    setExpirationTime(`${Date.now() + oneHour}`);\r\n    setToken(data?.new_token);\r\n  }\r\n\r\n  if (resolvers.length) {\r\n    resolvers.forEach((resolver) => resolver(true));\r\n  }\r\n\r\n  setIsTokenRefreshing(false);\r\n\r\n  return data?.new_token;\r\n};\r\n\r\nexport default refreshToken;\r\n"],"sourceRoot":""}