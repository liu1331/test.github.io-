{"version":3,"sources":["pages/Mines/Controller/style.module.scss","pages/Mines/Controller/components/Bet/components/ManualGamePanel/style.module.scss","pages/Mines/Controller/components/Bet/components/Input/style.module.scss","pages/Mines/Controller/components/Bet/components/ManualInputs/style.module.scss","pages/Mines/Controller/components/Bet/components/Button/style.module.scss","pages/Mines/Controller/components/Bet/components/Switch/style.module.scss","pages/Mines/Controller/components/Bet/style.module.scss","games/Mines/Field/style.module.scss","pages/Mines/style.module.scss","components/HotKeys/Listener/index.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","pages/Mines/Controller/components/Reducer/types.ts","pages/Mines/Controller/components/Reducer/actions/actionTypes.ts","pages/Mines/Controller/components/Reducer/actions/fieldManipulation.ts","pages/Mines/Controller/components/Reducer/reducer.ts","pages/Mines/Controller/components/Reducer/context.ts","pages/Mines/Controller/components/Reducer/provider.tsx","pages/Mines/Controller/components/Reducer/index.ts","pages/Mines/Controller/components/Bet/components/Input/index.tsx","pages/Mines/Controller/components/Bet/components/ManualGamePanel/index.tsx","pages/Mines/Controller/components/Bet/components/AutoModeInputs/index.tsx","assets/mines/arrow.svg","pages/Mines/Controller/components/Bet/components/ManualInputs/index.tsx","pages/Mines/Controller/components/Bet/components/Button/index.tsx","pages/Mines/Controller/components/Bet/components/Switch/index.tsx","pages/Mines/Controller/components/Bet/index.tsx","utils/formatBetStringToUSD.ts","pages/Mines/Controller/hooks/useGameSession.ts","pages/Mines/Controller/hooks/useTurn.ts","pages/Mines/Controller/index.tsx","games/Mines/Field/index.tsx","pages/Mines/Game/index.tsx","pages/Mines/page.tsx","pages/Mines/index.tsx","games/Mines/Field/config.ts","games/Mines/Field/Tile/style.module.scss","components/RewardModal/index.tsx","assets/mines/bomb.svg","assets/mines/hidden-bomb.svg","assets/mines/diamond.svg","games/Mines/Field/Tile/index.tsx"],"names":["module","exports","ActiveKeys","useHotKeyListener","callbacks","useHotKeys","isHotkeyActive","isHotKeysPaused","useEffect","keyDownListenerIgnore","event","isKeyboardEvent","target","tagName","toLowerCase","code","preventDefault","keyListener","key","callbackKeyA","callbackKeyS","callbackSpace","callbackKeyQ","callbackKeyW","callbackKeyE","callbackKeyR","callbackKeyT","callbackKeyY","callbackKeyD","window","addEventListener","removeEventListener","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","GameStatus","SET_BET_AMOUNT","SET_ACTUAL_BET","SET_FIELD","SET_MINES_COUNT","SET_MULTIPLIERS","START_GAME","AUTO_GAME","SET_AUTO_BET_IS_START","SET_ON_WIN_MODE","SET_ON_LOSS_MODE","SWEEPED_TURN","BUSTED_TURN","CASHED_OUT","SET_SESSION","SET_NUMBER_OF_BETS","SET_ON_WIN","SET_ON_LOSS","SET_STOP_ON_PROFIT","SET_STOP_ON_LOSS","SET_LOADING_FIELD","REMOVE_LOADING_FIELD","SET_TURN_FETCH_IS_LOADING","SELECT_TILE","SET_COINS_CONFIGURATION","SET_COIN_AMOUNT_FROM_CONFIG","SET_IS_AUTO_MODE","getSweepedField","sweepedTiles","updatingField","getFieldProps","isDiamond","getResultField","minesTiles","bustedTileLocation","resultField","openHidden","getTilesProps","isBomb","getResultFieldForAutoMode","initialMinesControlState","minesCount","betAmount","actualBet","bet","coin","autoMode","onWin","onLoss","numberOfBets","stopOnProfit","stopOnLoss","onLossMode","onWinMode","field","fieldProps","isAutoMode","multipliers","current","gameStatus","NOT_STARTED","autoBetsIsStart","selectedTilesCount","coinsConfiguration","turnFetchIsLoading","autoBetsCount","allowToShowRewardModal","autoModeActionFieldMatching","actions","minesControlReducer","state","action","callLiveStats","data","amount","Number","profit","liveStatsManager","addBet","type","updatedField","tileIndex","isLoading","mines","FIELD_SIZE","result","pickedTile","isSelected","getFieldWithSelectedTiles","IN_PROGRESS","status","liveData","mineLocations","tileLocation","currentMultiplier","multiplier","numberPfBets","config","amountFromConfig","getCoinAmountFromConfig","coinsConfig","configType","selectedCoin","showUSD","toDP","toFixed","dp","mode","defaultValue","controlState","controlDispatch","Context","createContext","MinesControlProvider","children","useReducer","Provider","useMinesControl","useContext","Input","className","props","isWarningModalOpen","GameInput","buttonClass","styles","button","refreshIconClass","refreshIcon","classes","root","input","memo","prevProps","nextProps","disabled","ManualGamePanel","gemsCount","profitOnNextTile","totalProfit","nextMultiplier","cashOutButtonDisabled","cashoutAction","autoPickAction","autoPickButtonDisabled","indicators","topLabel","buttons","onClick","waveColor","AutoModeInputs","showUsdPrefix","onChangeHandler","onBlurHandler","onWinRefresh","onLossRefresh","autoBetModChange","intl","useGetLocale","formatMessage","id","labels","values","onChange","name","nestedComponents","1","withRefreshIcon","onRefreshActionHandler","onBlur","textAdornment","withInfinityIcon","_extends","Object","assign","arguments","source","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","opacity","d","fill","SvgArrow","_ref","svgRef","title","titleId","width","height","viewBox","xmlns","ref","ForwardRef","emptyFunction","ManualModeInputs","totalBetOnChange","totalBetOnBlur","totalBetValue","minesValue","increaseMines","buttonHandlers","warningModal","endAdornment","inputArrowRight","position","startAdornment","inputArrowLeft","readOnly","clsx","minesInput","coinIsLeftward","Button","Switch","leftText","rightText","checked","setChecked","switchWrapper","highlight","option","toggle","switchToggle","track","switchTrack","getProfit","toDecimal","mul","minus","Bet","betButtonAction","startAutoPlayAction","stopAutoPlayAction","betFetchIsLoading","cashoutFetchIsLoading","useState","setIsWarningModalOpen","useCoins","showInUSD","inputOnChangeHandler","useCallback","actionType","normalizedNumberStringOnChange","undefined","inputOnBlurHandler","amountLimit","limitationValue","allowNegativeNumbers","enableRestriction","price","balance","selectedCoinLimits","find","limit","minimum_bet","normalizedNumberStringOnBlur","setAmountFromConfig","reset","coinAmount","getUsdValue","gameInProgress","betButton","betControl","manualControl","ManualInputs","totalBet","max","min","double","half","Warning","isOpen","onClose","callBack","formatBetStringToUSD","message","coinsManager","regex","betValue","match","newValue","coinPriceState","replace","convertAmount","Decimal","isDecimal","div","ROUND_UP","error","errors","checkStopOnPnl","stopOnValue","isLoss","isNumberString","equals","greaterThanOrEqualTo","getAutoModeBetAmount","actualBetAmount","baseBet","onWinOrLossValue","stopAutoMode","add","percent","isStopAutoBets","stopCallBack","useTurn","useLocalStorage","token","useSeed","clientSeed","rotateClientSeed","updateNonce","locale","useLocale","playEffect","useSoundSystemControl","controlFunctions","getSoundEffectNames","gamePathNames","MINES","diamondReveal","mineReveal","getAutoPickedTile","a","sample","default","emptyTiles","filter","turn","isAutoPick","actualTileLocation","isUndefined","fetchBase","variables","language","location","success","notifyBarManager","timeOut","BUSTED","console","log","sweeped_tiles","mine_locations","payout","isSetManually","coinValueUpdate","current_multiplier","next_multiplier","Controller","liveStatsIsOpen","liveStatsHandleClose","setClientSeed","autoModeValues","win","setBetFetchIsLoading","setCashoutFetchIsLoading","findAndSetSession","session_exists","seed","client_seed","bet_amt","sweeped_locations","total_mines","stopAutoGame","play","convertedBetAmount","playCoin","notifyMessage","autoPlay","selectedTiles","reduce","accumulator","tile","push","actualNumberOfBets","sleep","prevActualBetAmount","gt","modeResult","isNumber","toString","cashout","useGameSession","setCoinsConfiguration","getCoinsConfiguration","configResult","coins","LiveStats","handleClose","Field","turnHandler","ratio","isRewardModalOpen","isAutoBet","isUsd","tiles","map","Math","random","Tile","RewardModal","winAmount","rewardWindow","MinesGame","fieldComponent","useMemo","BettingInformation","React","lazy","LazyComponentLoader","MinesPage","isSoundOpen","setIsSoundOpen","hotKeyIsOpen","setHotKeyIsOpen","setLiveStatsIsOpen","bettingInformationIsOpen","setBettingInformationIsOpen","game","optionsWrapper","OptionsButton","withSound","soundOnClick","liveStatOnclick","hotKeysOnClick","bettingInformationOnClick","statisticsWrapper","SoundModal","HotKeys","isMinesPage","withFairness","PageWrapper","Helmet","content","http-equiv","Seed","gameName","freeze","range","tileProps","tilesIndexes","useSassImport","wrapper","hr","draggable","selected","hide","overflowHidden","highlightTile","openTile","loading","CircularProgress","loader","color","open","explode","src","bombUrl","alt","bomb","hiddenBombUrl","hiddenBomb","diamondUrl","diamond","hiddenDiamond"],"mappings":"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","file":"static/js/47.0c749c22.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"style_root__2Wt8B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrapperPadding\":\"10px\",\"desktopHeaderSize\":\"64px\",\"bottomButtonsSize\":\"60px\",\"desktopChatWidth\":\"310px\",\"swipedChatWidth\":\"960px\",\"arrBlockWidth\":\"12px\",\"headerHeight\":\"60px\",\"inputPadding\":\"16px\",\"chatPadding\":\"16px\",\"inputHeight\":\"56px\",\"chatWidth\":\"280px\",\"spacing\":\"8px\",\"mobileScreen\":\"600px\",\"feyorraDisableSize\":\"1080px\",\"mines\":\"style_mines__1453E\",\"root\":\"style_root__3nRXH\",\"indicators\":\"style_indicators__X3rBd\",\"buttons\":\"style_buttons__3a1d4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrapperPadding\":\"10px\",\"desktopHeaderSize\":\"64px\",\"bottomButtonsSize\":\"60px\",\"desktopChatWidth\":\"310px\",\"swipedChatWidth\":\"960px\",\"arrBlockWidth\":\"12px\",\"headerHeight\":\"60px\",\"inputPadding\":\"16px\",\"chatPadding\":\"16px\",\"inputHeight\":\"56px\",\"chatWidth\":\"280px\",\"spacing\":\"8px\",\"mobileScreen\":\"600px\",\"feyorraDisableSize\":\"1080px\",\"mines\":\"style_mines__Q00PX\",\"input\":\"style_input__yPMjJ\",\"button\":\"style_button__fCt6F\",\"refreshIcon\":\"style_refreshIcon__1bLA1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputArrowRight\":\"style_inputArrowRight__bhI7t\",\"inputArrowLeft\":\"style_inputArrowLeft__2q79m\",\"minesInput\":\"style_minesInput__lZcUL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"style_root__1ZZaX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrapperPadding\":\"10px\",\"desktopHeaderSize\":\"64px\",\"bottomButtonsSize\":\"60px\",\"desktopChatWidth\":\"310px\",\"swipedChatWidth\":\"960px\",\"arrBlockWidth\":\"12px\",\"headerHeight\":\"60px\",\"inputPadding\":\"16px\",\"chatPadding\":\"16px\",\"inputHeight\":\"56px\",\"chatWidth\":\"280px\",\"spacing\":\"8px\",\"mobileScreen\":\"600px\",\"feyorraDisableSize\":\"1080px\",\"mines\":\"style_mines__3RCtC\",\"switchWrapper\":\"style_switchWrapper__259OV\",\"option\":\"style_option__3SQmO\",\"highlight\":\"style_highlight__1kyd6\",\"switchToggle\":\"style_switchToggle__2_OFG\",\"switchTrack\":\"style_switchTrack__LHyGi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"style_buttons__8PKP-\",\"betControl\":\"style_betControl__x9I3l\",\"manualControl\":\"style_manualControl__zpmGh\",\"mines\":\"style_mines__1offO\",\"totalBet\":\"style_totalBet__1aUL5\",\"onWin\":\"style_onWin__1OMRe\",\"onLoss\":\"style_onLoss__3sSn8\",\"numberOfBets\":\"style_numberOfBets__38bFu\",\"stopOnProfit\":\"style_stopOnProfit__3znWi\",\"stopOnLoss\":\"style_stopOnLoss__12_qC\",\"warningModal\":\"style_warningModal__3o9L5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"style_root__3wkyZ\",\"field\":\"style_field__3U45L\",\"rewardWindow\":\"style_rewardWindow__3dWBU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrapperPadding\":\"10px\",\"desktopHeaderSize\":\"64px\",\"bottomButtonsSize\":\"60px\",\"desktopChatWidth\":\"310px\",\"swipedChatWidth\":\"960px\",\"arrBlockWidth\":\"12px\",\"headerHeight\":\"60px\",\"inputPadding\":\"16px\",\"chatPadding\":\"16px\",\"inputHeight\":\"56px\",\"chatWidth\":\"280px\",\"spacing\":\"8px\",\"mobileScreen\":\"600px\",\"feyorraDisableSize\":\"1080px\",\"mines\":\"style_mines__gMDuX\",\"optionsWrapper\":\"style_optionsWrapper__1-iyQ\",\"statisticsWrapper\":\"style_statisticsWrapper__3EKeP\",\"game\":\"style_game__24f_D\"};","import { useEffect } from \"react\";\r\nimport { isKeyboardEvent } from \"utils/guards\";\r\nimport { useHotKeys } from \"../Provider\";\r\n\r\nenum ActiveKeys {\r\n  KeyA,\r\n  KeyS,\r\n  Space,\r\n  KeyQ,\r\n  KeyW,\r\n  KeyE,\r\n  KeyR,\r\n  KeyT,\r\n  KeyY,\r\n  KeyD,\r\n}\r\n\r\nexport interface HotKeysCallbacks {\r\n  callbackKeyA?: () => void;\r\n  callbackKeyS?: () => void;\r\n  callbackSpace?: () => void;\r\n  callbackKeyQ?: () => void;\r\n  callbackKeyW?: () => void;\r\n  callbackKeyE?: () => void;\r\n  callbackKeyR?: () => void;\r\n  callbackKeyT?: () => void;\r\n  callbackKeyY?: () => void;\r\n  callbackKeyD?: () => void;\r\n}\r\n\r\nexport const useHotKeyListener = (callbacks: HotKeysCallbacks) => {\r\n  const { isHotkeyActive, isHotKeysPaused } = useHotKeys();\r\n\r\n  useEffect(() => {\r\n    const keyDownListenerIgnore = (event: Event | KeyboardEvent) => {\r\n      if (\r\n        !isKeyboardEvent(event) ||\r\n        !isHotkeyActive ||\r\n        isHotKeysPaused ||\r\n        //@ts-ignore\r\n        event.target.tagName.toLowerCase() !== \"body\"\r\n      ) {\r\n        return;\r\n      }\r\n      const key = event.code;\r\n      if (key in ActiveKeys) {\r\n        event.preventDefault();\r\n      }\r\n    };\r\n\r\n    const keyListener = (event: Event | KeyboardEvent) => {\r\n      if (\r\n        !isKeyboardEvent(event) ||\r\n        !isHotkeyActive ||\r\n        isHotKeysPaused ||\r\n        //@ts-ignore\r\n        event.target.tagName.toLowerCase() !== \"body\"\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      const key = event.code;\r\n      if (key in ActiveKeys) {\r\n        event.preventDefault();\r\n        const {\r\n          callbackKeyA,\r\n          callbackKeyS,\r\n          callbackSpace,\r\n          callbackKeyQ,\r\n          callbackKeyW,\r\n          callbackKeyE,\r\n          callbackKeyR,\r\n          callbackKeyT,\r\n          callbackKeyY,\r\n          callbackKeyD,\r\n        } = callbacks;\r\n        switch (key) {\r\n          case \"KeyA\":\r\n            if (callbackKeyA) callbackKeyA();\r\n            break;\r\n          case \"KeyS\":\r\n            if (callbackKeyS) callbackKeyS();\r\n            break;\r\n          case \"Space\":\r\n            if (callbackSpace) callbackSpace();\r\n            break;\r\n          case \"KeyQ\":\r\n            if (callbackKeyQ) callbackKeyQ();\r\n            break;\r\n          case \"KeyW\":\r\n            if (callbackKeyW) callbackKeyW();\r\n            break;\r\n          case \"KeyE\":\r\n            if (callbackKeyE) callbackKeyE();\r\n            break;\r\n          case \"KeyR\":\r\n            if (callbackKeyR) callbackKeyR();\r\n            break;\r\n          case \"KeyT\":\r\n            if (callbackKeyT) callbackKeyT();\r\n            break;\r\n          case \"KeyY\":\r\n            if (callbackKeyY) callbackKeyY();\r\n            break;\r\n          case \"KeyD\":\r\n            if (callbackKeyD) callbackKeyD();\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"keydown\", keyDownListenerIgnore);\r\n    window.addEventListener(\"keyup\", keyListener);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", keyDownListenerIgnore);\r\n      window.removeEventListener(\"keyup\", keyListener);\r\n    };\r\n  }, [isHotkeyActive, isHotKeysPaused, callbacks]);\r\n};\r\n","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import { Field } from \"games/Mines/Field/types\";\r\nimport { CoinConfiguration, CoinConfigType } from \"utils\";\r\n\r\nimport { actions } from \"./actions\";\r\nimport { Coin } from \"hooks\";\r\nimport { LiveData } from \"components/LiveStats/eventEmitter/types\";\r\n\r\nexport enum GameStatus {\r\n  IN_PROGRESS = \"IN_PROGRESS\",\r\n  BUSTED = \"BUSTED\",\r\n  NOT_STARTED = \"NOT_STARTED\",\r\n  CASHED_OUT = \"CASHED_OUT\",\r\n}\r\n\r\nexport type AutoBetMode = \"change\" | \"reset\" | \"stop\";\r\n\r\nexport interface AutoBetValues {\r\n  onWin: string;\r\n  onLoss: string;\r\n  numberOfBets: string;\r\n  stopOnProfit: string;\r\n  stopOnLoss: string;\r\n  onWinMode: AutoBetMode;\r\n  onLossMode: AutoBetMode;\r\n}\r\n\r\nexport interface Multipliers {\r\n  current: number;\r\n  next: number;\r\n}\r\n\r\nexport interface ActualBet {\r\n  bet: string | number;\r\n  minesCount: string | number;\r\n  coin: string;\r\n}\r\n\r\nexport interface MinesControlState {\r\n  minesCount: number;\r\n  betAmount: string;\r\n  autoMode: AutoBetValues;\r\n  autoBetsIsStart: boolean;\r\n  isAutoMode: boolean;\r\n  field: Field;\r\n  multipliers: Multipliers;\r\n  gameStatus: GameStatus;\r\n  actualBet: ActualBet;\r\n  selectedTilesCount: number;\r\n  coinsConfiguration: Array<CoinConfiguration>;\r\n  turnFetchIsLoading: boolean;\r\n  autoBetsCount: number;\r\n  allowToShowRewardModal: boolean;\r\n}\r\n\r\nexport type MinesControlActions =\r\n  | {\r\n      type:\r\n        | typeof actions.SET_BET_AMOUNT\r\n        | typeof actions.SET_NUMBER_OF_BETS\r\n        | typeof actions.SET_ON_WIN\r\n        | typeof actions.SET_ON_LOSS\r\n        | typeof actions.SET_STOP_ON_LOSS\r\n        | typeof actions.SET_STOP_ON_PROFIT;\r\n      value: string;\r\n    }\r\n  | {\r\n      type: typeof actions.SET_ACTUAL_BET;\r\n      actualBet: ActualBet;\r\n    }\r\n  | {\r\n      type: typeof actions.SET_FIELD;\r\n      field: Field;\r\n    }\r\n  | {\r\n      type: typeof actions.SET_MINES_COUNT;\r\n      mines: number;\r\n    }\r\n  | {\r\n      type: typeof actions.SET_MULTIPLIERS;\r\n      multipliers: Multipliers;\r\n    }\r\n  | {\r\n      type: typeof actions.START_GAME;\r\n      multipliers: Multipliers;\r\n      actualBet: ActualBet;\r\n    }\r\n  | {\r\n      type: typeof actions.SWEEPED_TURN;\r\n      status: GameStatus;\r\n      multipliers: Multipliers;\r\n      sweepedTiles: Array<number>;\r\n      liveData: LiveData;\r\n    }\r\n  | {\r\n      type: typeof actions.BUSTED_TURN;\r\n      status: GameStatus;\r\n      sweepedTiles: Array<number>;\r\n      mineLocations: Array<number>;\r\n      tileLocation: number;\r\n      liveData: LiveData;\r\n    }\r\n  | {\r\n      type: typeof actions.CASHED_OUT;\r\n      status: GameStatus;\r\n      sweepedTiles: Array<number>;\r\n      mineLocations: Array<number>;\r\n      liveData: LiveData;\r\n      currentMultiplier?: number;\r\n    }\r\n  | {\r\n      type: typeof actions.SET_SESSION;\r\n      betAmount: string;\r\n      minesCount: number;\r\n      sweepedTiles: Array<number>;\r\n      multipliers: Multipliers;\r\n      actualBet: ActualBet;\r\n    }\r\n  | {\r\n      type: typeof actions.SET_COINS_CONFIGURATION;\r\n      config: Array<CoinConfiguration>;\r\n    }\r\n  | {\r\n      type: typeof actions.SET_COIN_AMOUNT_FROM_CONFIG;\r\n      selectedCoin: Coin;\r\n      showUSD: boolean;\r\n      configType: CoinConfigType;\r\n    }\r\n  | {\r\n      type:\r\n        | typeof actions.SET_IS_AUTO_MODE\r\n        | typeof actions.SET_TURN_FETCH_IS_LOADING\r\n        | typeof actions.SET_AUTO_BET_IS_START;\r\n      value: boolean;\r\n    }\r\n  | {\r\n      type:\r\n        | typeof actions.SELECT_TILE\r\n        | typeof actions.SET_LOADING_FIELD\r\n        | typeof actions.REMOVE_LOADING_FIELD;\r\n      tileIndex: number;\r\n    }\r\n  | {\r\n      type: typeof actions.AUTO_GAME;\r\n      sweepedTiles: Array<number>;\r\n      mineLocations: Array<number>;\r\n      gameStatus: GameStatus;\r\n      liveData: LiveData;\r\n      actualBet: ActualBet;\r\n      multiplier: number;\r\n      numberPfBets: string;\r\n      betAmount: string;\r\n    }\r\n  | {\r\n      type: typeof actions.SET_ON_WIN_MODE | typeof actions.SET_ON_LOSS_MODE;\r\n      mode: AutoBetMode;\r\n    };\r\n","export const SET_BET_AMOUNT = \"SET_BET_AMOUNT\";\r\nexport const SET_ACTUAL_BET = \"SET_ACTUAL_BET\";\r\nexport const SET_FIELD = \"SET_FIELD\";\r\nexport const SET_MINES_COUNT = \"SET_MINES_COUNT\";\r\nexport const SET_MULTIPLIERS = \"SET_MULTIPLIERS\";\r\nexport const START_GAME = \"START_GAME\";\r\nexport const AUTO_GAME = \"AUTO_GAME\";\r\nexport const SET_AUTO_BET_IS_START = \"SET_AUTO_BET_IS_START\";\r\nexport const SET_ON_WIN_MODE = \"SET_ON_WIN_MODE\";\r\nexport const SET_ON_LOSS_MODE = \"SET_ON_LOSS_MODE\";\r\n\r\nexport const SWEEPED_TURN = \"SWEEPED_TURN\";\r\nexport const BUSTED_TURN = \"BUSTED_TURN\";\r\nexport const CASHED_OUT = \"CASHED_OUT\";\r\n\r\nexport const SET_SESSION = \"SET_SESSION\";\r\n\r\nexport const SET_NUMBER_OF_BETS = \"SET_NUMBER_OF_BETS\";\r\nexport const SET_ON_WIN = \"SET_ON_WIN\";\r\nexport const SET_ON_LOSS = \"SET_ON_LOSS\";\r\nexport const SET_STOP_ON_PROFIT = \"SET_STOP_ON_PROFIT\";\r\nexport const SET_STOP_ON_LOSS = \"SET_STOP_ON_LOSS\";\r\n\r\nexport const SET_LOADING_FIELD = \"SET_LOADING_FIELD\";\r\nexport const REMOVE_LOADING_FIELD = \"REMOVE_LOADING_FIELD\";\r\nexport const SET_TURN_FETCH_IS_LOADING = \"SET_TURN_FETCH_IS_LOADING\";\r\n\r\nexport const SELECT_TILE = \"SELECT_TILE\";\r\n\r\nexport const SET_COINS_CONFIGURATION = \"SET_COINS_CONFIGURATION\";\r\n\r\nexport const SET_COIN_AMOUNT_FROM_CONFIG = \"SET_COIN_AMOUNT_FROM_CONFIG\";\r\n\r\nexport const SET_IS_AUTO_MODE = \"SET_IS_AUTO_MODE\";\r\n","import {\r\n  fieldProps,\r\n  FIELD_SIZE,\r\n  getFieldProps,\r\n  getTilesProps,\r\n} from \"games/Mines/Field/config\";\r\n\r\nimport { MinesControlState } from \"../types\";\r\n\r\nexport const getSweepedField = (sweepedTiles: Array<number>) => {\r\n  const updatingField = getFieldProps(null);\r\n  for (const tileIndex of sweepedTiles) {\r\n    updatingField[tileIndex] = { isDiamond: true };\r\n  }\r\n  return updatingField;\r\n};\r\n\r\nexport const getResultField = (\r\n  sweepedTiles: Array<number>,\r\n  minesTiles: Array<number>,\r\n  bustedTileLocation?: number,\r\n) => {\r\n  const resultField = {\r\n    ...getFieldProps({ isDiamond: true, openHidden: true }),\r\n    ...getTilesProps(sweepedTiles, { isDiamond: true }),\r\n    ...getTilesProps(minesTiles, { isBomb: true, openHidden: true }),\r\n  };\r\n  if (bustedTileLocation || bustedTileLocation === 0) {\r\n    resultField[bustedTileLocation] = { isBomb: true };\r\n  }\r\n  return resultField;\r\n};\r\n\r\nexport const getResultFieldForAutoMode = (\r\n  sweepedTiles: Array<number>,\r\n  minesTiles: Array<number>,\r\n) => {\r\n  const resultField = {\r\n    ...getFieldProps({ isDiamond: true, openHidden: true }),\r\n    ...getTilesProps(minesTiles, { isBomb: true, openHidden: true }),\r\n  };\r\n  for (const sweepedTileIndex of sweepedTiles) {\r\n    delete resultField[sweepedTileIndex]?.openHidden;\r\n  }\r\n  return resultField;\r\n};\r\n\r\nexport const getFieldWithSelectedTiles = (\r\n  state: MinesControlState,\r\n  tileIndex: number,\r\n) => {\r\n  const minesCount = state.minesCount;\r\n  let { selectedTilesCount, field } = state;\r\n  const pickedTile = field[tileIndex];\r\n  if (selectedTilesCount === FIELD_SIZE - minesCount && !pickedTile) return;\r\n\r\n  if (selectedTilesCount === 0) {\r\n    field = { ...fieldProps };\r\n  }\r\n  const updatedField = { ...field };\r\n  if (pickedTile?.isSelected) {\r\n    selectedTilesCount--;\r\n    updatedField[tileIndex] = null;\r\n  } else {\r\n    selectedTilesCount++;\r\n    updatedField[tileIndex] = { isSelected: true };\r\n  }\r\n\r\n  return { updatedField, selectedTilesCount };\r\n};\r\n","import { liveStatsManager } from \"components/LiveStats/eventEmitter/emitter\";\r\nimport { LiveData } from \"components/LiveStats/eventEmitter/types\";\r\nimport { FIELD_SIZE, fieldProps } from \"games/Mines/Field/config\";\r\nimport { getCoinAmountFromConfig } from \"utils\";\r\n\r\nimport {\r\n  actions,\r\n  getSweepedField,\r\n  getResultField,\r\n  getResultFieldForAutoMode,\r\n  getFieldWithSelectedTiles,\r\n} from \"./actions\";\r\nimport { MinesControlState, MinesControlActions, GameStatus } from \"./types\";\r\n\r\nexport const initialMinesControlState: MinesControlState = {\r\n  minesCount: 3,\r\n  betAmount: \"\",\r\n  actualBet: {\r\n    bet: \"\",\r\n    minesCount: \"\",\r\n    coin: \"\",\r\n  },\r\n  autoMode: {\r\n    onWin: \"\",\r\n    onLoss: \"\",\r\n    numberOfBets: \"\",\r\n    stopOnProfit: \"\",\r\n    stopOnLoss: \"\",\r\n    onLossMode: \"change\",\r\n    onWinMode: \"change\",\r\n  },\r\n  field: fieldProps,\r\n  isAutoMode: false,\r\n  multipliers: {\r\n    current: 0,\r\n    next: 0,\r\n  },\r\n  gameStatus: GameStatus.NOT_STARTED,\r\n  autoBetsIsStart: false,\r\n  selectedTilesCount: 0,\r\n  coinsConfiguration: [],\r\n  turnFetchIsLoading: false,\r\n  autoBetsCount: 0,\r\n  allowToShowRewardModal: true,\r\n};\r\n\r\nconst autoModeActionFieldMatching = {\r\n  [actions.SET_NUMBER_OF_BETS]: \"numberOfBets\",\r\n  [actions.SET_ON_WIN]: \"onWin\",\r\n  [actions.SET_ON_LOSS]: \"onLoss\",\r\n  [actions.SET_STOP_ON_LOSS]: \"stopOnLoss\",\r\n  [actions.SET_STOP_ON_PROFIT]: \"stopOnProfit\",\r\n};\r\n\r\nexport const minesControlReducer = (\r\n  state: MinesControlState,\r\n  action: MinesControlActions,\r\n): MinesControlState => {\r\n  const callLiveStats = (data: LiveData) => {\r\n    const amount = Number(data.amount),\r\n      profit = Number(data.profit);\r\n\r\n    liveStatsManager.addBet({\r\n      amount,\r\n      profit,\r\n      coin: data.coin,\r\n    });\r\n  };\r\n\r\n  switch (action.type) {\r\n    case actions.SET_FIELD:\r\n      return {\r\n        ...state,\r\n        field: action.field,\r\n      };\r\n    case actions.SET_LOADING_FIELD: {\r\n      const updatedField = { ...state.field };\r\n      updatedField[action.tileIndex] = { isLoading: true };\r\n      return {\r\n        ...state,\r\n        field: updatedField,\r\n        turnFetchIsLoading: true,\r\n      };\r\n    }\r\n    case actions.SET_BET_AMOUNT:\r\n      return {\r\n        ...state,\r\n        betAmount: action.value,\r\n      };\r\n    case actions.SET_ACTUAL_BET:\r\n      return {\r\n        ...state,\r\n        actualBet: action.actualBet,\r\n      };\r\n    case actions.SET_TURN_FETCH_IS_LOADING:\r\n      return {\r\n        ...state,\r\n        turnFetchIsLoading: action.value,\r\n      };\r\n    case actions.SET_NUMBER_OF_BETS:\r\n    case actions.SET_ON_WIN:\r\n    case actions.SET_ON_LOSS:\r\n    case actions.SET_STOP_ON_LOSS:\r\n    case actions.SET_STOP_ON_PROFIT:\r\n      return {\r\n        ...state,\r\n        autoMode: {\r\n          ...state.autoMode,\r\n          [autoModeActionFieldMatching[action.type]]: action.value,\r\n        },\r\n      };\r\n    case actions.SET_MINES_COUNT:\r\n      let { field, selectedTilesCount, minesCount } = state;\r\n      if (action.mines > 0 && action.mines < FIELD_SIZE) {\r\n        minesCount = action.mines;\r\n      }\r\n      if (\r\n        state.isAutoMode &&\r\n        FIELD_SIZE - minesCount < state.selectedTilesCount\r\n      ) {\r\n        field = { ...fieldProps };\r\n        selectedTilesCount = 0;\r\n      }\r\n      return {\r\n        ...state,\r\n        minesCount,\r\n        field,\r\n        selectedTilesCount,\r\n      };\r\n    case actions.SELECT_TILE:\r\n      if (state.autoBetsIsStart) return state;\r\n      const result = getFieldWithSelectedTiles(state, action.tileIndex);\r\n      if (result) {\r\n        return {\r\n          ...state,\r\n          field: result.updatedField,\r\n          selectedTilesCount: result.selectedTilesCount,\r\n          allowToShowRewardModal: false,\r\n        };\r\n      }\r\n      return state;\r\n    case actions.SET_MULTIPLIERS:\r\n      return {\r\n        ...state,\r\n        multipliers: action.multipliers,\r\n      };\r\n    case actions.START_GAME:\r\n      return {\r\n        ...state,\r\n        multipliers: action.multipliers,\r\n        gameStatus: GameStatus.IN_PROGRESS,\r\n        field: { ...fieldProps },\r\n        actualBet: action.actualBet,\r\n      };\r\n    case actions.SWEEPED_TURN:\r\n      return {\r\n        ...state,\r\n        multipliers: action.multipliers,\r\n        gameStatus: action.status,\r\n        field: getSweepedField(action.sweepedTiles),\r\n        selectedTilesCount: action.sweepedTiles.length,\r\n        turnFetchIsLoading: false,\r\n      };\r\n    case actions.BUSTED_TURN:\r\n      callLiveStats(action.liveData);\r\n\r\n      return {\r\n        ...state,\r\n        field: getResultField(\r\n          action.sweepedTiles,\r\n          action.mineLocations,\r\n          action.tileLocation,\r\n        ),\r\n        gameStatus: action.status,\r\n        selectedTilesCount: 0,\r\n        turnFetchIsLoading: false,\r\n      };\r\n    case actions.CASHED_OUT:\r\n      const currentMultiplier = action.currentMultiplier\r\n        ? action.currentMultiplier\r\n        : state.multipliers.current;\r\n      callLiveStats(action.liveData);\r\n\r\n      return {\r\n        ...state,\r\n        field: getResultField(action.sweepedTiles, action.mineLocations),\r\n        gameStatus: action.status,\r\n        selectedTilesCount: 0,\r\n        allowToShowRewardModal: true,\r\n        multipliers: {\r\n          ...state.multipliers,\r\n          current: currentMultiplier,\r\n        },\r\n      };\r\n    case actions.AUTO_GAME:\r\n      callLiveStats(action.liveData);\r\n\r\n      return {\r\n        ...state,\r\n        gameStatus: action.gameStatus,\r\n        field: getResultFieldForAutoMode(\r\n          action.sweepedTiles,\r\n          action.mineLocations,\r\n        ),\r\n        // liveData: action.liveData,\r\n        autoBetsCount: state.autoBetsCount + 1,\r\n        multipliers: {\r\n          ...state.multipliers,\r\n          current: action.multiplier,\r\n        },\r\n        actualBet: action.actualBet,\r\n        allowToShowRewardModal: true,\r\n        autoMode: {\r\n          ...state.autoMode,\r\n          numberOfBets: action.numberPfBets,\r\n        },\r\n        betAmount: action.betAmount,\r\n      };\r\n    case actions.SET_SESSION:\r\n      return {\r\n        ...state,\r\n        field: getSweepedField(action.sweepedTiles),\r\n        betAmount: action.betAmount,\r\n        minesCount: action.minesCount,\r\n        multipliers: action.multipliers,\r\n        gameStatus: GameStatus.IN_PROGRESS,\r\n        actualBet: action.actualBet,\r\n        selectedTilesCount: action.sweepedTiles.length,\r\n      };\r\n    case actions.SET_COINS_CONFIGURATION:\r\n      return {\r\n        ...state,\r\n        coinsConfiguration: action.config,\r\n      };\r\n    case actions.SET_COIN_AMOUNT_FROM_CONFIG:\r\n      const amountFromConfig = getCoinAmountFromConfig({\r\n        coinsConfig: state.coinsConfiguration,\r\n        type: action.configType,\r\n        betAmount: state.betAmount,\r\n        selectedCoin: action.selectedCoin,\r\n        showUSD: action.showUSD,\r\n      }).toDP(8);\r\n      return {\r\n        ...state,\r\n        betAmount: amountFromConfig.toFixed(amountFromConfig.dp()),\r\n      };\r\n    case actions.SET_IS_AUTO_MODE:\r\n      if (state.gameStatus !== GameStatus.IN_PROGRESS) {\r\n        return {\r\n          ...state,\r\n          isAutoMode: action.value,\r\n          field: { ...fieldProps },\r\n          gameStatus: GameStatus.NOT_STARTED,\r\n          selectedTilesCount: 0,\r\n        };\r\n      }\r\n      return state;\r\n    case actions.SET_AUTO_BET_IS_START:\r\n      return {\r\n        ...state,\r\n        autoBetsIsStart: action.value,\r\n        selectedTilesCount: !action.value ? 0 : state.selectedTilesCount,\r\n        autoBetsCount: 0,\r\n      };\r\n    case actions.REMOVE_LOADING_FIELD: {\r\n      const updatedField = { ...state.field };\r\n      updatedField[action.tileIndex] = null;\r\n      return {\r\n        ...state,\r\n        field: updatedField,\r\n        turnFetchIsLoading: false,\r\n      };\r\n    }\r\n    case actions.SET_ON_WIN_MODE:\r\n      return {\r\n        ...state,\r\n        autoMode: {\r\n          ...state.autoMode,\r\n          onWinMode: action.mode,\r\n        },\r\n      };\r\n    case actions.SET_ON_LOSS_MODE:\r\n      return {\r\n        ...state,\r\n        autoMode: {\r\n          ...state.autoMode,\r\n          onLossMode: action.mode,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { Dispatch, createContext } from \"react\";\r\n\r\nimport { MinesControlActions, MinesControlState } from \"./types\";\r\nimport { initialMinesControlState } from \"./reducer\";\r\n\r\ninterface MinesControlContext {\r\n  controlState: MinesControlState;\r\n  controlDispatch: Dispatch<MinesControlActions>;\r\n}\r\n\r\nexport const defaultValue: MinesControlContext = {\r\n  controlState: initialMinesControlState,\r\n  controlDispatch: () => {},\r\n};\r\n\r\nconst Context = createContext<MinesControlContext>(defaultValue);\r\n\r\nexport default Context;\r\n","import React, { FC, useReducer } from \"react\";\r\n\r\nimport Context from \"./context\";\r\nimport { initialMinesControlState, minesControlReducer } from \"./reducer\";\r\n\r\nconst MinesControlProvider: FC = ({ children }) => {\r\n  const [controlState, controlDispatch] = useReducer(\r\n    minesControlReducer,\r\n    initialMinesControlState,\r\n  );\r\n\r\n  return (\r\n    <Context.Provider\r\n      value={{\r\n        controlState,\r\n        controlDispatch,\r\n      }}>\r\n      {children}\r\n    </Context.Provider>\r\n  );\r\n};\r\n\r\nexport default MinesControlProvider;\r\n","import { useContext } from \"react\";\r\n\r\nimport Context from \"./context\";\r\n\r\nexport { default as MinesControlProvider } from \"./provider\";\r\nexport { actions } from \"./actions\";\r\nexport * from \"./types\";\r\n\r\nexport const useMinesControl = () => useContext(Context);\r\n","import React, { FC, memo } from \"react\";\r\n\r\nimport GameInput, { Props as GameInputProps } from \"components/GameInput\";\r\n\r\nimport styles from \"./style.module.scss\";\r\n\r\ninterface Props extends GameInputProps {\r\n  isWarningModalOpen?: boolean;\r\n}\r\n\r\nconst Input: FC<Props> = ({ className, isWarningModalOpen, ...props }) => {\r\n  return (\r\n    <GameInput\r\n      {...props}\r\n      className={className}\r\n      buttonClass={styles.button}\r\n      refreshIconClass={styles.refreshIcon}\r\n      classes={{ root: styles.input }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default memo(\r\n  Input,\r\n  (prevProps, nextProps) =>\r\n    prevProps.value === nextProps.value &&\r\n    prevProps.disabled === nextProps.disabled &&\r\n    prevProps.coin === nextProps.coin &&\r\n    prevProps.showUSD === nextProps.showUSD &&\r\n    prevProps.isWarningModalOpen === nextProps.isWarningModalOpen &&\r\n    prevProps.className === nextProps.className,\r\n);\r\n","import React, { FC } from \"react\";\r\n\r\nimport { Button } from \"components\";\r\n\r\nimport styles from \"./style.module.scss\";\r\nimport Input from \"../Input\";\r\n\r\ninterface Props {\r\n  minesCount: string | number;\r\n  gemsCount: string | number;\r\n  profitOnNextTile: string | number;\r\n  totalProfit: string | number;\r\n  currentMultiplier: string | number;\r\n  nextMultiplier: string | number;\r\n  cashoutAction: () => void;\r\n  autoPickAction: () => void;\r\n  coin?: string;\r\n  cashOutButtonDisabled?: boolean;\r\n  autoPickButtonDisabled?: boolean;\r\n}\r\n\r\nconst ManualGamePanel: FC<Props> = ({\r\n  minesCount,\r\n  gemsCount,\r\n  profitOnNextTile,\r\n  totalProfit,\r\n  currentMultiplier,\r\n  nextMultiplier,\r\n  coin,\r\n  cashOutButtonDisabled,\r\n  cashoutAction,\r\n  autoPickAction,\r\n  autoPickButtonDisabled,\r\n}) => {\r\n  return (\r\n    <div className={styles.root}>\r\n      <div className={styles.indicators}>\r\n        <Input topLabel=\"Mines\" value={minesCount} disabled />\r\n        <Input topLabel=\"Gems\" value={gemsCount} disabled />\r\n      </div>\r\n      <Input\r\n        topLabel={`Profit On Next Tile (${nextMultiplier}x)`}\r\n        value={profitOnNextTile}\r\n        disabled\r\n        coin={coin}\r\n      />\r\n      <Input\r\n        topLabel={`Total Profit (${currentMultiplier}x)`}\r\n        value={totalProfit}\r\n        disabled\r\n        coin={coin}\r\n      />\r\n      <div className={styles.buttons}>\r\n        <Button\r\n          onClick={autoPickAction}\r\n          disabled={autoPickButtonDisabled}\r\n          waveColor=\"rgb(255, 0, 225)\">\r\n          pick random tile\r\n        </Button>\r\n        <Button\r\n          onClick={cashoutAction}\r\n          disabled={cashOutButtonDisabled}\r\n          waveColor=\"rgb(255, 0, 225)\">\r\n          Cashout\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ManualGamePanel;\r\n","import React, { FC, ChangeEvent } from \"react\";\r\nimport { useGetLocale } from \"providers\";\r\n\r\nimport { RadioGroup } from \"components\";\r\n\r\nimport { AutoBetMode, actions } from \"../../../Reducer\";\r\nimport Input from \"../Input\";\r\n\r\nexport interface Classes {\r\n  onWin: string;\r\n  onLoss: string;\r\n  numberOfBets: string;\r\n  stopOnLoss: string;\r\n  stopOnProfit: string;\r\n}\r\n\r\nexport interface Props {\r\n  onWin: string;\r\n  onLoss: string;\r\n  numberOfBets: string;\r\n  stopOnProfit: string;\r\n  stopOnLoss: string;\r\n  classes?: Classes;\r\n  coin?: string;\r\n  showUsdPrefix?: boolean;\r\n  disabled?: boolean;\r\n  onChangeHandler: (\r\n    event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    action: string,\r\n  ) => void;\r\n  onBlurHandler: (\r\n    event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    action: string,\r\n    allowNegative?: boolean,\r\n    enableRestriction?: boolean,\r\n  ) => void;\r\n  onWinRefresh: () => void;\r\n  onLossRefresh: () => void;\r\n  onWinMode: AutoBetMode;\r\n  onLossMode: AutoBetMode;\r\n  autoBetModChange: (\r\n    event: ChangeEvent<HTMLInputElement>,\r\n    action: typeof actions.SET_ON_LOSS_MODE | typeof actions.SET_ON_WIN_MODE,\r\n  ) => void;\r\n}\r\n\r\nconst AutoModeInputs: FC<Props> = ({\r\n  onWin,\r\n  onLoss,\r\n  numberOfBets,\r\n  stopOnProfit,\r\n  stopOnLoss,\r\n  classes,\r\n  coin,\r\n  showUsdPrefix,\r\n  disabled,\r\n  onChangeHandler,\r\n  onBlurHandler,\r\n  onWinRefresh,\r\n  onLossRefresh,\r\n  onLossMode,\r\n  onWinMode,\r\n  autoBetModChange,\r\n}) => {\r\n  const intl = useGetLocale();\r\n\r\n  return (\r\n    <>\r\n      <div className={classes?.onWin}>\r\n        <RadioGroup\r\n          topLabel={intl.formatMessage({ id: \"mines.input.onWin\" })}\r\n          labels={[\"Change Bet By (%)\", \"Reset To Base Bet\", \"Stop Betting\"]}\r\n          values={[\"change\", \"reset\", \"stop\"]}\r\n          onChange={(event) => autoBetModChange(event, actions.SET_ON_WIN_MODE)}\r\n          value={onWinMode}\r\n          name={\"mines_automode_onwin_radiogroup\"}\r\n          nestedComponents={{\r\n            1: (\r\n              <Input\r\n                withRefreshIcon\r\n                onRefreshActionHandler={onWinRefresh}\r\n                onChange={(event) => onChangeHandler(event, actions.SET_ON_WIN)}\r\n                onBlur={(event) =>\r\n                  onBlurHandler(event, actions.SET_ON_WIN, true)\r\n                }\r\n                value={onWin}\r\n                textAdornment={intl.formatMessage({\r\n                  id: \"mines.input.increaseBy\",\r\n                })}\r\n                disabled={disabled}\r\n              />\r\n            ),\r\n          }}\r\n          disabled={disabled}\r\n        />\r\n      </div>\r\n      <div className={classes?.onLoss}>\r\n        <RadioGroup\r\n          labels={[\"Change Bet By (%)\", \"Reset To Base Bet\", \"Stop Betting\"]}\r\n          values={[\"change\", \"reset\", \"stop\"]}\r\n          topLabel={intl.formatMessage({ id: \"mines.input.onLoss\" })}\r\n          onChange={(event) =>\r\n            autoBetModChange(event, actions.SET_ON_LOSS_MODE)\r\n          }\r\n          value={onLossMode}\r\n          name={\"mines_automode_onloss_radiogroup\"}\r\n          disabled={disabled}\r\n          nestedComponents={{\r\n            1: (\r\n              <Input\r\n                withRefreshIcon\r\n                onRefreshActionHandler={onLossRefresh}\r\n                onChange={(event) =>\r\n                  onChangeHandler(event, actions.SET_ON_LOSS)\r\n                }\r\n                onBlur={(event) =>\r\n                  onBlurHandler(event, actions.SET_ON_LOSS, true)\r\n                }\r\n                value={onLoss}\r\n                textAdornment={intl.formatMessage({\r\n                  id: \"mines.input.increaseBy\",\r\n                })}\r\n                disabled={disabled}\r\n              />\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n      <Input\r\n        topLabel={intl.formatMessage({ id: \"mines.input.numberOfBets\" })}\r\n        className={classes?.numberOfBets}\r\n        onChange={(event) => onChangeHandler(event, actions.SET_NUMBER_OF_BETS)}\r\n        onBlur={(event) => onBlurHandler(event, actions.SET_NUMBER_OF_BETS)}\r\n        value={numberOfBets}\r\n        withInfinityIcon\r\n        disabled={disabled}\r\n      />\r\n      <Input\r\n        topLabel={intl.formatMessage({ id: \"mines.input.stopOnProfit\" })}\r\n        coin={coin}\r\n        className={classes?.stopOnProfit}\r\n        onChange={(event) => onChangeHandler(event, actions.SET_STOP_ON_PROFIT)}\r\n        onBlur={(event) => onBlurHandler(event, actions.SET_STOP_ON_PROFIT)}\r\n        value={stopOnProfit}\r\n        showUSD={showUsdPrefix}\r\n        disabled={disabled}\r\n      />\r\n      <Input\r\n        topLabel={intl.formatMessage({ id: \"mines.input.stopOnLoss\" })}\r\n        coin={coin}\r\n        className={classes?.stopOnLoss}\r\n        onChange={(event) => onChangeHandler(event, actions.SET_STOP_ON_LOSS)}\r\n        onBlur={(event) => onBlurHandler(event, actions.SET_STOP_ON_LOSS)}\r\n        value={stopOnLoss}\r\n        showUSD={showUsdPrefix}\r\n        disabled={disabled}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AutoModeInputs;\r\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  opacity: 0.5,\n  d: \"M10.7173 1.68725C10.8075 1.59178 10.8781 1.47947 10.9249 1.35674C10.9717 1.23401 10.9939 1.10327 10.9902 0.971965C10.9865 0.840663 10.9569 0.711378 10.9032 0.591492C10.8496 0.471606 10.7728 0.363467 10.6773 0.273249C10.5819 0.183031 10.4695 0.112501 10.3468 0.0656852C10.2241 0.0188697 10.0933 -0.00331434 9.96204 0.000400002C9.83074 0.00411435 9.70145 0.0336542 9.58157 0.0873329C9.46168 0.141012 9.35354 0.217778 9.26332 0.313249L0.763324 9.31325C0.587788 9.49892 0.48998 9.74474 0.48998 10.0002C0.48998 10.2558 0.587788 10.5016 0.763324 10.6872L9.26332 19.6882C9.35295 19.7858 9.46106 19.8646 9.58139 19.92C9.70171 19.9754 9.83185 20.0064 9.96425 20.0111C10.0966 20.0158 10.2287 19.9942 10.3526 19.9474C10.4766 19.9007 10.59 19.8298 10.6863 19.7388C10.7826 19.6479 10.8599 19.5387 10.9137 19.4176C10.9675 19.2965 10.9966 19.166 10.9995 19.0335C11.0024 18.9011 10.9789 18.7694 10.9305 18.6461C10.8821 18.5228 10.8096 18.4103 10.7173 18.3153L2.86532 10.0002L10.7173 1.68725Z\",\n  fill: \"white\"\n});\n\nfunction SvgArrow(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 11,\n    height: 21,\n    viewBox: \"0 0 11 21\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgArrow);\nexport default __webpack_public_path__ + \"static/media/arrow.d0623e9e.svg\";\nexport { ForwardRef as ReactComponent };","import React, { FC, ChangeEvent } from \"react\";\r\nimport { useGetLocale } from \"providers\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { ReactComponent as ArrowSvg } from \"assets/mines/arrow.svg\";\r\nimport { ButtonHandlers } from \"components/GameInput\";\r\nimport { InputAdornment } from \"components\";\r\n\r\nimport Input from \"../Input\";\r\nimport styles from \"./style.module.scss\";\r\n\r\nconst emptyFunction = () => null;\r\n\r\ninterface Classes {\r\n  mines: string;\r\n  bet: string;\r\n}\r\n\r\ninterface Props {\r\n  totalBetOnChange: (\r\n    event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n  ) => void;\r\n  totalBetOnBlur: (\r\n    event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n  ) => void;\r\n  totalBetValue: string;\r\n  minesValue: number;\r\n  increaseMines: (value: number) => void;\r\n  buttonHandlers: ButtonHandlers;\r\n  warningModal: JSX.Element;\r\n  coin?: string;\r\n  disabled?: boolean;\r\n  classes?: Classes;\r\n  showUsdPrefix?: boolean;\r\n  isWarningModalOpen: boolean;\r\n  autoBetsIsStart?: boolean;\r\n}\r\n\r\nconst ManualModeInputs: FC<Props> = ({\r\n  totalBetOnChange,\r\n  totalBetOnBlur,\r\n  totalBetValue,\r\n  minesValue,\r\n  increaseMines,\r\n  coin,\r\n  disabled,\r\n  classes,\r\n  buttonHandlers,\r\n  showUsdPrefix,\r\n  warningModal,\r\n  isWarningModalOpen,\r\n}) => {\r\n  const intl = useGetLocale();\r\n\r\n  return (\r\n    <>\r\n      <Input\r\n        topLabel={intl.formatMessage({ id: \"mines.input.mines\" })}\r\n        endAdornment={\r\n          <InputAdornment\r\n            onClick={disabled ? emptyFunction : () => increaseMines(+1)}\r\n            className={styles.inputArrowRight}\r\n            position=\"end\">\r\n            <ArrowSvg />\r\n          </InputAdornment>\r\n        }\r\n        startAdornment={\r\n          <InputAdornment\r\n            onClick={disabled ? emptyFunction : () => increaseMines(-1)}\r\n            className={styles.inputArrowLeft}\r\n            position=\"start\">\r\n            <ArrowSvg />\r\n          </InputAdornment>\r\n        }\r\n        value={minesValue}\r\n        readOnly\r\n        disabled={disabled}\r\n        className={clsx(classes?.mines, styles.minesInput)}\r\n      />\r\n      <Input\r\n        topLabel={intl.formatMessage({ id: \"mines.input.totalBet\" })}\r\n        coin={coin}\r\n        coinIsLeftward\r\n        onChange={totalBetOnChange}\r\n        onBlur={totalBetOnBlur}\r\n        value={totalBetValue}\r\n        disabled={disabled}\r\n        className={classes?.bet}\r\n        buttonHandlers={buttonHandlers}\r\n        warningModal={warningModal}\r\n        showUSD={showUsdPrefix}\r\n        isWarningModalOpen={isWarningModalOpen}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ManualModeInputs;\r\n","import React, { FC } from \"react\";\r\n\r\nimport { Button as BaseButton, ButtonProps } from \"components\";\r\n\r\nimport styles from \"./style.module.scss\";\r\n\r\nconst Button: FC<ButtonProps> = ({ children, ...props }) => {\r\n  return (\r\n    <BaseButton className={styles.root} {...props}>\r\n      {children}\r\n    </BaseButton>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { FC, Dispatch, SetStateAction } from \"react\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { Switch as SwitchBase } from \"components\";\r\n\r\nimport styles from \"./style.module.scss\";\r\n\r\ninterface Props {\r\n  leftText: string;\r\n  rightText: string;\r\n  checked: boolean;\r\n  setChecked: Dispatch<SetStateAction<boolean>> | ((value: boolean) => void);\r\n  disabled?: boolean;\r\n}\r\n\r\nconst Switch: FC<Props> = ({\r\n  leftText,\r\n  rightText,\r\n  checked,\r\n  disabled,\r\n  setChecked,\r\n}) => {\r\n  return (\r\n    <div className={styles.switchWrapper}>\r\n      <span\r\n        className={clsx(\r\n          {\r\n            [styles.highlight]: !checked,\r\n          },\r\n          styles.option,\r\n        )}\r\n        onClick={() => {\r\n          if (disabled) return;\r\n          setChecked(false);\r\n        }}>\r\n        {leftText}\r\n      </span>\r\n      <SwitchBase\r\n        checked={checked}\r\n        onChange={(event) => {\r\n          setChecked(event.target.checked);\r\n        }}\r\n        disabled={disabled}\r\n        classes={{\r\n          toggle: styles.switchToggle,\r\n          track: styles.switchTrack,\r\n        }}\r\n      />\r\n      <span\r\n        className={clsx(\r\n          {\r\n            [styles.highlight]: checked,\r\n          },\r\n          styles.option,\r\n        )}\r\n        onClick={() => {\r\n          if (disabled) return;\r\n          setChecked(true);\r\n        }}>\r\n        {rightText}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Switch;\r\n","import React, {\r\n  FC,\r\n  ChangeEvent,\r\n  useCallback,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nimport clsx from \"clsx\";\r\n\r\nimport {\r\n  toDecimal,\r\n  getUsdValue,\r\n  CoinConfigType,\r\n  normalizedNumberStringOnBlur,\r\n  normalizedNumberStringOnChange,\r\n} from \"utils\";\r\nimport { useCoins } from \"hooks\";\r\nimport { useGetLocale } from \"providers\";\r\n\r\nimport { liveStatsManager } from \"components/LiveStats/eventEmitter/emitter\";\r\nimport { useHotKeyListener } from \"components/HotKeys/Listener\";\r\nimport { FIELD_SIZE } from \"games/Mines/Field/config\";\r\nimport Warning from \"components/Warning\";\r\n\r\nimport ManualGamePanel from \"./components/ManualGamePanel\";\r\nimport AutoModeInputs from \"./components/AutoModeInputs\";\r\nimport ManualInputs from \"./components/ManualInputs\";\r\nimport Button from \"./components/Button\";\r\nimport Switch from \"./components/Switch\";\r\nimport {\r\n  MinesControlActions,\r\n  GameStatus,\r\n  AutoBetMode,\r\n  useMinesControl,\r\n  actions,\r\n} from \"../Reducer\";\r\n\r\nimport styles from \"./style.module.scss\";\r\n\r\ninterface Props {\r\n  betButtonAction: () => void;\r\n  cashoutAction: () => void;\r\n  autoPickAction: () => void;\r\n  startAutoPlayAction: () => void;\r\n  stopAutoPlayAction: (e?: any, f?: () => void) => void;\r\n  betFetchIsLoading?: boolean;\r\n  cashoutFetchIsLoading?: boolean;\r\n}\r\n\r\nconst getProfit = (bet: string | number, multiplier: number | string) => {\r\n  if (bet && multiplier) {\r\n    return toDecimal(bet).mul(multiplier).minus(bet);\r\n  }\r\n  return toDecimal(0);\r\n};\r\n\r\nconst Bet: FC<Props> = ({\r\n  betButtonAction,\r\n  cashoutAction,\r\n  autoPickAction,\r\n  startAutoPlayAction,\r\n  stopAutoPlayAction,\r\n  betFetchIsLoading,\r\n  cashoutFetchIsLoading,\r\n}) => {\r\n  const intl = useGetLocale();\r\n\r\n  const [isWarningModalOpen, setIsWarningModalOpen] = useState(false);\r\n\r\n  const { selectedCoin, showInUSD } = useCoins([\"selectedCoin\", \"showInUSD\"]);\r\n\r\n  const { controlDispatch, controlState } = useMinesControl();\r\n  const { coinsConfiguration } = controlState;\r\n  const {\r\n    autoMode,\r\n    turnFetchIsLoading,\r\n    betAmount,\r\n    minesCount,\r\n    gameStatus,\r\n    multipliers,\r\n    actualBet,\r\n    selectedTilesCount,\r\n    isAutoMode,\r\n    autoBetsIsStart,\r\n  } = controlState;\r\n\r\n  const inputOnChangeHandler = useCallback(\r\n    (\r\n      event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n      actionType: string,\r\n    ) => {\r\n      const value = normalizedNumberStringOnChange(event);\r\n      if (value === undefined) return;\r\n      controlDispatch({\r\n        type: actionType,\r\n        value,\r\n      } as MinesControlActions);\r\n    },\r\n    [],\r\n  );\r\n\r\n  const inputOnBlurHandler = (\r\n    event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    actionType: string,\r\n    allowNegativeNumbers = false,\r\n    enableRestriction = false,\r\n  ) => {\r\n    let amountLimit: number | undefined;\r\n    let limitationValue: number | undefined;\r\n    if (selectedCoin && enableRestriction) {\r\n      amountLimit =\r\n        showInUSD && selectedCoin?.price\r\n          ? Number(selectedCoin.balance) * Number(selectedCoin?.price)\r\n          : Number(selectedCoin.balance);\r\n      const selectedCoinLimits = controlState.coinsConfiguration.find(\r\n        (limit) => {\r\n          return limit.coin === selectedCoin.coin;\r\n        },\r\n      );\r\n      limitationValue =\r\n        showInUSD && selectedCoin?.price\r\n          ? Number(selectedCoinLimits?.minimum_bet || 0) *\r\n            Number(selectedCoin?.price)\r\n          : Number(selectedCoinLimits?.minimum_bet || 0);\r\n    }\r\n    const value = normalizedNumberStringOnBlur(\r\n      event,\r\n      allowNegativeNumbers,\r\n      amountLimit,\r\n      limitationValue,\r\n    );\r\n    controlDispatch({\r\n      type: actionType,\r\n      value,\r\n    } as MinesControlActions);\r\n  };\r\n\r\n  const increaseMines = useCallback(\r\n    (value: number) => {\r\n      controlDispatch({\r\n        type: actions.SET_MINES_COUNT,\r\n        mines: minesCount + value,\r\n      });\r\n    },\r\n    [minesCount],\r\n  );\r\n\r\n  const setAmountFromConfig = (type: CoinConfigType) => {\r\n    if (!selectedCoin) return;\r\n    controlDispatch({\r\n      type: actions.SET_COIN_AMOUNT_FROM_CONFIG,\r\n      selectedCoin: selectedCoin,\r\n      showUSD: showInUSD,\r\n      configType: type,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (autoBetsIsStart) {\r\n      stopAutoPlayAction({}, () => {\r\n        liveStatsManager.reset();\r\n      });\r\n    }\r\n  }, [selectedCoin?.coin]);\r\n\r\n  useEffect(() => {\r\n    setAmountFromConfig(\"min\");\r\n  }, [selectedCoin?.coin, coinsConfiguration.length]);\r\n\r\n  useEffect(() => {\r\n    if (selectedCoin && selectedCoin.balance && showInUSD) {\r\n      const coinAmount = getUsdValue(selectedCoin, betAmount).toDP(8);\r\n      controlDispatch({\r\n        type: actions.SET_BET_AMOUNT,\r\n        value: coinAmount.toFixed(coinAmount.dp()),\r\n      });\r\n    }\r\n  }, [showInUSD]);\r\n\r\n  const gameInProgress = gameStatus === GameStatus.IN_PROGRESS;\r\n  const betButton = !isAutoMode ? (\r\n    <Button\r\n      onClick={() => {\r\n        betButtonAction();\r\n      }}\r\n      disabled={gameInProgress || betFetchIsLoading}>\r\n      Bet\r\n    </Button>\r\n  ) : isAutoMode && !autoBetsIsStart ? (\r\n    <Button onClick={startAutoPlayAction}>Start Auto Bet</Button>\r\n  ) : (\r\n    <Button onClick={stopAutoPlayAction}>Stop Auto Bet</Button>\r\n  );\r\n\r\n  const showUsdPrefix = showInUSD && selectedCoin?.coin !== \"GEM\";\r\n\r\n  useHotKeyListener({\r\n    callbackKeyA: () => setAmountFromConfig(\"half\"),\r\n    callbackKeyS: () => setAmountFromConfig(\"double\"),\r\n    callbackSpace: () => {\r\n      if (isAutoMode && !autoBetsIsStart) {\r\n        startAutoPlayAction();\r\n      } else if (isAutoMode) {\r\n        stopAutoPlayAction();\r\n      } else if (gameStatus !== GameStatus.IN_PROGRESS) {\r\n        betButtonAction();\r\n      } else {\r\n        cashoutAction();\r\n      }\r\n    },\r\n    callbackKeyR: autoPickAction,\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div className={styles.buttons}>\r\n        <Switch\r\n          rightText={intl.formatMessage({ id: \"mines.switch.auto\" })}\r\n          leftText={intl.formatMessage({ id: \"mines.switch.manual\" })}\r\n          checked={isAutoMode}\r\n          setChecked={(value: boolean) => {\r\n            controlDispatch({\r\n              type: actions.SET_IS_AUTO_MODE,\r\n              value,\r\n            });\r\n          }}\r\n          disabled={gameInProgress || betFetchIsLoading || autoBetsIsStart}\r\n        />\r\n        {betButton}\r\n      </div>\r\n      <div\r\n        className={clsx(styles.betControl, {\r\n          [styles.manualControl]: !isAutoMode,\r\n        })}>\r\n        {!isAutoMode && gameInProgress ? (\r\n          <ManualGamePanel\r\n            profitOnNextTile={getProfit(\r\n              actualBet.bet,\r\n              multipliers.next,\r\n            ).toFixed(8)}\r\n            totalProfit={getProfit(actualBet.bet, multipliers.current).toFixed(\r\n              8,\r\n            )}\r\n            coin={actualBet.coin}\r\n            currentMultiplier={multipliers.current}\r\n            nextMultiplier={multipliers.next}\r\n            minesCount={actualBet.minesCount}\r\n            gemsCount={FIELD_SIZE - Number(actualBet.minesCount)}\r\n            cashoutAction={cashoutAction}\r\n            autoPickAction={autoPickAction}\r\n            cashOutButtonDisabled={\r\n              selectedTilesCount === 0 ||\r\n              turnFetchIsLoading ||\r\n              cashoutFetchIsLoading\r\n            }\r\n            autoPickButtonDisabled={turnFetchIsLoading || cashoutFetchIsLoading}\r\n          />\r\n        ) : (\r\n          <ManualInputs\r\n            totalBetOnChange={(event) =>\r\n              inputOnChangeHandler(event, actions.SET_BET_AMOUNT)\r\n            }\r\n            totalBetOnBlur={(event) =>\r\n              inputOnBlurHandler(event, actions.SET_BET_AMOUNT, false, true)\r\n            }\r\n            totalBetValue={betAmount}\r\n            increaseMines={increaseMines}\r\n            minesValue={minesCount}\r\n            coin={selectedCoin?.coin}\r\n            disabled={gameInProgress || autoBetsIsStart}\r\n            classes={{\r\n              mines: styles.mines,\r\n              bet: styles.totalBet,\r\n            }}\r\n            buttonHandlers={{\r\n              max: () => setIsWarningModalOpen(true),\r\n              min: () => setAmountFromConfig(\"min\"),\r\n              double: () => setAmountFromConfig(\"double\"),\r\n              half: () => setAmountFromConfig(\"half\"),\r\n            }}\r\n            isWarningModalOpen={isWarningModalOpen}\r\n            warningModal={\r\n              <Warning\r\n                isOpen={isWarningModalOpen}\r\n                onClose={() => setIsWarningModalOpen(false)}\r\n                callBack={() => setAmountFromConfig(\"max\")}\r\n                className={styles.warningModal}\r\n              />\r\n            }\r\n            showUsdPrefix={showUsdPrefix}\r\n          />\r\n        )}\r\n        {isAutoMode && (\r\n          <AutoModeInputs\r\n            onLossMode={autoMode.onLossMode}\r\n            onWinMode={autoMode.onWinMode}\r\n            coin={selectedCoin?.coin}\r\n            onWin={autoMode.onWin}\r\n            onLoss={autoMode.onLoss}\r\n            numberOfBets={autoMode.numberOfBets}\r\n            stopOnLoss={autoMode.stopOnLoss}\r\n            stopOnProfit={autoMode.stopOnProfit}\r\n            onChangeHandler={inputOnChangeHandler}\r\n            onBlurHandler={inputOnBlurHandler}\r\n            classes={{\r\n              onLoss: styles.onLoss,\r\n              onWin: styles.onWin,\r\n              stopOnLoss: styles.stopOnLoss,\r\n              stopOnProfit: styles.stopOnProfit,\r\n              numberOfBets: styles.numberOfBets,\r\n            }}\r\n            showUsdPrefix={showUsdPrefix}\r\n            disabled={autoBetsIsStart}\r\n            onWinRefresh={() => {\r\n              controlDispatch({\r\n                type: actions.SET_ON_WIN,\r\n                value: \"\",\r\n              });\r\n            }}\r\n            onLossRefresh={() => {\r\n              controlDispatch({\r\n                type: actions.SET_ON_LOSS,\r\n                value: \"\",\r\n              });\r\n            }}\r\n            autoBetModChange={(event, action) => {\r\n              controlDispatch({\r\n                type: action,\r\n                mode: event.target.value as AutoBetMode,\r\n              });\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Bet;\r\n","import { coinsManager } from \"hooks\";\r\n\r\nexport const formatBetStringToUSD = (message: string, coin: string) => {\r\n  if (coinsManager.showInUSD) {\r\n    const regex = /\\d{1,}([\\,\\.])?\\d*/g;\r\n    const betValue = message.match(regex);\r\n\r\n    if (betValue) {\r\n      const newValue = Number(betValue[0]);\r\n      const price = Number(coinsManager.coinPriceState[coin].price);\r\n\r\n      message = message.replace(regex, `$${(newValue * price).toFixed(8)}`);\r\n    }\r\n  }\r\n\r\n  return message;\r\n};\r\n","import { Dispatch, useEffect, useCallback, useState } from \"react\";\r\nimport { Decimal } from \"utils/decimal\";\r\n\r\nimport { Coin, coinsManager, useCoins, useLocalStorage } from \"hooks\";\r\nimport { useSeed, useLocale } from \"providers\";\r\nimport {\r\n  fetchBase,\r\n  toDecimal,\r\n  sleep,\r\n  isNumberString,\r\n  isNumber,\r\n  track,\r\n} from \"utils\";\r\nimport { notifyBarManager } from \"components\";\r\n\r\nimport {\r\n  MinesControlState,\r\n  MinesControlActions,\r\n  GameStatus,\r\n  AutoBetMode,\r\n  actions,\r\n} from \"../components/Reducer\";\r\nimport {\r\n  CreateSessionResponse,\r\n  CashoutResponse,\r\n  SearchSessionResponse,\r\n  InstantPlayResponse,\r\n} from \"./types\";\r\nimport { useSoundSystemControl } from \"components/SoundModal/Provider\";\r\nimport {\r\n  gamePathNames,\r\n  getSoundEffectNames,\r\n} from \"components/SoundModal/Provider/config\";\r\nimport { formatBetStringToUSD } from \"utils/formatBetStringToUSD\";\r\n\r\nconst DECIMAL_PLACES = 8;\r\n\r\nconst convertAmount = (\r\n  selectedCoin: Coin,\r\n  betAmount: Decimal | string,\r\n  showUSD: boolean,\r\n) => {\r\n  try {\r\n    return showUSD && selectedCoin?.price && selectedCoin.coin !== \"GEM\"\r\n      ? (Decimal.isDecimal(betAmount)\r\n          ? (betAmount as Decimal)\r\n          : toDecimal(betAmount as string)\r\n        )\r\n          .div(selectedCoin?.price)\r\n          .toDP(DECIMAL_PLACES, Decimal.ROUND_UP)\r\n      : Decimal.isDecimal(betAmount)\r\n      ? (betAmount as Decimal)\r\n      : toDecimal(betAmount as string);\r\n  } catch (error) {\r\n    track()?.errors(error);\r\n\r\n    return toDecimal(0);\r\n  }\r\n};\r\n\r\nconst checkStopOnPnl = (\r\n  stopOnValue: string,\r\n  profit: Decimal,\r\n  isLoss = false,\r\n) => {\r\n  if (isNumberString(stopOnValue) && Number(stopOnValue) > 0) {\r\n    profit = isLoss ? profit.mul(-1) : profit;\r\n    return !profit.equals(0) && profit.greaterThanOrEqualTo(stopOnValue);\r\n  }\r\n  return false;\r\n};\r\n\r\nconst getPercent = (value: Decimal, percent: Decimal | string) => {\r\n  return value.mul(percent).div(100);\r\n};\r\n\r\nconst getAutoModeBetAmount = (\r\n  mode: AutoBetMode,\r\n  actualBetAmount: Decimal,\r\n  baseBet: Decimal,\r\n  onWinOrLossValue: string,\r\n  stopAutoMode: () => void,\r\n) => {\r\n  switch (mode) {\r\n    case \"reset\":\r\n      return baseBet;\r\n    case \"stop\":\r\n      stopAutoMode();\r\n      return;\r\n    case \"change\":\r\n      if (isNumberString(onWinOrLossValue)) {\r\n        return actualBetAmount.add(\r\n          getPercent(actualBetAmount, onWinOrLossValue),\r\n        );\r\n      }\r\n  }\r\n};\r\n\r\nlet isStopAutoBets = false,\r\n  stopCallBack = (e?: any, f?: () => void) => {};\r\n\r\nexport const useGameSession = ({\r\n  controlState,\r\n  controlDispatch,\r\n}: {\r\n  controlState: MinesControlState;\r\n  controlDispatch: Dispatch<MinesControlActions>;\r\n}) => {\r\n  const [token] = useLocalStorage(\"token\");\r\n  const { rotateClientSeed, updateNonce, setClientSeed, clientSeed } =\r\n    useSeed();\r\n  const { selectedCoin, showInUSD } = useCoins();\r\n  const { locale } = useLocale();\r\n\r\n  const {\r\n    minesCount,\r\n    betAmount,\r\n    gameStatus,\r\n    actualBet,\r\n    field,\r\n    autoMode: autoModeValues,\r\n    selectedTilesCount,\r\n  } = controlState;\r\n\r\n  const {\r\n    controlFunctions: { playEffect },\r\n  } = useSoundSystemControl();\r\n  const { bet, win } = getSoundEffectNames(gamePathNames.MINES);\r\n\r\n  const [betFetchIsLoading, setBetFetchIsLoading] = useState(false);\r\n  const [cashoutFetchIsLoading, setCashoutFetchIsLoading] = useState(false);\r\n\r\n  const findAndSetSession = async () => {\r\n    const { data, error } = await fetchBase<SearchSessionResponse>(\r\n      \"mines/session\",\r\n      {\r\n        variables: {\r\n          language: locale,\r\n        },\r\n      },\r\n    );\r\n    if (data?.success && !error && data.session_exists) {\r\n      setClientSeed({\r\n        seed: data.client_seed,\r\n        isSetManually: false,\r\n      });\r\n      controlDispatch({\r\n        type: actions.SET_SESSION,\r\n        betAmount: data.bet_amt,\r\n        sweepedTiles: data.sweeped_locations,\r\n        minesCount: Number(data.total_mines),\r\n        multipliers: {\r\n          current: data.current_multiplier,\r\n          next: data.next_multiplier,\r\n        },\r\n        actualBet: {\r\n          bet: data.bet_amt,\r\n          minesCount: data.total_mines,\r\n          coin: data.coin,\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const stopAutoGame = (e?: any, f?: () => void) => {\r\n    isStopAutoBets = true;\r\n\r\n    if (f) {\r\n      stopCallBack = f;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    findAndSetSession();\r\n    return stopAutoGame;\r\n  }, []);\r\n\r\n  const play = async () => {\r\n    if (\r\n      !selectedCoin?.coin ||\r\n      !token ||\r\n      gameStatus === GameStatus.IN_PROGRESS\r\n    ) {\r\n      return;\r\n    }\r\n    playEffect(bet);\r\n    const convertedBetAmount = convertAmount(\r\n      selectedCoin,\r\n      betAmount,\r\n      showInUSD,\r\n    );\r\n    setBetFetchIsLoading(true);\r\n    const playCoin = selectedCoin.coin;\r\n    const { data, error } = await fetchBase<CreateSessionResponse>(\r\n      \"mines/play\",\r\n      {\r\n        variables: {\r\n          language: locale,\r\n          bet_amt: convertedBetAmount.toFixed(DECIMAL_PLACES),\r\n          coin: playCoin,\r\n          mines: minesCount,\r\n          client_seed: clientSeed?.seed,\r\n        },\r\n      },\r\n    );\r\n    setBetFetchIsLoading(false);\r\n\r\n    if (error) {\r\n      let notifyMessage = `${error}`;\r\n\r\n      notifyBarManager.error({\r\n        message: formatBetStringToUSD(notifyMessage, playCoin),\r\n        timeOut: 4000,\r\n      });\r\n    }\r\n\r\n    if (!data?.success) return;\r\n\r\n    controlDispatch({\r\n      type: actions.START_GAME,\r\n      actualBet: {\r\n        bet: betAmount,\r\n        minesCount: minesCount,\r\n        coin: selectedCoin.coin,\r\n      },\r\n      multipliers: {\r\n        current: data.current_multiplier,\r\n        next: data.next_multiplier,\r\n      },\r\n    });\r\n    coinsManager.coinValueUpdate(\r\n      toDecimal(selectedCoin.balance)\r\n        .minus(convertedBetAmount)\r\n        .toFixed(DECIMAL_PLACES),\r\n      selectedCoin.coin,\r\n    );\r\n  };\r\n\r\n  const autoPlay = async () => {\r\n    if (!selectedCoin) return;\r\n    stopCallBack = () => {};\r\n\r\n    const selectedTiles = Object.keys(field).reduce(\r\n      (accumulator, tileIndex) => {\r\n        const tile = field[Number(tileIndex)];\r\n        if (\r\n          tile?.isSelected ||\r\n          ((tile?.isBomb || tile?.isDiamond) && !tile?.openHidden)\r\n        ) {\r\n          accumulator.push(Number(tileIndex));\r\n        }\r\n        return accumulator;\r\n      },\r\n      [] as Array<number>,\r\n    );\r\n\r\n    if (selectedTiles.length === 0) {\r\n      notifyBarManager.error({\r\n        message: \"Select multiple tiles to play.\",\r\n        timeOut: 4000,\r\n      });\r\n      return;\r\n    }\r\n\r\n    controlDispatch({\r\n      type: actions.SET_AUTO_BET_IS_START,\r\n      value: true,\r\n    });\r\n\r\n    const { numberOfBets, onWinMode, onLossMode } = autoModeValues;\r\n    const stopOnProfit = convertAmount(\r\n      selectedCoin,\r\n      autoModeValues.stopOnProfit,\r\n      showInUSD,\r\n    ).toFixed(DECIMAL_PLACES);\r\n    const stopOnLoss = convertAmount(\r\n      selectedCoin,\r\n      autoModeValues.stopOnLoss,\r\n      showInUSD,\r\n    ).toFixed(DECIMAL_PLACES);\r\n    let profit = toDecimal(0);\r\n    let actualNumberOfBets = Number(numberOfBets);\r\n\r\n    let actualBetAmount: Decimal;\r\n    try {\r\n      actualBetAmount = toDecimal(betAmount);\r\n    } catch (error) {\r\n      track()?.errors(error);\r\n\r\n      actualBetAmount = toDecimal(0);\r\n    }\r\n\r\n    const baseBet = actualBetAmount;\r\n\r\n    isStopAutoBets = false;\r\n    while (!isStopAutoBets) {\r\n      if (\r\n        checkStopOnPnl(stopOnProfit, profit) ||\r\n        checkStopOnPnl(stopOnLoss, profit, true) ||\r\n        (actualNumberOfBets === 0 && isNumberString(numberOfBets))\r\n      ) {\r\n        break;\r\n      }\r\n\r\n      console.log(clientSeed?.seed);\r\n\r\n      await sleep(0.3);\r\n\r\n      const { data, error } = await fetchBase<InstantPlayResponse>(\r\n        \"mines/instant-play\",\r\n        {\r\n          variables: {\r\n            language: locale,\r\n            bet_amt: convertAmount(\r\n              selectedCoin,\r\n              actualBetAmount,\r\n              showInUSD,\r\n            ).toFixed(DECIMAL_PLACES),\r\n            coin: selectedCoin.coin,\r\n            mines: minesCount,\r\n            client_seed: clientSeed?.seed,\r\n            sweeped_locations: selectedTiles,\r\n          },\r\n        },\r\n      );\r\n\r\n      if (error) {\r\n        notifyBarManager.error({\r\n          message: error,\r\n          timeOut: 4000,\r\n        });\r\n      }\r\n      if (!data?.success) break;\r\n\r\n      actualNumberOfBets--;\r\n      profit = profit.add(data.profit);\r\n\r\n      const prevActualBetAmount = actualBetAmount;\r\n      if (toDecimal(data.profit).gt(0)) {\r\n        const modeResult = getAutoModeBetAmount(\r\n          onWinMode,\r\n          actualBetAmount,\r\n          baseBet,\r\n          autoModeValues.onWin,\r\n          stopAutoGame,\r\n        );\r\n        if (modeResult) actualBetAmount = modeResult;\r\n      } else {\r\n        const modeResult = getAutoModeBetAmount(\r\n          onLossMode,\r\n          actualBetAmount,\r\n          baseBet,\r\n          autoModeValues.onLoss,\r\n          stopAutoGame,\r\n        );\r\n        if (modeResult) actualBetAmount = modeResult;\r\n      }\r\n\r\n      coinsManager.coinValueUpdate(data.balance, data.coin);\r\n      controlDispatch({\r\n        type: actions.AUTO_GAME,\r\n        sweepedTiles: data.sweeped_tiles,\r\n        mineLocations: data.mine_locations.mines,\r\n        gameStatus: data.status,\r\n        liveData: {\r\n          profit: Number(data.profit),\r\n          amount: Number(actualBetAmount.toFixed(DECIMAL_PLACES)),\r\n          coin: data.coin,\r\n        },\r\n        actualBet: {\r\n          bet: actualBetAmount.toFixed(DECIMAL_PLACES),\r\n          minesCount: minesCount,\r\n          coin: selectedCoin.coin,\r\n        },\r\n        multiplier: data.payout,\r\n        numberPfBets:\r\n          isNumber(actualNumberOfBets) && actualNumberOfBets >= 0\r\n            ? actualNumberOfBets.toString()\r\n            : numberOfBets,\r\n        betAmount: prevActualBetAmount.toFixed(DECIMAL_PLACES),\r\n      });\r\n\r\n      if (clientSeed && !clientSeed?.isSetManually) {\r\n        rotateClientSeed();\r\n      } else {\r\n        updateNonce();\r\n      }\r\n    }\r\n    stopCallBack();\r\n\r\n    controlDispatch({\r\n      type: actions.SET_AUTO_BET_IS_START,\r\n      value: false,\r\n    });\r\n  };\r\n\r\n  const cashout = async () => {\r\n    if (selectedTilesCount < 1) return;\r\n\r\n    setCashoutFetchIsLoading(true);\r\n    const { data, error } = await fetchBase<CashoutResponse>(\"mines/cashout\", {\r\n      variables: {\r\n        language: locale,\r\n        token,\r\n      },\r\n    });\r\n    setCashoutFetchIsLoading(false);\r\n\r\n    if (error) {\r\n      notifyBarManager.error({\r\n        message: error,\r\n        timeOut: 4000,\r\n      });\r\n    }\r\n    if (!data?.success) return;\r\n    data.win && playEffect(win);\r\n    if (clientSeed && !clientSeed?.isSetManually) {\r\n      rotateClientSeed();\r\n    } else {\r\n      updateNonce();\r\n    }\r\n    coinsManager.coinValueUpdate(data.balance, data.coin);\r\n\r\n    controlDispatch({\r\n      type: actions.CASHED_OUT,\r\n      sweepedTiles: data.sweeped_tiles,\r\n      mineLocations: data.mine_locations,\r\n      status: data.status,\r\n      liveData: {\r\n        profit: Number(\r\n          toDecimal(actualBet.bet)\r\n            .mul(data.payout)\r\n            .minus(actualBet.bet)\r\n            .toFixed(DECIMAL_PLACES),\r\n        ),\r\n        amount: Number(actualBet.bet),\r\n        coin: data.coin,\r\n      },\r\n    });\r\n  };\r\n\r\n  return {\r\n    play,\r\n    cashout,\r\n    betFetchIsLoading,\r\n    cashoutFetchIsLoading,\r\n    autoPlay,\r\n    stopAutoGame,\r\n  };\r\n};\r\n","import { Dispatch } from \"react\";\r\n\r\nimport { coinsManager, useCoins, useLocalStorage } from \"hooks\";\r\nimport { useSeed, useLocale } from \"providers\";\r\nimport { fetchBase } from \"utils\";\r\nimport { notifyBarManager } from \"components\";\r\n\r\nimport {\r\n  MinesControlState,\r\n  MinesControlActions,\r\n  GameStatus,\r\n  actions,\r\n} from \"../components/Reducer\";\r\nimport { useSoundSystemControl } from \"components/SoundModal/Provider\";\r\nimport {\r\n  gamePathNames,\r\n  getSoundEffectNames,\r\n} from \"components/SoundModal/Provider/config\";\r\n\r\ninterface BaseResponse {\r\n  message: string;\r\n  success: boolean;\r\n  sweeped_tiles: Array<number>;\r\n}\r\n\r\ninterface SweepedTurnResponse extends BaseResponse {\r\n  current_multiplier: number;\r\n  next_multiplier: number;\r\n  status: typeof GameStatus.IN_PROGRESS | typeof GameStatus.CASHED_OUT;\r\n\r\n  profit: string;\r\n  mine_locations: Array<number>;\r\n  coin: string;\r\n  balance: string;\r\n  payout: number;\r\n}\r\n\r\ninterface BustedTurnResponse extends BaseResponse {\r\n  win: number;\r\n  payout: number;\r\n  coin: string;\r\n  balance: string;\r\n  profit: null | string;\r\n  mine_locations: Array<number>;\r\n  status: typeof GameStatus.BUSTED;\r\n}\r\n\r\nexport const useTurn = ({\r\n  controlState,\r\n  controlDispatch,\r\n}: {\r\n  controlState: MinesControlState;\r\n  controlDispatch: Dispatch<MinesControlActions>;\r\n}) => {\r\n  const [token] = useLocalStorage(\"token\");\r\n  const { clientSeed, rotateClientSeed, updateNonce } = useSeed();\r\n  const { selectedCoin } = useCoins();\r\n  const { locale } = useLocale();\r\n\r\n  const { gameStatus, field, actualBet, turnFetchIsLoading } = controlState;\r\n  const {\r\n    controlFunctions: { playEffect },\r\n  } = useSoundSystemControl();\r\n  const { diamondReveal, mineReveal } = getSoundEffectNames(\r\n    gamePathNames.MINES,\r\n  );\r\n  const getAutoPickedTile = async () => {\r\n    const { default: sample } = await import(\"lodash.sample\");\r\n    const emptyTiles = Object.keys(field).filter(\r\n      (tileIndex) => field[Number(tileIndex)] === null,\r\n    );\r\n    if (emptyTiles.length > 0) {\r\n      return Number(sample(emptyTiles));\r\n    }\r\n  };\r\n\r\n  const turn = async ({\r\n    tileLocation,\r\n    isAutoPick,\r\n  }: {\r\n    tileLocation?: number;\r\n    isAutoPick?: boolean;\r\n  }) => {\r\n    const actualTileLocation = isAutoPick\r\n      ? await getAutoPickedTile()\r\n      : tileLocation;\r\n\r\n    const { default: isUndefined } = await import(\"lodash.isundefined\");\r\n\r\n    if (\r\n      !selectedCoin?.coin ||\r\n      !token ||\r\n      gameStatus !== GameStatus.IN_PROGRESS ||\r\n      turnFetchIsLoading ||\r\n      isUndefined(actualTileLocation) ||\r\n      field[actualTileLocation] !== null\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    controlDispatch({\r\n      type: actions.SET_LOADING_FIELD,\r\n      tileIndex: actualTileLocation,\r\n    });\r\n\r\n    const { data, error } = await fetchBase<\r\n      SweepedTurnResponse | BustedTurnResponse\r\n    >(\"mines/sweep\", {\r\n      variables: {\r\n        language: locale,\r\n        location: actualTileLocation,\r\n        token,\r\n      },\r\n    });\r\n\r\n    if (error || !data?.success) {\r\n      notifyBarManager.error({\r\n        message: error ? error : \"unexpected error has occurred\",\r\n        timeOut: 4000,\r\n      });\r\n      controlDispatch({\r\n        type: actions.REMOVE_LOADING_FIELD,\r\n        tileIndex: actualTileLocation,\r\n      });\r\n      return;\r\n    }\r\n\r\n    switch (data.status) {\r\n      case GameStatus.CASHED_OUT:\r\n        console.log(data);\r\n\r\n        controlDispatch({\r\n          type: actions.CASHED_OUT,\r\n          sweepedTiles: data.sweeped_tiles,\r\n          mineLocations: data.mine_locations,\r\n          status: data.status,\r\n          liveData: {\r\n            profit: Number(data.profit),\r\n            amount: Number(actualBet.bet),\r\n            coin: data.coin,\r\n          },\r\n          currentMultiplier: data.payout,\r\n        });\r\n        controlDispatch({\r\n          type: actions.SET_TURN_FETCH_IS_LOADING,\r\n          value: false,\r\n        });\r\n        if (clientSeed && !clientSeed?.isSetManually) {\r\n          rotateClientSeed();\r\n        } else {\r\n          updateNonce();\r\n        }\r\n        coinsManager.coinValueUpdate(data.balance, data.coin);\r\n        break;\r\n      case GameStatus.IN_PROGRESS:\r\n        controlDispatch({\r\n          type: actions.SWEEPED_TURN,\r\n          multipliers: {\r\n            current: data.current_multiplier,\r\n            next: data.next_multiplier,\r\n          },\r\n          status: data.status,\r\n          sweepedTiles: data.sweeped_tiles,\r\n          liveData: {\r\n            profit: Number(data.profit),\r\n            amount: Number(actualBet.bet),\r\n            coin: data.coin,\r\n          },\r\n        });\r\n        playEffect(diamondReveal);\r\n        break;\r\n      case GameStatus.BUSTED:\r\n        controlDispatch({\r\n          type: actions.BUSTED_TURN,\r\n          status: data.status,\r\n          sweepedTiles: data.sweeped_tiles,\r\n          mineLocations: data.mine_locations,\r\n          tileLocation: actualTileLocation,\r\n          liveData: {\r\n            profit: -Number(actualBet.bet),\r\n            amount: Number(actualBet.bet),\r\n            coin: data.coin,\r\n          },\r\n        });\r\n        if (clientSeed && !clientSeed?.isSetManually) {\r\n          rotateClientSeed();\r\n        } else {\r\n          updateNonce();\r\n        }\r\n        playEffect(mineReveal);\r\n        coinsManager.coinValueUpdate(data.balance, data.coin);\r\n        break;\r\n    }\r\n  };\r\n\r\n  return { turn };\r\n};\r\n","import React, { FC, useCallback, useEffect } from \"react\";\r\n\r\nimport LiveStats from \"components/LiveStats\";\r\nimport { getCoinsConfiguration } from \"utils\";\r\n\r\nimport styles from \"./style.module.scss\";\r\nimport Bet from \"./components/Bet\";\r\nimport { useMinesControl, actions } from \"./components/Reducer\";\r\nimport { useGameSession, useTurn } from \"./hooks\";\r\n\r\ninterface Props {\r\n  liveStatsIsOpen: boolean;\r\n  liveStatsHandleClose: () => void;\r\n}\r\n\r\nconst Controller: FC<Props> = ({ liveStatsIsOpen, liveStatsHandleClose }) => {\r\n  const { controlDispatch, controlState } = useMinesControl();\r\n  const {\r\n    play,\r\n    cashout,\r\n    betFetchIsLoading,\r\n    cashoutFetchIsLoading,\r\n    autoPlay,\r\n    stopAutoGame,\r\n  } = useGameSession({\r\n    controlState,\r\n    controlDispatch,\r\n  });\r\n  const { turn } = useTurn({ controlState, controlDispatch });\r\n\r\n  const setCoinsConfiguration = useCallback(async () => {\r\n    const configResult = await getCoinsConfiguration(\"mines\");\r\n    if (!configResult.error && configResult.success) {\r\n      controlDispatch({\r\n        type: actions.SET_COINS_CONFIGURATION,\r\n        config: configResult.coins,\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setCoinsConfiguration();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.root}>\r\n        <Bet\r\n          betButtonAction={play}\r\n          cashoutAction={cashout}\r\n          autoPickAction={() => turn({ isAutoPick: true })}\r\n          betFetchIsLoading={betFetchIsLoading}\r\n          cashoutFetchIsLoading={cashoutFetchIsLoading}\r\n          startAutoPlayAction={autoPlay}\r\n          stopAutoPlayAction={stopAutoGame}\r\n        />\r\n      </div>\r\n      <LiveStats isOpen={liveStatsIsOpen} handleClose={liveStatsHandleClose} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Controller;\r\n","import React, { FC } from \"react\";\r\n\r\nimport RewardModal from \"components/RewardModal\";\r\n\r\nimport styles from \"./style.module.scss\";\r\nimport Tile, { Props as TileProps } from \"./Tile\";\r\nimport { field } from \"./config\";\r\n\r\ninterface Props {\r\n  fieldProps: Record<number, TileProps | null>;\r\n  turnHandler: (index: number) => void;\r\n  ratio: string | number;\r\n  isRewardModalOpen: boolean;\r\n  coin?: string;\r\n  isAutoBet?: boolean;\r\n  profit: string | number;\r\n  isUsd?: boolean;\r\n}\r\n\r\nconst Field: FC<Props> = ({\r\n  fieldProps,\r\n  turnHandler,\r\n  ratio,\r\n  coin,\r\n  profit,\r\n  isRewardModalOpen,\r\n  isAutoBet,\r\n  isUsd,\r\n}) => {\r\n  const tiles = field.map((tileIndex) => {\r\n    const key = !isAutoBet\r\n      ? `mines_field_${tileIndex}`\r\n      : `mines_field_${Math.random()}`;\r\n    return (\r\n      <Tile\r\n        key={key}\r\n        onClick={() => turnHandler(tileIndex)}\r\n        {...fieldProps[tileIndex]}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className={styles.root}>\r\n      <RewardModal\r\n        ratio={ratio}\r\n        winAmount={profit}\r\n        coin={coin}\r\n        isUsd={isUsd}\r\n        isOpen={isRewardModalOpen}\r\n        className={styles.rewardWindow}\r\n      />\r\n      <div className={styles.field}>{tiles}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Field;\r\n","import React, { FC, useMemo } from \"react\";\r\n\r\nimport { Field } from \"games/Mines\";\r\nimport { toDecimal } from \"utils\";\r\n\r\nimport { useTurn } from \"../Controller/hooks\";\r\nimport {\r\n  GameStatus,\r\n  useMinesControl,\r\n  actions,\r\n} from \"../Controller/components/Reducer\";\r\nimport { useCoins } from \"hooks\";\r\n\r\nconst MinesGame: FC = () => {\r\n  const { controlDispatch, controlState } = useMinesControl();\r\n  const {\r\n    field,\r\n    multipliers,\r\n    gameStatus,\r\n    actualBet,\r\n    selectedTilesCount,\r\n    isAutoMode,\r\n    turnFetchIsLoading,\r\n    autoBetsIsStart,\r\n    autoBetsCount,\r\n    allowToShowRewardModal,\r\n  } = controlState;\r\n\r\n  const { turn } = useTurn({ controlState, controlDispatch });\r\n  const { showInUSD } = useCoins();\r\n\r\n  const fieldComponent = useMemo(\r\n    () => (\r\n      <Field\r\n        fieldProps={field}\r\n        turnHandler={(tileIndex) => {\r\n          if (!isAutoMode) turn({ tileLocation: tileIndex });\r\n          else\r\n            controlDispatch({\r\n              type: actions.SELECT_TILE,\r\n              tileIndex,\r\n            });\r\n        }}\r\n        ratio={multipliers.current}\r\n        isRewardModalOpen={\r\n          gameStatus === GameStatus.CASHED_OUT && allowToShowRewardModal\r\n        }\r\n        coin={actualBet.coin}\r\n        isUsd={showInUSD}\r\n        profit={\r\n          actualBet.bet && multipliers.current\r\n            ? toDecimal(actualBet.bet)\r\n                .mul(multipliers.current)\r\n                .minus(actualBet.bet)\r\n                .toFixed(8)\r\n            : 0\r\n        }\r\n        isAutoBet={autoBetsIsStart}\r\n      />\r\n    ),\r\n    [\r\n      selectedTilesCount,\r\n      gameStatus,\r\n      isAutoMode,\r\n      turnFetchIsLoading,\r\n      autoBetsIsStart,\r\n      autoBetsCount,\r\n      allowToShowRewardModal,\r\n    ],\r\n  );\r\n\r\n  return <div>{fieldComponent}</div>;\r\n};\r\n\r\nexport default MinesGame;\r\n","import React, { FC, useState } from \"react\";\r\n\r\nimport { Statistics } from \"components\";\r\n\r\nimport { HotKeysModal } from \"components/HotKeys\";\r\nimport OptionsButton from \"components/OptionsButton\";\r\nimport LazyComponentLoader from \"config/LazyComponentLoader\";\r\n\r\nimport { MinesControlProvider } from \"./Controller/components/Reducer\";\r\nimport MinesController from \"./Controller\";\r\nimport MinesGame from \"./Game\";\r\nimport styles from \"./style.module.scss\";\r\nimport { SoundModals } from \"components/SoundModal\";\r\n\r\nconst BettingInformation = React.lazy(() =>\r\n  LazyComponentLoader(import(\"pages/ModalPages/pages/BettingInformation\")),\r\n);\r\n\r\nconst MinesPage: FC = () => {\r\n  const [isSoundOpen, setIsSoundOpen] = useState(false);\r\n  const [hotKeyIsOpen, setHotKeyIsOpen] = useState(false);\r\n  const [liveStatsIsOpen, setLiveStatsIsOpen] = useState(false);\r\n  const [bettingInformationIsOpen, setBettingInformationIsOpen] =\r\n    useState(false);\r\n\r\n  return (\r\n    <div>\r\n      <MinesControlProvider>\r\n        <div className={styles.game}>\r\n          <MinesController\r\n            liveStatsHandleClose={() => setLiveStatsIsOpen(false)}\r\n            liveStatsIsOpen={liveStatsIsOpen}\r\n          />\r\n          <MinesGame />\r\n        </div>\r\n      </MinesControlProvider>\r\n      <div className={styles.optionsWrapper}>\r\n        <OptionsButton\r\n          withSound\r\n          soundOnClick={() => setIsSoundOpen(true)}\r\n          liveStatOnclick={() => setLiveStatsIsOpen(true)}\r\n          hotKeysOnClick={() => setHotKeyIsOpen(true)}\r\n          bettingInformationOnClick={() => setBettingInformationIsOpen(true)}\r\n        />\r\n      </div>\r\n      <div className={styles.statisticsWrapper}>\r\n        <SoundModals\r\n          isOpen={isSoundOpen}\r\n          onClose={() => setIsSoundOpen(false)}\r\n        />\r\n        <HotKeysModal\r\n          isOpen={hotKeyIsOpen}\r\n          onClose={() => setHotKeyIsOpen(false)}\r\n          isMinesPage\r\n        />\r\n        <BettingInformation\r\n          isOpen={bettingInformationIsOpen}\r\n          game=\"mines\"\r\n          onClose={() => setBettingInformationIsOpen(false)}\r\n        />\r\n        <Statistics withFairness />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MinesPage;\r\n","import React, { FC } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport \"config/themes/_mines.scss\";\r\nimport SeedProvider from \"providers/Seed\";\r\n\r\nimport Page from \"./page\";\r\n\r\nconst PageWrapper: FC = () => {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Mines | Crypto Gambling Casino</title>\r\n        <meta name=\"title\" content=\"Play Bitcoin Mines - Pasino.com\" />\r\n        <meta\r\n          name=\"description\"\r\n          content=\"Dont catch the bomb and find all clear fields for high multipliers. Play Mines with bitcoin on pasino.com  \"\r\n        />\r\n        <meta\r\n          name=\"keywords\"\r\n          content=\"Mines betting, Mines Gambling, Mines Bitcoin, Mines Casino \"\r\n        />\r\n        <meta name=\"robots\" content=\"index, follow\" />\r\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n        <meta name=\"language\" content=\"English\" />\r\n      </Helmet>\r\n      <SeedProvider gameName=\"mines\">\r\n        <Page />\r\n      </SeedProvider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PageWrapper;\r\n","import { range } from \"utils/lodash\";\r\n\r\nimport { Field } from \"./types\";\r\nimport { Props as TileProps } from \"./Tile\";\r\n\r\nexport const FIELD_SIZE = 25;\r\n\r\nexport const field = Object.freeze(range(FIELD_SIZE));\r\n\r\nexport const fieldProps = field.reduce((accumulator, tileIndex) => {\r\n  accumulator[tileIndex] = null;\r\n  return accumulator;\r\n}, {} as Field);\r\n\r\nexport const getFieldProps = (tileProps: TileProps | null) =>\r\n  field.reduce((accumulator, tileIndex) => {\r\n    accumulator[tileIndex] = tileProps ? { ...tileProps } : tileProps;\r\n    return accumulator;\r\n  }, {} as Field);\r\n\r\nexport const getTilesProps = (\r\n  tilesIndexes: Array<number>,\r\n  tileProps: TileProps | null,\r\n) =>\r\n  tilesIndexes.reduce((accumulator, tileIndex) => {\r\n    accumulator[tileIndex] = { ...tileProps };\r\n    return accumulator;\r\n  }, {} as Record<number, TileProps | null>);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"style_root__2wRHP\",\"loading\":\"style_loading__1In1Q\",\"loader\":\"style_loader__19r8M\",\"openTile\":\"style_openTile__2tKlt\",\"hide\":\"style_hide__3ga4f\",\"highlightTile\":\"style_highlightTile__3Q16k\",\"overflowHidden\":\"style_overflowHidden__tNDU0\",\"tile\":\"style_tile__3Jd92\",\"bomb\":\"style_bomb__2VYEu\",\"hiddenBomb\":\"style_hiddenBomb__2LqCM\",\"diamond\":\"style_diamond__2DdOx\",\"openHidden\":\"style_openHidden__pA8MF\",\"hiddenDiamond\":\"style_hiddenDiamond__3q8m4\",\"open\":\"style_open__3L__j\",\"explode\":\"style_explode__2kmuT\",\"selected\":\"style_selected__34OOB\"};","import React, { FC } from \"react\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { useSassImport } from \"hooks\";\r\nimport { GetCoinImg } from \"../\";\r\n\r\ninterface Props {\r\n  isOpen: boolean;\r\n  ratio: string | number;\r\n  winAmount: string | number;\r\n  coin?: string;\r\n  className?: string;\r\n  isUsd?: boolean;\r\n}\r\n\r\nconst RewardModal: FC<Props> = ({\r\n  isOpen,\r\n  ratio,\r\n  winAmount,\r\n  coin,\r\n  className,\r\n  isUsd,\r\n}) => {\r\n  const styles = useSassImport(() => import(\"./style.module.scss\"));\r\n\r\n  return isOpen ? (\r\n    <div className={clsx(styles.root, className)}>\r\n      <div className={styles.wrapper}>\r\n        <h5 className={styles.ratio}>{`${ratio}x`}</h5>\r\n        <div className={styles.hr} />\r\n        <div className={styles.amount}>\r\n          <span>{`${isUsd ? \"$\" : \"\"}${winAmount}`}</span>\r\n          <GetCoinImg className={styles.coin} coin={coin} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  ) : null;\r\n};\r\n\r\nexport default RewardModal;\r\n","export default __webpack_public_path__ + \"static/media/bomb.0e880db8.svg\";","export default __webpack_public_path__ + \"static/media/hidden-bomb.90fd337d.svg\";","export default __webpack_public_path__ + \"static/media/diamond.630bb08c.svg\";","import React, { FC } from \"react\";\r\nimport clsx from \"clsx\";\r\n\r\nimport bombUrl from \"assets/mines/bomb.svg\";\r\nimport hiddenBombUrl from \"assets/mines/hidden-bomb.svg\";\r\nimport diamondUrl from \"assets/mines/diamond.svg\";\r\nimport CircularProgress from \"components/CircularProgress\";\r\n\r\nimport styles from \"./style.module.scss\";\r\n\r\nexport interface Props {\r\n  isBomb?: boolean;\r\n  isDiamond?: boolean;\r\n  isSelected?: boolean;\r\n  openHidden?: boolean;\r\n  isLoading?: boolean;\r\n  onClick?: () => void;\r\n}\r\n\r\nconst Tile: FC<Props> = ({\r\n  isBomb,\r\n  isDiamond,\r\n  isSelected,\r\n  openHidden,\r\n  isLoading,\r\n  onClick,\r\n}) => {\r\n  return (\r\n    <div\r\n      draggable={false}\r\n      onClick={onClick}\r\n      className={clsx(\r\n        styles.root,\r\n        { [styles.selected]: isSelected },\r\n        { [styles.hide]: !isBomb && !isDiamond },\r\n        { [styles.overflowHidden]: isDiamond },\r\n        { [styles.highlightTile]: (isBomb || isDiamond) && !openHidden },\r\n        { [styles.openTile]: isBomb || isDiamond },\r\n        { [styles.openHidden]: openHidden },\r\n        { [styles.loading]: isLoading },\r\n      )}>\r\n      {isLoading ? (\r\n        <CircularProgress className={styles.loader} color=\"#4EC1E7\" />\r\n      ) : (\r\n        <div\r\n          className={clsx(\r\n            styles.tile,\r\n            { [styles.open]: isBomb || isDiamond },\r\n            { [styles.explode]: isBomb && !openHidden },\r\n          )}>\r\n          {isBomb && !openHidden ? (\r\n            <img\r\n              draggable={false}\r\n              src={bombUrl}\r\n              alt=\"bomb\"\r\n              className={styles.bomb}\r\n            />\r\n          ) : isBomb && openHidden ? (\r\n            <img\r\n              draggable={false}\r\n              src={hiddenBombUrl}\r\n              alt=\"hiddenBomb\"\r\n              className={styles.hiddenBomb}\r\n            />\r\n          ) : null}\r\n          {isDiamond ? (\r\n            <img\r\n              draggable={false}\r\n              src={diamondUrl}\r\n              alt=\"diamond\"\r\n              className={clsx(styles.diamond, {\r\n                [styles.hiddenDiamond]: openHidden,\r\n              })}\r\n            />\r\n          ) : null}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tile;\r\n"],"sourceRoot":""}