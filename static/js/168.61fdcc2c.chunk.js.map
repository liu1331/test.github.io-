{"version":3,"sources":["pages/ContactUs/types.ts","pages/ContactUs/index.tsx"],"names":["typesData","translate","name","ContactUs","intl","useGetLocale","isWhiteThemeActive","useWhiteTheme","useFetch","fetch","types","useMemo","map","id","i","value","label","formatMessage","user","useUser","useState","user_name","email","user_email","type","body","formData","setFormData","reResponse","setReResponse","reCaptchaRef","useRef","handleChange","key","send","event","a","preventDefault","variables","re_response","Number","response","data","error","notifyBarManager","timeOut","message","success","current","reset","useEffect","Helmet","className","clsx","css","root","root_white","box","textBox","title","text","form","onSubmit","required","labelClassName","labelClass","placeholder","generalInput","input","rootClass","inputRoot","onChange","target","labelText","classes","select","expandIcon","selectIcon","selectLabel","openFromUpwards","option","Fragment","textArea","captchaWrapper","sitekey","process","ref","button","buttonDark","disabled"],"mappings":"iTAAaA,EAAY,CACvB,CAAEC,UAAW,oCAAqCC,KAAM,WACxD,CACED,UAAW,2CACXC,KAAM,mBAER,CACED,UAAW,+CACXC,KAAM,2BAER,CAAED,UAAW,oCAAqCC,KAAM,sBCkB7CC,G,OAAY,WACvB,IAAMC,EAAOC,yBACLC,EAAuBC,cAAvBD,mBAFqB,EAIbE,YAAc,gBAAvBC,EAJsB,oBAMvBC,EAAQC,mBACZ,kBACEX,EAAUY,KAAI,SAACC,EAAIC,GAAL,MAAY,CACxBC,MAAM,GAAD,OAAKD,GACVE,MAAOZ,EAAKa,cAAc,CAAEJ,GAAIA,EAAGZ,kBAEvC,IAEMiB,EAASC,oBAATD,KAdqB,EAgBGE,mBAAS,CACvClB,MAAU,OAAJgB,QAAI,IAAJA,OAAA,EAAAA,EAAMG,YAAa,GACzBC,OAAW,OAAJJ,QAAI,IAAJA,OAAA,EAAAA,EAAMK,aAAc,GAC3BC,KAAM,IACNC,KAAM,KApBqB,mBAgBtBC,EAhBsB,KAgBZC,EAhBY,OAuBOP,mBAAwB,MAvB/B,mBAuBtBQ,EAvBsB,KAuBVC,EAvBU,KAwBvBC,EAAeC,iBAAkB,MAEjCC,EAAe,SAACjB,EAAekB,GACnCN,EAAY,2BAAKD,GAAN,kBAAiBO,EAAMlB,MAO9BmB,EAAuC,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DAC9CD,EAAME,iBADwC,SAGvB5B,EAAM,CAC3B6B,UAAU,yBACRC,YAAaX,GACVF,GAFI,IAGPF,KAAMxB,EAAUwC,OAAOd,EAASF,OAAOtB,SAPG,QAGxCuC,EAHwC,UAYpCC,EAAgBD,EAAhBC,MAAMC,EAAUF,EAAVE,OAGZC,mBAAiBD,MAAM,CACrBE,QAAS,IACTC,QAASH,IAEFD,EAAKI,UACdF,mBAAiBG,QAAQ,CACvBF,QAAS,IACTC,QAASJ,EAAKI,UAGhBnB,EAAY,CACVF,KAAM,GACNvB,KAAM,GACNoB,MAAO,GACPE,KAAME,EAASF,SAKrBK,EAAc,MACd,UAAAC,EAAakB,eAAb,SAAsBC,QAnCwB,2CAAH,sDAgD7C,OAVAC,qBAAU,YACR,OAAIhC,QAAJ,IAAIA,OAAJ,EAAIA,EAAMG,YACRM,EAAY,2BACPD,GADM,IAETxB,MAAU,OAAJgB,QAAI,IAAJA,OAAA,EAAAA,EAAMG,YAAaK,EAASxB,KAClCoB,OAAW,OAAJJ,QAAI,IAAJA,OAAA,EAAAA,EAAMK,aAAcG,EAASJ,WAGvC,CAACJ,IAGF,qCACE,cAACiC,EAAA,EAAD,UACE,0EAEF,qBAAKC,UAAWC,YAAKC,IAAIC,KAAMjD,GAAsBgD,IAAIE,YAAzD,SACE,sBAAKJ,UAAWE,IAAIG,IAApB,UACE,sBAAKL,UAAWE,IAAII,QAApB,UACE,oBAAIN,UAAWE,IAAIK,MAAnB,SACGvD,EAAKa,cAAc,CAAEJ,GAAI,sBAG5B,mBAAGuC,UAAWE,IAAIM,KAAlB,SACGxD,EAAKa,cAAc,CAAEJ,GAAI,wBAE5B,mBAAGuC,UAAWE,IAAIM,KAAlB,SACGxD,EAAKa,cAAc,CAAEJ,GAAI,wBAE5B,mBAAGuC,UAAWE,IAAIM,KAAlB,SACGxD,EAAKa,cAAc,CAAEJ,GAAI,2BAI9B,uBAAMuC,UAAWE,IAAIO,KAAMC,SAAU5B,EAArC,UACE,cAAC,QAAD,CACE6B,UAAQ,EACRC,eAAgBV,IAAIW,WACpBjD,MAAOZ,EAAKa,cAAc,CAAEJ,GAAI,8BAChCqD,YAAa9D,EAAKa,cAAc,CAC9BJ,GAAI,oCAENuC,UAAWC,YAAKC,IAAIa,aAAcb,IAAIc,OACtCC,UAAWf,IAAIgB,UACfvD,MAAOW,EAASxB,KAChBqE,SAAU,SAACpC,GAAD,OAAWH,EAAaG,EAAMqC,OAAOzD,MAAO,WAExD,cAAC,QAAD,CACEgD,UAAQ,EACRC,eAAgBV,IAAIW,WACpBI,UAAWf,IAAIgB,UACftD,MAAOZ,EAAKa,cAAc,CAAEJ,GAAI,8BAChCqD,YAAa9D,EAAKa,cAAc,CAC9BJ,GAAI,oCAENuC,UAAWC,YAAKC,IAAIa,aAAcb,IAAIc,OACtCrD,MAAOW,EAASJ,MAChBiD,SAAU,SAACpC,GAAD,OAAWH,EAAaG,EAAMqC,OAAOzD,MAAO,YAGxD,sBAAKqC,UAAWE,IAAItC,MAApB,UACE,sBAAMoC,UAAWE,IAAImB,UAArB,SACGrE,EAAKa,cAAc,CAAEJ,GAAI,gCAE5B,cAAC,aAAD,CACEE,MAAOL,EAAM8B,OAAOd,EAASF,OAAOR,OAAS,GAC7CuD,SAAU,SAACxD,GAAD,OAAWiB,EAAajB,EAAiB,SACnD2D,QAAS,CACPnB,KAAMF,YAAKC,IAAIa,aAAcb,IAAIqB,QACjCC,WAAYtB,IAAIuB,WAChB7D,MAAOsC,IAAIwB,aAEbC,iBAAiB,EARnB,SASGrE,EAAME,KAAI,SAACoE,GAAD,OACT,cAAC,IAAMC,SAAP,UACE,cAAC,aAAD,CAEElE,MAAOiE,EAAOjE,MACdC,MAAOgE,EAAOhE,OAHhB,UACUgE,EAAOjE,MADjB,YAC0BiE,EAAOhE,SAFnC,UAAwBgE,EAAOjE,MAA/B,YAAwCiE,EAAOhE,gBAWrD,sBAAKoC,UAAWE,IAAItC,MAApB,UACE,sBAAMoC,UAAWE,IAAImB,UAArB,SACGrE,EAAKa,cAAc,CAAEJ,GAAI,mCAG5B,0BACEkD,UAAQ,EACRX,UAAWC,YAAKC,IAAIa,aAAcb,IAAI4B,UACtChB,YAAa9D,EAAKa,cAAc,CAC9BJ,GAAI,uCAENE,MAAOW,EAASD,KAChB8C,SAAU,SAACpC,GAAD,OAAWH,EAAaG,EAAMqC,OAAOzD,MAAO,cAI1D,qBAAKqC,UAAWE,IAAI6B,eAApB,SACE,cAAC,IAAD,CACEC,QAASC,2CACTd,SAjJwC,SAACxD,GACrDc,EAAcd,IAiJFuE,IAAKxD,MAIT,cAAC,SAAD,CACEsB,UAAWC,YAAKC,IAAIiC,OAAL,eACZjC,IAAIkC,YAAclF,IAErBkB,KAAK,SACLiE,UAAW7D,EALb,SAMGxB,EAAKa,cAAc,CAAEJ,GAAI,+CASzBV","file":"static/js/168.61fdcc2c.chunk.js","sourcesContent":["export const typesData = [\r\n  { translate: \"contactUs.form.type.types.general\", name: \"General\" },\r\n  {\r\n    translate: \"contactUs.form.type.types.accountRelated\",\r\n    name: \"Account-Related\",\r\n  },\r\n  {\r\n    translate: \"contactUs.form.type.types.depositWithdrawals\",\r\n    name: \"Deposit and Withdrawals\",\r\n  },\r\n  { translate: \"contactUs.form.type.types.support\", name: \"Technical Support\" },\r\n];\r\n","import React, {\r\n  FormEventHandler,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport ReCAPTCHA, { ReCAPTCHAProps } from \"react-google-recaptcha\";\r\nimport { useGetLocale } from \"providers\";\r\nimport clsx from \"clsx\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport {\r\n  Button,\r\n  Input,\r\n  notifyBarManager,\r\n  BaseSelect,\r\n  SelectItem,\r\n  SelectOption,\r\n} from \"components\";\r\nimport { useFetch } from \"hooks\";\r\nimport { useWhiteTheme } from \"providers/WhiteTheme\";\r\n\r\nimport css from \"./style.module.scss\";\r\nimport { typesData } from \"./types\";\r\nimport \"config/themes/_dice.scss\";\r\nimport { useUser } from \"providers\";\r\n\r\nexport const ContactUs = () => {\r\n  const intl = useGetLocale();\r\n  const { isWhiteThemeActive } = useWhiteTheme();\r\n\r\n  const [fetch] = useFetch<any>(\"contact/post\");\r\n\r\n  const types = useMemo<SelectOption[]>(\r\n    () =>\r\n      typesData.map((id, i) => ({\r\n        value: `${i}`,\r\n        label: intl.formatMessage({ id: id.translate }),\r\n      })),\r\n    [],\r\n  );\r\n  const { user } = useUser();\r\n\r\n  const [formData, setFormData] = useState({\r\n    name: user?.user_name || \"\",\r\n    email: user?.user_email || \"\",\r\n    type: \"0\",\r\n    body: \"\",\r\n  });\r\n\r\n  const [reResponse, setReResponse] = useState<string | null>(null);\r\n  const reCaptchaRef = useRef<ReCAPTCHA>(null);\r\n\r\n  const handleChange = (value: string, key: string) => {\r\n    setFormData({ ...formData, [key]: value });\r\n  };\r\n\r\n  const onReCAPTCHAChange: ReCAPTCHAProps[\"onChange\"] = (value) => {\r\n    setReResponse(value);\r\n  };\r\n\r\n  const send: FormEventHandler<HTMLFormElement> = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const response = await fetch({\r\n      variables: {\r\n        re_response: reResponse,\r\n        ...formData,\r\n        type: typesData[Number(formData.type)].name,\r\n      },\r\n    });\r\n\r\n    if (response) {\r\n      const { data, error } = response;\r\n\r\n      if (error) {\r\n        notifyBarManager.error({\r\n          timeOut: 4000,\r\n          message: error,\r\n        });\r\n      } else if (data.message) {\r\n        notifyBarManager.success({\r\n          timeOut: 2000,\r\n          message: data.message,\r\n        });\r\n\r\n        setFormData({\r\n          body: \"\",\r\n          name: \"\",\r\n          email: \"\",\r\n          type: formData.type,\r\n        });\r\n      }\r\n    }\r\n\r\n    setReResponse(null);\r\n    reCaptchaRef.current?.reset();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (user?.user_name) {\r\n      setFormData({\r\n        ...formData,\r\n        name: user?.user_name || formData.name,\r\n        email: user?.user_email || formData.email,\r\n      });\r\n    }\r\n  }, [user]);\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Contact Us | Crypto Gambling Casino</title>\r\n      </Helmet>\r\n      <div className={clsx(css.root, isWhiteThemeActive && css.root_white)}>\r\n        <div className={css.box}>\r\n          <div className={css.textBox}>\r\n            <h1 className={css.title}>\r\n              {intl.formatMessage({ id: \"contactUs.title\" })}\r\n            </h1>\r\n\r\n            <p className={css.text}>\r\n              {intl.formatMessage({ id: \"contactUs.text.p1\" })}\r\n            </p>\r\n            <p className={css.text}>\r\n              {intl.formatMessage({ id: \"contactUs.text.p2\" })}\r\n            </p>\r\n            <p className={css.text}>\r\n              {intl.formatMessage({ id: \"contactUs.text.p3\" })}\r\n            </p>\r\n          </div>\r\n\r\n          <form className={css.form} onSubmit={send}>\r\n            <Input\r\n              required\r\n              labelClassName={css.labelClass}\r\n              label={intl.formatMessage({ id: \"contactUs.form.name.title\" })}\r\n              placeholder={intl.formatMessage({\r\n                id: \"contactUs.form.name.placeholder\",\r\n              })}\r\n              className={clsx(css.generalInput, css.input)}\r\n              rootClass={css.inputRoot}\r\n              value={formData.name}\r\n              onChange={(event) => handleChange(event.target.value, \"name\")}\r\n            />\r\n            <Input\r\n              required\r\n              labelClassName={css.labelClass}\r\n              rootClass={css.inputRoot}\r\n              label={intl.formatMessage({ id: \"contactUs.form.mail.title\" })}\r\n              placeholder={intl.formatMessage({\r\n                id: \"contactUs.form.mail.placeholder\",\r\n              })}\r\n              className={clsx(css.generalInput, css.input)}\r\n              value={formData.email}\r\n              onChange={(event) => handleChange(event.target.value, \"email\")}\r\n            />\r\n\r\n            <div className={css.label}>\r\n              <span className={css.labelText}>\r\n                {intl.formatMessage({ id: \"contactUs.form.type.title\" })}\r\n              </span>\r\n              <BaseSelect\r\n                value={types[Number(formData.type)].label || \"\"}\r\n                onChange={(value) => handleChange(value as string, \"type\")}\r\n                classes={{\r\n                  root: clsx(css.generalInput, css.select),\r\n                  expandIcon: css.selectIcon,\r\n                  label: css.selectLabel,\r\n                }}\r\n                openFromUpwards={false}>\r\n                {types.map((option) => (\r\n                  <React.Fragment key={`${option.value}_${option.label}`}>\r\n                    <SelectItem\r\n                      key={`${option.value}_${option.label}`}\r\n                      value={option.value}\r\n                      label={option.label as string}\r\n                    />\r\n                  </React.Fragment>\r\n                ))}\r\n              </BaseSelect>\r\n            </div>\r\n\r\n            <div className={css.label}>\r\n              <span className={css.labelText}>\r\n                {intl.formatMessage({ id: \"contactUs.form.message.title\" })}\r\n              </span>\r\n\r\n              <textarea\r\n                required\r\n                className={clsx(css.generalInput, css.textArea)}\r\n                placeholder={intl.formatMessage({\r\n                  id: \"contactUs.form.message.placeholder\",\r\n                })}\r\n                value={formData.body}\r\n                onChange={(event) => handleChange(event.target.value, \"body\")}\r\n              />\r\n            </div>\r\n\r\n            <div className={css.captchaWrapper}>\r\n              <ReCAPTCHA\r\n                sitekey={process.env.REACT_APP_RECAPTCHA_SITE_KEY as string}\r\n                onChange={onReCAPTCHAChange}\r\n                ref={reCaptchaRef}\r\n              />\r\n            </div>\r\n\r\n            <Button\r\n              className={clsx(css.button, {\r\n                [css.buttonDark]: !isWhiteThemeActive,\r\n              })}\r\n              type=\"submit\"\r\n              disabled={!reResponse}>\r\n              {intl.formatMessage({ id: \"contactUs.form.button.title\" })}\r\n            </Button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactUs;\r\n"],"sourceRoot":""}