{"version":3,"sources":["pages/Crash/controller/consts.ts","pages/Crash/controller/methods/lifecircle/start.ts","pages/Crash/controller/methods/lifecircle/end.ts","pages/Crash/controller/methods/controller/acceptBet.ts","pages/Crash/controller/methods/controller/placeABet.ts","pages/Crash/controller/methods/controller/exitTheBet.ts","pages/Crash/controller/methods/controller/setGameMode.ts","pages/Crash/controller/methods/controller/stopAutoMode.ts","pages/Crash/controller/methods/controller/setAutoParams.ts","pages/Crash/controller/methods/controller/setAutoLimits.ts","pages/Crash/controller/methods/controller/setManualField.ts","pages/Crash/controller/methods/controller/socketListener.ts","pages/Crash/controller/methods/controller/setActiveUserId.ts","pages/Crash/controller/types.ts","pages/Crash/controller/methods/controller/updateWhenChange.ts","pages/Crash/controller/methods/controller/autoOpenListener.ts","pages/Crash/controller/methods/controller/reactToAutoParams.ts","pages/Crash/controller/methods/controller/reactToAutoLimits.ts","pages/Crash/controller/methods/controller/updateManualField.ts","pages/Crash/controller/methods/controller/autoLimitsListener.ts","pages/Crash/controller/methods/controller/autoParamsListener.ts","pages/Crash/controller/methods/controller/changeSelectedCoin.ts","pages/Crash/controller/methods/controller/manualValuesListener.ts","pages/Crash/controller/methods/controller/changeIsAutoModeOpen.ts","pages/Crash/controller/methods/controller/updateAutoParamsField.ts","pages/Crash/controller/methods/controller/updateAutoLimitsField.ts","pages/Crash/controller/methods/controller/betButtonStatusListener.ts","pages/Crash/controller/methods/calculates/checkIsSupport.ts","pages/Crash/controller/methods/calculates/profit.ts","pages/Crash/controller/methods/calculates/chance.ts","pages/Crash/controller/methods/sockets/makeRequest.ts","pages/Crash/controller/methods/controller/updateButtonStatus.ts","pages/Crash/controller/manager.ts","pages/Crash/controller/consts/fields.tsx","pages/Crash/controller/Provider/Context.ts","pages/Crash/controller/Provider/Provider.tsx","pages/Crash/controller/Provider/index.ts"],"names":["CRASH_BET_AMOUNT_LOCAL_NAME_VALUE","CRASH_PAYOUT_LOCAL_NAME_VALUE","initCrashSocket","sendInitialData","a","selectedCoinName","savedCoin","localStorage","getItem","parsedCoin","JSON","parse","coin","e","track","errors","console","error","fetch","body","stringify","token","method","then","r","json","catch","data","type","socket_token","forEach","param","crashSocket","send","open","listener","dispatch","crashSocketWatcher","this","socketListener","closeCrashSocket","close","setGameCircleValue","acceptBet","balance","updateBalance","fields","general","playableStatus","notifybarManager","success","message","buttonOnClick","manual","auto","betAmount","payout","profit","name","coinSelected","isOpen","setAutoStarted","winStatus","isStarted","baseBet","stopAutoMode","gameMode","makeRequest","exitTheBet","setButtonStatus","intl","formatMessage","id","notifyBarManager","isWaitServerAnswer","removeItem","setGameMode","mode","crashPayoutText","document","getElementById","payoutClassList","classList","liveValues","liveStatsManager","addBet","amount","Number","add","reactToAutoLimits","reactToAutoParams","remove","setTimeout","limitsActualValues","numberOfBets","updateAutoLimitsField","updateManualFields","setAutoParams","params","values","updateAutoParamsField","setAutoLimits","limits","setManualField","field","value","updateDependentManualFields","crashSocketsList","managerListener","min","coinPrice","minimum_bet","max","maximum_bet","coinData","maximum_profit","price","toFixed","rangeBetween","cashedout","user_id","userId","finalized","payoutText","innerText","setConnection","connection","bets","CrashManualManagerEvents","CrashGeneralManagerEvents","CrashAutoManagerEvents","ButtonValues","CrashConnectionEvents","setActiveUserId","setProfit","calculateProfit","setChance","chance","calculateChance","setItem","autoIsOpenListener","callBack","addListener","CHANGE_AUTO_OPEN_STATUS","removeListener","autoParamKey","isChangePayout","payoutValue","betPercentValue","newBetAmount","betsValue","generalBetAmount","stopOnLoss","stopOnProfit","maxBetAmount","emit","CHANGE_MANUAL_VALUES_EVENT","autoLimitsListener","CHANGE_AUTO_LIMITS_EVENT","autoParamsListener","CHANGE_AUTO_PARAMS_EVENT","setSelectedCoin","manualValuesListener","setIsAutoModeOpen","betButtonStatusListener","callback","CHANGE_BUTTON_STATUS_EVENT","checkIsSupport","Infinity","coinName","cashout","isSaveToLocal","betAmountValue","bet_amt","auto_cashout","setStatus","status","buttonStatus","Auto_setNoStarted","Auto_setStarted","Bet_nextRound","Bet","Wait_loading","Cashout","Wait_cancelBet","setDisabled","CrashGameManager","coinsManager","selectedCoin","bind","autoLimitListener","isOnline","CHANGE_CONNECTION","CHANGE_AUTO_STARTED_STATUS","isDisabled","CHANGE_IS_DISABLED_STATUS","coinValueUpdate","intlMessage","timeOut","log","EventEmitter","onLoss","onWin","defaultValue","manager","Context","React","createContext","CrashControlProvider","children","useGetLocale","useMemo","useEffect","removeAllListeners","Provider","useController","useContext"],"mappings":"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","file":"static/js/25.5610f7c7.chunk.js","sourcesContent":["export const CRASH_BET_AMOUNT_LOCAL_NAME_VALUE = \"crash_betAmount\",\r\n  CRASH_PAYOUT_LOCAL_NAME_VALUE = \"crash_payout\";\r\n\r\nexport const DEFAULT_CRASH_PAYOUT_VALUE = 2;\r\n","import { crashSocketWatcher } from \"pages/Crash/crashSocketWatcher\";\r\nimport { crashSocket, track } from \"utils\";\r\nimport { CrashManagerType } from \"../..\";\r\n\r\nexport const initCrashSocket = function (this: CrashManagerType) {\r\n  const sendInitialData = async () => {\r\n    let selectedCoinName = \"GEM\";\r\n\r\n    try {\r\n      const savedCoin = localStorage.getItem(\"selectedCoin\");\r\n      if (savedCoin) {\r\n        const parsedCoin = JSON.parse(savedCoin);\r\n        if (parsedCoin.coin) {\r\n          selectedCoinName = parsedCoin.coin;\r\n        }\r\n      }\r\n    } catch (e) {\r\n      track()?.errors(e);\r\n      console.error(\"error when trying to get selected coin\");\r\n      selectedCoinName = \"\";\r\n    }\r\n\r\n    const data = await fetch(\r\n      \"https://api.pasino.com/account/get-socket-token\",\r\n      {\r\n        body: JSON.stringify({\r\n          token: localStorage.getItem(\"token\"),\r\n        }),\r\n        method: \"POST\",\r\n      },\r\n    )\r\n      .then((r) => r.json())\r\n      .then((r) => r)\r\n      .catch((e) => {\r\n        console.error(\"Crash get-socket-token error: \", e);\r\n        track()?.errors(e);\r\n\r\n        return null;\r\n      });\r\n\r\n    const sendData = [\r\n      {\r\n        type: \"initialization\",\r\n        socket_token: data?.socket_token || \"\",\r\n      },\r\n      {\r\n        type: \"get_current_bets\",\r\n      },\r\n\r\n      { type: \"get_previous_rounds\" },\r\n      {\r\n        type: \"get_coin_parameters\",\r\n        coin: selectedCoinName,\r\n      },\r\n    ];\r\n\r\n    sendData.forEach((param) => {\r\n      crashSocket.send(param);\r\n    });\r\n  };\r\n\r\n  crashSocket.open(sendInitialData);\r\n  crashSocket.listener();\r\n  crashSocket.dispatch(crashSocketWatcher);\r\n\r\n  this.socketListener();\r\n};\r\n","import { setGameCircleValue } from \"pages/Crash/crashSocketWatcher\";\r\nimport { crashSocket } from \"utils\";\r\n\r\nexport const closeCrashSocket = () => {\r\n  const onCloseSocketMessage = \"Went to another page\";\r\n  crashSocket.close(onCloseSocketMessage, true);\r\n\r\n  setGameCircleValue(null);\r\n};\r\n","import notifybarManager from \"components/NotifyBar/notifybar-manager\";\r\nimport { CrashManagerType } from \"../..\";\r\n\r\nexport const acceptBet = function (\r\n  this: CrashManagerType,\r\n  balance: string | number,\r\n  error?: string,\r\n) {\r\n  this.updateBalance(balance);\r\n  const { general } = this.fields;\r\n  general.playableStatus = \"play\";\r\n\r\n  if (!error) {\r\n    notifybarManager.success({\r\n      message: \"Bet successfully placed!\",\r\n    });\r\n  } else {\r\n    this.error(error);\r\n  }\r\n};\r\n","import { notifyBarManager } from \"components\";\r\nimport { CrashManagerType } from \"../..\";\r\n\r\nexport const buttonOnClick = function (this: CrashManagerType) {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (!token) {\r\n    const message = this.intl.formatMessage({ id: \"plinko.bet.notLoggedIn\" });\r\n    notifyBarManager.error({\r\n      message,\r\n    });\r\n    return;\r\n  }\r\n  const { general, manual, auto } = this.fields;\r\n  const { betAmount, payout, profit } = manual;\r\n  const { name } = general.coinSelected;\r\n  const { data } = auto;\r\n  if (!data.isOpen) {\r\n    switch (\r\n      general.gameMode //manual\r\n    ) {\r\n      case \"update_value\":\r\n      case \"crashed\":\r\n        switch (general.playableStatus) {\r\n          case \"watch\":\r\n            general.playableStatus = \"wait\";\r\n            break;\r\n          // @ts-ignore -- fallthrough\r\n          case \"play\":\r\n            this.exitTheBet(true);\r\n          /*fallthrough*/\r\n          case \"wait\":\r\n          default:\r\n            general.playableStatus = \"watch\";\r\n            break;\r\n        }\r\n        break;\r\n      case \"loading\":\r\n        general.playableStatus = \"watch\";\r\n        break;\r\n\r\n      case \"new_round\":\r\n        general.playableStatus = \"wait\";\r\n        this.makeRequest(betAmount, name, payout, profit, true);\r\n\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  } else {\r\n    //auto\r\n    const setAutoStarted = () => {\r\n      data.winStatus = \"noPlay\";\r\n      this.setAutoStarted(!data.isStarted);\r\n\r\n      if (general.playableStatus !== \"play\") {\r\n        general.playableStatus = data.isStarted ? \"wait\" : \"watch\";\r\n      }\r\n\r\n      if (data.isStarted) {\r\n        data.baseBet = manual.betAmount;\r\n      } else {\r\n        this.stopAutoMode();\r\n      }\r\n    };\r\n\r\n    switch (general.gameMode) {\r\n      case \"new_round\":\r\n        setAutoStarted();\r\n        if (data.isStarted) {\r\n          this.makeRequest(betAmount, name, payout, profit);\r\n        }\r\n\r\n        break;\r\n      // @ts-ignore -- fallthrough\r\n      case \"update_value\":\r\n        if (general.playableStatus === \"play\") {\r\n          this.exitTheBet(true);\r\n        }\r\n      /*fallthrough*/\r\n      case \"crashed\":\r\n        setAutoStarted();\r\n\r\n        break;\r\n\r\n      case \"loading\":\r\n      default:\r\n        general.playableStatus = \"watch\";\r\n        this.setAutoStarted(false);\r\n        break;\r\n    }\r\n  }\r\n\r\n  this.setButtonStatus();\r\n};\r\n","import { crashSocket } from \"utils\";\r\nimport { CrashManagerType } from \"../..\";\r\n\r\nexport const exitTheBet = function (this: CrashManagerType, manual = false) {\r\n  const { fields } = this;\r\n  const { data } = fields.auto;\r\n\r\n  if (data.isStarted) {\r\n    data.winStatus = \"win\";\r\n  }\r\n\r\n  if (manual) {\r\n    this.fields.general.isWaitServerAnswer = true;\r\n    crashSocket.send({ type: \"cashout_bet\" });\r\n  } else {\r\n    fields.general.playableStatus = \"watch\";\r\n    this.setButtonStatus();\r\n  }\r\n  localStorage.removeItem(\"crashBet\");\r\n};\r\n","import { liveStatsManager } from \"components/LiveStats/eventEmitter/emitter\";\r\nimport { CrashGameCircleValue, CrashManagerType } from \"../..\";\r\n\r\nexport const setGameMode = function (\r\n  this: CrashManagerType,\r\n  mode: CrashGameCircleValue,\r\n) {\r\n  const { general, manual, auto } = this.fields;\r\n  const { betAmount, payout, profit } = manual;\r\n  const { name } = general.coinSelected;\r\n  const { data } = auto;\r\n  general.gameMode = mode;\r\n  const crashPayoutText = document.getElementById(\r\n    \"crash-payout-text\",\r\n  ) as HTMLTitleElement | null;\r\n\r\n  const payoutClassList = crashPayoutText?.classList;\r\n  switch (mode) {\r\n    case \"crashed\":\r\n      if (\r\n        general.playableStatus === \"play\" ||\r\n        this.fields.general.isWaitServerAnswer\r\n      ) {\r\n        data.winStatus = \"loss\";\r\n        const { liveValues } = this;\r\n        liveStatsManager.addBet({\r\n          amount: Number(liveValues.amount),\r\n          profit: Number(-liveValues.amount),\r\n          coin: name,\r\n        });\r\n\r\n        payoutClassList?.add(\"canvasVarelaError\");\r\n      }\r\n\r\n      if (!data.isStarted) {\r\n        //manual\r\n        localStorage.removeItem(\"crashBet\");\r\n\r\n        switch (general.playableStatus) {\r\n          case \"wait\":\r\n            general.playableStatus = \"wait\";\r\n            break;\r\n          case \"play\":\r\n          case \"watch\":\r\n          default:\r\n            general.playableStatus = \"watch\";\r\n            break;\r\n        }\r\n      } else {\r\n        //auto\r\n\r\n        general.playableStatus = \"wait\";\r\n        this.reactToAutoLimits();\r\n        this.reactToAutoParams();\r\n      }\r\n\r\n      this.fields.general.isWaitServerAnswer = false;\r\n      break;\r\n\r\n    case \"new_round\":\r\n      payoutClassList?.remove(\"canvasVarelaError\");\r\n\r\n      switch (general.playableStatus) {\r\n        case \"wait\":\r\n          this.makeRequest(betAmount, name, payout, profit, !data.isStarted);\r\n\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n      break;\r\n\r\n    case \"update_value\":\r\n      if (data.isStarted && general.playableStatus !== \"play\") {\r\n        general.playableStatus = \"wait\";\r\n      } else if (\r\n        data.isOpen &&\r\n        !data.isStarted &&\r\n        general.playableStatus === \"play\"\r\n      ) {\r\n        setTimeout(() => {\r\n          this.exitTheBet(true);\r\n        }, 111);\r\n      }\r\n      break;\r\n\r\n    default:\r\n      break;\r\n  }\r\n\r\n  this.setButtonStatus();\r\n};\r\n","import { CrashManagerType } from \"../..\";\r\n\r\nexport const stopAutoMode = function (this: CrashManagerType) {\r\n  this.setAutoStarted(false);\r\n  const { general } = this.fields;\r\n  if (general.playableStatus !== \"play\") {\r\n    general.playableStatus = \"watch\";\r\n  }\r\n\r\n  const { limitsActualValues } = this.fields.auto.data;\r\n  limitsActualValues.profit = 0;\r\n  limitsActualValues.numberOfBets = 0;\r\n  limitsActualValues.betAmount = 0;\r\n\r\n  this.updateAutoLimitsField();\r\n  this.updateManualFields();\r\n};\r\n","import { CrashAutoParams, CrashManagerType } from \"../..\";\r\n\r\nexport const setAutoParams = function (\r\n  this: CrashManagerType,\r\n  params: CrashAutoParams,\r\n) {\r\n  this.fields.auto.values.params = params;\r\n  this.updateAutoParamsField();\r\n};\r\n","import { CrashAutoLimits, CrashManagerType } from \"../..\";\r\n\r\nexport const setAutoLimits = function (\r\n  this: CrashManagerType,\r\n  limits: CrashAutoLimits,\r\n) {\r\n  this.fields.auto.values.limits = limits;\r\n  this.updateAutoLimitsField();\r\n};\r\n","import { CrashManagerType, ManualFieldsNames } from \"../..\";\r\n\r\nexport const setManualField = function (\r\n  this: CrashManagerType,\r\n  field: ManualFieldsNames,\r\n  value: number | string,\r\n) {\r\n  if (!Number(value) && Number(value) !== 0) {\r\n    return;\r\n  }\r\n\r\n  this.fields.manual[field] = value;\r\n  this.updateDependentManualFields(field);\r\n  this.updateManualFields();\r\n};\r\n","import { liveStatsManager } from \"components/LiveStats/eventEmitter/emitter\";\r\nimport { crashSocketsList } from \"pages/Crash/crashSocketWatcher\";\r\nimport { ManagerListenerProps } from \"pages/Crash/crashTypes\";\r\nimport { crashSocket, rangeBetween, toFixed } from \"utils\";\r\nimport { CrashManagerType } from \"../../types\";\r\n\r\nexport function socketListener(this: CrashManagerType) {\r\n  const { general, manual } = this.fields;\r\n  const managerListener = (data: ManagerListenerProps) => {\r\n    switch (data.method) {\r\n      case \"update_coin_parameters\":\r\n        const min = Number(data.coinPrice.minimum_bet),\r\n          max = Number(data.coinPrice.maximum_bet);\r\n\r\n        general.coinData = {\r\n          maximum_bet: max,\r\n          minimum_bet: min,\r\n          maximum_profit: Number(data.coinPrice.maximum_profit),\r\n          price: Number(data.coinPrice?.price),\r\n        };\r\n        manual.betAmount = toFixed(\r\n          rangeBetween(Number(manual.betAmount), min, max),\r\n        );\r\n        this.updateDependentManualFields();\r\n        this.updateManualFields();\r\n\r\n        break;\r\n\r\n      case \"crashed\":\r\n      case \"new_round\":\r\n      case \"update_value\":\r\n        this.setGameMode(data.method);\r\n        break;\r\n\r\n      case \"bet_played\":\r\n        debugger;\r\n        this.acceptBet(data.balance, data.error);\r\n        break;\r\n\r\n      case \"bet_cashedout\":\r\n        this.cashedout(data.balance, data.error);\r\n        break;\r\n\r\n      case \"bet_cashedout_update\":\r\n        if (data.user_id === general.userId) {\r\n          this.exitTheBet();\r\n        }\r\n        break;\r\n\r\n      case \"new_bet_finalized\":\r\n        this.finalized(data.coin, data.profit);\r\n        this.fields.general.isWaitServerAnswer = false;\r\n\r\n        liveStatsManager.addBet({\r\n          amount: Number(data.amount),\r\n          profit: Number(data.profit),\r\n          coin: data.coin,\r\n        });\r\n        break;\r\n\r\n      case \"offline\":\r\n        this.stopAutoMode();\r\n        this.fields.general.playableStatus = \"watch\";\r\n        this.setButtonStatus();\r\n\r\n        const payoutText = document.getElementById(\"crash-payout-text\");\r\n        if (payoutText) payoutText.innerText = \"...\";\r\n\r\n        this.setConnection(false);\r\n        break;\r\n\r\n      case \"online\":\r\n        if (this.connection === \"offline\") {\r\n          crashSocket.send({ type: \"get_current_bets\" });\r\n        }\r\n        this.setConnection(true);\r\n        break;\r\n\r\n      case \"current_bets\":\r\n        const { userId, playableStatus } = this.fields.general;\r\n        if (\r\n          data?.bets[userId] &&\r\n          !data.bets[userId].profit &&\r\n          playableStatus !== \"play\"\r\n        ) {\r\n          this.fields.general.playableStatus = \"play\";\r\n          this.setButtonStatus();\r\n        }\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n  crashSocketsList.managerListener = managerListener;\r\n}\r\n","import { CrashManagerType } from \"../..\";\r\n\r\nexport const setActiveUserId = function (\r\n  this: CrashManagerType,\r\n  id: number | string,\r\n) {\r\n  this.fields.general.userId = id;\r\n};\r\n","import { CrashGameManager } from \".\";\r\n\r\nexport interface LimitsProps {\r\n  numberOfBets: number | string;\r\n  stopOnLoss: number | string;\r\n  stopOnProfit: number | string;\r\n  maxBetAmount: number | string;\r\n}\r\n\r\nexport type AutoOnRadioValues = 0 | 1 | 2;\r\n\r\nexport interface AutoOnValues {\r\n  value: AutoOnRadioValues;\r\n  isChangePayout: boolean;\r\n  payoutValue: string;\r\n  betPercentValue: string;\r\n}\r\n\r\nexport interface OnParamsProps {\r\n  onWin: AutoOnValues;\r\n  onLoss: AutoOnValues;\r\n}\r\n\r\nexport type CrashManagerType = CrashGameManager;\r\nexport type ManualFieldsNames = \"betAmount\" | \"profit\" | \"payout\" | \"chance\";\r\n\r\nexport type ManualFieldsValues = {\r\n  [Key in ManualFieldsNames]: number | string;\r\n};\r\n\r\nexport interface LiveValues {\r\n  profit: number | string;\r\n  amount: number | string;\r\n  coin: string;\r\n}\r\n\r\nexport interface CrashManagerCoinParams {\r\n  maximum_bet: number;\r\n  maximum_profit: number;\r\n  minimum_bet: number;\r\n  price: number;\r\n}\r\n\r\nexport interface CrashSelectedCoinData {\r\n  balance: number;\r\n  name: string;\r\n}\r\n\r\nexport type CrashGameCircleValue = \"crashed\" | \"new_round\" | \"update_value\";\r\nexport type PlayerPlayableStatus = \"watch\" | \"wait\" | \"play\";\r\n\r\nexport interface GeneralDataFields {\r\n  coinData?: CrashManagerCoinParams;\r\n  coinSelected: CrashSelectedCoinData;\r\n  gameMode: CrashGameCircleValue | \"loading\";\r\n  buttonStatus: ButtonValues;\r\n  playableStatus: PlayerPlayableStatus;\r\n  userId: number | string;\r\n\r\n  isWaitServerAnswer: boolean;\r\n}\r\n\r\nexport type CrashAutoLimits = LimitsProps;\r\nexport type CrashAutoParams = OnParamsProps;\r\n\r\nexport interface AutoFieldsValues {\r\n  data: {\r\n    isOpen: boolean;\r\n    isStarted: boolean;\r\n    winStatus: \"win\" | \"loss\" | \"noPlay\";\r\n\r\n    baseBet: number | string;\r\n    limitsActualValues: {\r\n      numberOfBets: number;\r\n      profit: number;\r\n      betAmount: number;\r\n    };\r\n  };\r\n  values: {\r\n    limits: CrashAutoLimits;\r\n    params: CrashAutoParams;\r\n  };\r\n}\r\nexport interface Fields {\r\n  manual: ManualFieldsValues;\r\n  auto: AutoFieldsValues;\r\n  general: GeneralDataFields;\r\n}\r\n\r\nexport enum CrashManualManagerEvents {\r\n  CHANGE_MANUAL_VALUES_EVENT = \"CHANGE_MANUAL_VALUES_EVENT\",\r\n}\r\n\r\nexport enum CrashGeneralManagerEvents {\r\n  CHANGE_BUTTON_STATUS_EVENT = \"CHANGE_BUTTON_STATUS_EVENT\",\r\n  CHANGE_IS_DISABLED_STATUS = \"CHANGE_IS_DISABLED_STATUS\",\r\n}\r\n\r\nexport enum CrashAutoManagerEvents {\r\n  CHANGE_AUTO_OPEN_STATUS = \"CHANGE_AUTO_OPEN_STATUS\",\r\n  CHANGE_AUTO_STARTED_STATUS = \"CHANGE_AUTO_STARTED_STATUS\",\r\n  CHANGE_AUTO_PARAMS_EVENT = \"CHANGE_AUTO_PARAMS_EVENT\",\r\n  CHANGE_AUTO_LIMITS_EVENT = \"CHANGE_AUTO_LIMITS_EVENT\",\r\n}\r\n\r\nexport type ManualListenerProps = {\r\n  field: ManualFieldsNames;\r\n  callBack: (data: any) => void;\r\n};\r\n\r\nexport enum ButtonValues {\r\n  Bet,\r\n  Bet_nextRound,\r\n  Wait_cancelBet,\r\n  Wait_loading,\r\n  Cashout,\r\n\r\n  Auto_setStarted,\r\n  Auto_setNoStarted,\r\n}\r\n\r\nexport enum CrashConnectionEvents {\r\n  CHANGE_CONNECTION = \"CHANGE_CONNECTION\",\r\n}\r\n","import { calculateChance, calculateProfit } from \"..\";\r\nimport {\r\n  CRASH_BET_AMOUNT_LOCAL_NAME_VALUE,\r\n  CRASH_PAYOUT_LOCAL_NAME_VALUE,\r\n} from \"../../consts\";\r\nimport { CrashManagerType, ManualFieldsNames } from \"../../types\";\r\n\r\nexport const updateDependentManualFields = function (\r\n  this: CrashManagerType,\r\n  field?: ManualFieldsNames,\r\n) {\r\n  const { manual } = this.fields;\r\n  const setProfit = () => {\r\n    manual.profit = calculateProfit(manual.betAmount, manual.payout);\r\n  };\r\n  const setChance = () => {\r\n    manual.chance = calculateChance(manual.payout);\r\n  };\r\n\r\n  const saveBetAmount = () => {\r\n    localStorage.setItem(\r\n      CRASH_BET_AMOUNT_LOCAL_NAME_VALUE,\r\n      `${manual.betAmount}`,\r\n    );\r\n  };\r\n  const savePayout = () => {\r\n    localStorage.setItem(CRASH_PAYOUT_LOCAL_NAME_VALUE, `${manual.payout}`);\r\n  };\r\n\r\n  if (field) {\r\n    switch (field) {\r\n      case \"betAmount\":\r\n        setProfit();\r\n        saveBetAmount();\r\n        break;\r\n      case \"payout\":\r\n        setProfit();\r\n        setChance();\r\n        savePayout();\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  } else {\r\n    setProfit();\r\n    setChance();\r\n  }\r\n};\r\n","import { CrashAutoManagerEvents, CrashManagerType } from \"../..\";\r\n\r\nexport const autoIsOpenListener = function (\r\n  this: CrashManagerType,\r\n  callBack: (value: boolean) => void,\r\n) {\r\n  this.addListener(CrashAutoManagerEvents.CHANGE_AUTO_OPEN_STATUS, callBack);\r\n\r\n  return () => {\r\n    this.removeListener(\r\n      CrashAutoManagerEvents.CHANGE_AUTO_OPEN_STATUS,\r\n      callBack,\r\n    );\r\n  };\r\n};\r\n","import { rangeBetween } from \"utils\";\r\nimport { CrashManagerType } from \"../..\";\r\n\r\nexport const reactToAutoParams = function (this: CrashManagerType) {\r\n  const { auto, manual, general } = this.fields;\r\n  const { data, values } = auto;\r\n  const { coinData } = general;\r\n\r\n  const autoParamKey =\r\n    data.winStatus === \"loss\"\r\n      ? \"onLoss\"\r\n      : data.winStatus === \"win\"\r\n      ? \"onWin\"\r\n      : null;\r\n\r\n  if (autoParamKey) {\r\n    const { value, isChangePayout, payoutValue, betPercentValue } =\r\n      values.params[autoParamKey];\r\n\r\n    switch (value) {\r\n      case 0:\r\n        let newBetAmount =\r\n          Number(manual.betAmount) +\r\n          Number(manual.betAmount) * (Number(betPercentValue) / 100);\r\n        if (coinData) {\r\n          newBetAmount = rangeBetween(\r\n            newBetAmount,\r\n            coinData.minimum_bet,\r\n            coinData.maximum_bet,\r\n          );\r\n        }\r\n\r\n        manual.betAmount = newBetAmount.toFixed(8);\r\n        break;\r\n\r\n      case 1:\r\n        manual.betAmount = data.baseBet;\r\n        break;\r\n\r\n      case 2:\r\n        this.stopAutoMode();\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (isChangePayout) {\r\n      manual.payout = Number(payoutValue);\r\n    }\r\n  }\r\n\r\n  this.updateManualFields();\r\n};\r\n","import { CrashManagerType } from \"../..\";\r\n\r\nexport const reactToAutoLimits = function (this: CrashManagerType) {\r\n  const { auto, manual } = this.fields;\r\n  const { data, values } = auto;\r\n  const { limitsActualValues } = data;\r\n\r\n  limitsActualValues.numberOfBets += 1;\r\n  limitsActualValues.betAmount += Number(manual.betAmount);\r\n\r\n  switch (data.winStatus) {\r\n    case \"loss\":\r\n      limitsActualValues.profit -= Number(manual.betAmount);\r\n      break;\r\n    case \"win\":\r\n      limitsActualValues.profit +=\r\n        Number(manual.betAmount) * Number(manual.payout) -\r\n        Number(manual.betAmount);\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  const {\r\n    profit,\r\n    numberOfBets: betsValue,\r\n    betAmount: generalBetAmount,\r\n  } = limitsActualValues;\r\n  const { stopOnLoss, stopOnProfit, numberOfBets, maxBetAmount } =\r\n    values.limits;\r\n\r\n  if (Number(stopOnLoss) && Number(stopOnLoss) * -1 - profit >= 0) {\r\n    this.stopAutoMode();\r\n  }\r\n\r\n  if (Number(stopOnProfit) && Number(stopOnProfit) - profit <= 0) {\r\n    this.stopAutoMode();\r\n  }\r\n\r\n  if (Number(numberOfBets) && Number(numberOfBets) - betsValue <= 0) {\r\n    this.stopAutoMode();\r\n  }\r\n\r\n  if (Number(maxBetAmount) && Number(maxBetAmount) - generalBetAmount <= 0) {\r\n    this.stopAutoMode();\r\n  }\r\n\r\n  this.updateAutoLimitsField();\r\n};\r\n","import { CrashManagerType, CrashManualManagerEvents } from \"../..\";\r\n\r\nexport const updateManualFields = function (this: CrashManagerType) {\r\n  this.emit(\r\n    CrashManualManagerEvents.CHANGE_MANUAL_VALUES_EVENT,\r\n    this.fields.manual,\r\n  );\r\n};\r\n","import {\r\n  CrashAutoLimits,\r\n  CrashAutoManagerEvents,\r\n  CrashManagerType,\r\n} from \"../..\";\r\n\r\nexport const autoLimitsListener = function (\r\n  this: CrashManagerType,\r\n  callBack: (data: CrashAutoLimits) => void,\r\n) {\r\n  this.addListener(CrashAutoManagerEvents.CHANGE_AUTO_LIMITS_EVENT, callBack);\r\n\r\n  return () => {\r\n    this.removeListener(\r\n      CrashAutoManagerEvents.CHANGE_AUTO_LIMITS_EVENT,\r\n      callBack,\r\n    );\r\n  };\r\n};\r\n","import {\r\n  CrashAutoManagerEvents,\r\n  CrashAutoParams,\r\n  CrashManagerType,\r\n} from \"../..\";\r\n\r\nexport const autoParamsListener = function (\r\n  this: CrashManagerType,\r\n  callBack: (data: CrashAutoParams) => void,\r\n) {\r\n  this.addListener(CrashAutoManagerEvents.CHANGE_AUTO_PARAMS_EVENT, callBack);\r\n\r\n  return () => {\r\n    this.removeListener(\r\n      CrashAutoManagerEvents.CHANGE_AUTO_PARAMS_EVENT,\r\n      callBack,\r\n    );\r\n  };\r\n};\r\n","import { CrashManagerType } from \"../..\";\r\n\r\nexport const setSelectedCoin = function (\r\n  this: CrashManagerType,\r\n  balance: number,\r\n  name: string,\r\n) {\r\n  this.fields.general.coinSelected = {\r\n    balance,\r\n    name,\r\n  };\r\n};\r\n","import {\r\n  CrashManagerType,\r\n  CrashManualManagerEvents,\r\n  ManualFieldsValues,\r\n} from \"../..\";\r\n\r\nexport const manualValuesListener = function (\r\n  this: CrashManagerType,\r\n  callBack: (value: ManualFieldsValues) => void,\r\n) {\r\n  this.addListener(\r\n    CrashManualManagerEvents.CHANGE_MANUAL_VALUES_EVENT,\r\n    callBack,\r\n  );\r\n\r\n  return () => {\r\n    this.removeListener(\r\n      CrashManualManagerEvents.CHANGE_MANUAL_VALUES_EVENT,\r\n      callBack,\r\n    );\r\n  };\r\n};\r\n","import { CrashAutoManagerEvents, CrashManagerType } from \"../..\";\r\n\r\nexport const setIsAutoModeOpen = function (\r\n  this: CrashManagerType,\r\n  value: boolean,\r\n) {\r\n  const { auto, general } = this.fields;\r\n  const { data } = auto;\r\n  data.isOpen = value;\r\n  this.setAutoStarted(false)\r\n\r\n  if (general.playableStatus !== \"play\") {\r\n    general.playableStatus = \"watch\";\r\n  }\r\n\r\n  this.setButtonStatus();\r\n  this.emit(CrashAutoManagerEvents.CHANGE_AUTO_OPEN_STATUS, data.isOpen);\r\n};\r\n","import { CrashAutoManagerEvents, CrashManagerType } from \"../..\";\r\n\r\nexport const updateAutoParamsField = function (this: CrashManagerType) {\r\n  this.emit(\r\n    CrashAutoManagerEvents.CHANGE_AUTO_PARAMS_EVENT,\r\n    this.fields.auto.values.params,\r\n  );\r\n};\r\n","import { toFixed } from \"utils\";\r\nimport { CrashAutoManagerEvents, CrashManagerType } from \"../..\";\r\n\r\nexport const updateAutoLimitsField = function (this: CrashManagerType) {\r\n  const { values, data } = this.fields.auto;\r\n  const { limits } = values;\r\n\r\n  /* If we need autoLimist coundown -- uncomment this code, and return const emitValues in this.emit\r\n  const { limitsActualValues } = data;\r\n\r\n  //@ts-ignore\r\n    const emitValues: CrashAutoLimits = data.isStarted\r\n      ? {\r\n          numberOfBets: Number(limits.numberOfBets)\r\n            ? Number(limits.numberOfBets) - limitsActualValues.numberOfBets\r\n            : limits.numberOfBets,\r\n          stopOnLoss: toFixed(\r\n            Number(limits.stopOnLoss)\r\n              ? Number(limits.stopOnLoss) - limitsActualValues.profit * -1\r\n              : limits.stopOnLoss,\r\n          ),\r\n          stopOnProfit: toFixed(\r\n            Number(limits.stopOnProfit)\r\n              ? Number(limits.stopOnProfit) - limitsActualValues.profit\r\n              : limits.stopOnProfit,\r\n          ),\r\n          maxBetAmount: toFixed(\r\n            Number(limits.maxBetAmount)\r\n              ? Number(limits.maxBetAmount) - limitsActualValues.betAmount\r\n              : limits.maxBetAmount,\r\n          ),\r\n        }\r\n      : limits;\r\n  */\r\n\r\n  this.emit(CrashAutoManagerEvents.CHANGE_AUTO_LIMITS_EVENT, limits);\r\n};\r\n","import {\r\n  ButtonValues,\r\n  CrashGeneralManagerEvents,\r\n  CrashManagerType,\r\n} from \"../..\";\r\n\r\nexport const betButtonStatusListener = function (\r\n  this: CrashManagerType,\r\n  callback: (buttonValue: ButtonValues) => void,\r\n) {\r\n  this.addListener(\r\n    CrashGeneralManagerEvents.CHANGE_BUTTON_STATUS_EVENT,\r\n    callback,\r\n  );\r\n\r\n  return () => {\r\n    this.removeListener(\r\n      CrashGeneralManagerEvents.CHANGE_BUTTON_STATUS_EVENT,\r\n      callback,\r\n    );\r\n  };\r\n};\r\n","export const checkIsSupport = (value: number) => {\r\n  if (!value || value < 0 || value === Infinity) {\r\n    value = 0;\r\n  }\r\n\r\n  return value;\r\n};\r\n","import { toFixed } from \"utils\";\r\nimport { checkIsSupport } from \"./checkIsSupport\";\r\n\r\nexport const calculateProfit = (\r\n  betAmount: number | string,\r\n  payout: number | string,\r\n) => {\r\n  let profit = Number(\r\n    toFixed(Number(betAmount) * Number(payout) - Number(betAmount)),\r\n  );\r\n\r\n  profit = checkIsSupport(profit);\r\n\r\n  return profit;\r\n};\r\n","import { toFixed } from \"utils\";\r\nimport { checkIsSupport } from \"./checkIsSupport\";\r\n\r\nexport const calculateChance = (payout: number | string) => {\r\n  let chance = (100 - 3) / Number(payout);\r\n\r\n  chance = checkIsSupport(chance);\r\n\r\n  return toFixed(chance, 2);\r\n};\r\n","import { crashSocket, track } from \"utils\";\r\n\r\nexport const makeRequest = (\r\n  amount: number | string,\r\n  coinName: string,\r\n  cashout: number | string,\r\n\r\n  isSaveToLocal = false,\r\n) => {\r\n  const betAmountValue = Number(amount).toFixed(8);\r\n\r\n  crashSocket.send({\r\n    type: \"place_bet\",\r\n    bet_amt: betAmountValue,\r\n    coin: coinName,\r\n    auto_cashout: cashout,\r\n  });\r\n\r\n  if (isSaveToLocal) {\r\n    try {\r\n      localStorage.setItem(\r\n        \"crashBet\",\r\n        `{\"amt\":\"${betAmountValue}\",\"coin\":\"${coinName}\"}`,\r\n      );\r\n    } catch (e) {\r\n      track()?.errors(e);\r\n    }\r\n  }\r\n};\r\n","import {\r\n  ButtonValues,\r\n  CrashGeneralManagerEvents,\r\n  CrashManagerType,\r\n} from \"../../types\";\r\n\r\nexport const setButtonStatus = function (this: CrashManagerType) {\r\n  const { general, auto } = this.fields;\r\n  const setStatus = (status: ButtonValues) => {\r\n    general.buttonStatus = status;\r\n  };\r\n\r\n  if (!auto.data.isOpen) {\r\n    //manual\r\n    switch (general.gameMode) {\r\n      case \"loading\":\r\n        setStatus(ButtonValues.Bet_nextRound);\r\n        break;\r\n      case \"new_round\":\r\n        switch (general.playableStatus) {\r\n          case \"watch\":\r\n            setStatus(ButtonValues.Bet);\r\n            break;\r\n\r\n          case \"play\":\r\n          default:\r\n            setStatus(ButtonValues.Wait_loading);\r\n            break;\r\n        }\r\n        break;\r\n      case \"update_value\":\r\n        switch (general.playableStatus) {\r\n          case \"play\":\r\n            setStatus(ButtonValues.Cashout);\r\n            break;\r\n\r\n          case \"watch\":\r\n            setStatus(ButtonValues.Bet_nextRound);\r\n            break;\r\n\r\n          case \"wait\":\r\n          default:\r\n            setStatus(ButtonValues.Wait_cancelBet);\r\n            break;\r\n        }\r\n        break;\r\n      case \"crashed\":\r\n        switch (general.playableStatus) {\r\n          case \"wait\":\r\n            setStatus(ButtonValues.Wait_cancelBet);\r\n            break;\r\n\r\n          case \"watch\":\r\n          default:\r\n            setStatus(ButtonValues.Bet_nextRound);\r\n            break;\r\n        }\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  } else {\r\n    //auto\r\n\r\n    if (auto.data.isStarted) {\r\n      setStatus(ButtonValues.Auto_setNoStarted);\r\n    } else {\r\n      setStatus(ButtonValues.Auto_setStarted);\r\n    }\r\n  }\r\n\r\n  this.emit(\r\n    CrashGeneralManagerEvents.CHANGE_BUTTON_STATUS_EVENT,\r\n    this.fields.general.buttonStatus,\r\n  );\r\n  this.setDisabled();\r\n};\r\n","import { EventEmitter } from \"events\";\r\n\r\nimport notifybarManager from \"components/NotifyBar/notifybar-manager\";\r\nimport { toFixed } from \"utils\";\r\nimport { coinsManager } from \"hooks\";\r\nimport { GetLocaleShape } from \"providers\";\r\n\r\nimport {\r\n  ButtonValues,\r\n  CrashAutoManagerEvents,\r\n  CrashConnectionEvents,\r\n  CrashGeneralManagerEvents,\r\n  LiveValues,\r\n} from \".\";\r\nimport {\r\n  CRASH_BET_AMOUNT_LOCAL_NAME_VALUE,\r\n  CRASH_PAYOUT_LOCAL_NAME_VALUE,\r\n  DEFAULT_CRASH_PAYOUT_VALUE,\r\n} from \"./consts\";\r\n\r\nimport {\r\n  calculateChance,\r\n  closeCrashSocket,\r\n  buttonOnClick,\r\n  initCrashSocket,\r\n  reactToAutoLimits,\r\n  reactToAutoParams,\r\n  setGameMode,\r\n  socketListener,\r\n  updateDependentManualFields,\r\n  setManualField,\r\n  setAutoLimits,\r\n  setAutoParams,\r\n  updateManualFields,\r\n  updateAutoParamsField,\r\n  updateAutoLimitsField,\r\n  setIsAutoModeOpen,\r\n  setSelectedCoin,\r\n  setActiveUserId,\r\n  acceptBet,\r\n  manualValuesListener,\r\n  betButtonStatusListener,\r\n  autoLimitsListener,\r\n  autoParamsListener,\r\n  autoIsOpenListener,\r\n  exitTheBet,\r\n  stopAutoMode,\r\n  makeRequest,\r\n} from \"./methods\";\r\nimport { setButtonStatus } from \"./methods/controller/updateButtonStatus\";\r\nimport { Fields } from \"./types\";\r\n\r\nexport class CrashGameManager extends EventEmitter {\r\n  fields: Fields;\r\n  intl: GetLocaleShape;\r\n  liveValues: LiveValues = {\r\n    profit: 0,\r\n    amount: 0,\r\n    coin: coinsManager.selectedCoin?.coin || \"\",\r\n  };\r\n  connection: \"online\" | \"offline\" = \"online\";\r\n  constructor(fields: Fields, intl: GetLocaleShape) {\r\n    super();\r\n    this.fields = fields;\r\n    this.intl = intl;\r\n\r\n    const { manual } = this.fields;\r\n    manual.betAmount = toFixed(\r\n      localStorage.getItem(CRASH_BET_AMOUNT_LOCAL_NAME_VALUE) || 0,\r\n    );\r\n\r\n    manual.payout =\r\n      localStorage.getItem(CRASH_PAYOUT_LOCAL_NAME_VALUE) ||\r\n      DEFAULT_CRASH_PAYOUT_VALUE;\r\n    manual.chance = calculateChance(manual.payout);\r\n  }\r\n\r\n  initCrashSocket = initCrashSocket.bind(this);\r\n  closeCrashSocket = closeCrashSocket;\r\n\r\n  setConnection(isOnline: boolean) {\r\n    this.connection = isOnline ? \"online\" : \"offline\";\r\n    this.emit(CrashConnectionEvents.CHANGE_CONNECTION, isOnline);\r\n  }\r\n  setGameMode = setGameMode.bind(this);\r\n  setAutoLimits = setAutoLimits.bind(this);\r\n  setAutoParams = setAutoParams.bind(this);\r\n  setManualField = setManualField.bind(this);\r\n  setSelectedCoin = setSelectedCoin.bind(this);\r\n  setActiveUserId = setActiveUserId.bind(this);\r\n  setButtonStatus = setButtonStatus.bind(this);\r\n  setIsAutoModeOpen = setIsAutoModeOpen.bind(this);\r\n  setAutoStarted(value: boolean) {\r\n    this.fields.auto.data.isStarted = value;\r\n    this.emit(\r\n      CrashAutoManagerEvents.CHANGE_AUTO_STARTED_STATUS,\r\n      this.fields.auto.data.isStarted,\r\n    );\r\n  }\r\n  setDisabled() {\r\n    const isDisabled =\r\n      this.fields.general.buttonStatus === ButtonValues.Wait_loading ||\r\n      (this.fields.general.buttonStatus === ButtonValues.Auto_setStarted &&\r\n        this.fields.general.playableStatus === \"play\");\r\n\r\n    this.emit(CrashGeneralManagerEvents.CHANGE_IS_DISABLED_STATUS, isDisabled);\r\n  }\r\n\r\n  updateManualFields = updateManualFields.bind(this);\r\n  updateAutoParamsField = updateAutoParamsField.bind(this);\r\n  updateAutoLimitsField = updateAutoLimitsField.bind(this);\r\n  updateDependentManualFields = updateDependentManualFields.bind(this);\r\n\r\n  reactToAutoParams = reactToAutoParams.bind(this);\r\n  reactToAutoLimits = reactToAutoLimits.bind(this);\r\n\r\n  betButtonStatusListener = betButtonStatusListener.bind(this);\r\n  manualValuesListener = manualValuesListener.bind(this);\r\n  autoIsOpenListener = autoIsOpenListener.bind(this);\r\n  autoParamsListener = autoParamsListener.bind(this);\r\n  autoLimitListener = autoLimitsListener.bind(this);\r\n\r\n  connectionListener(callback: (isOnline: boolean) => void) {\r\n    this.addListener(CrashConnectionEvents.CHANGE_CONNECTION, callback);\r\n\r\n    return () => {\r\n      this.removeListener(CrashConnectionEvents.CHANGE_CONNECTION, callback);\r\n    };\r\n  }\r\n\r\n  autoStartedListener(callBack: (value: boolean) => void) {\r\n    this.addListener(\r\n      CrashAutoManagerEvents.CHANGE_AUTO_STARTED_STATUS,\r\n      callBack,\r\n    );\r\n\r\n    return () => {\r\n      this.removeListener(\r\n        CrashAutoManagerEvents.CHANGE_AUTO_STARTED_STATUS,\r\n        callBack,\r\n      );\r\n    };\r\n  }\r\n  disableListener(callBack: (isDisabled: boolean) => void) {\r\n    this.addListener(\r\n      CrashGeneralManagerEvents.CHANGE_IS_DISABLED_STATUS,\r\n      callBack,\r\n    );\r\n\r\n    return () => {\r\n      this.removeListener(\r\n        CrashGeneralManagerEvents.CHANGE_IS_DISABLED_STATUS,\r\n        callBack,\r\n      );\r\n    };\r\n  }\r\n\r\n  acceptBet = acceptBet.bind(this);\r\n  exitTheBet = exitTheBet.bind(this);\r\n  stopAutoMode = stopAutoMode.bind(this);\r\n  buttonOnClick = buttonOnClick.bind(this);\r\n  socketListener = socketListener.bind(this);\r\n\r\n  makeRequest(\r\n    amount: number | string,\r\n    coinName: string,\r\n    cashout: number | string,\r\n    profit: number | string,\r\n\r\n    isSaveToLocal = false,\r\n  ) {\r\n    this.liveValues.amount = amount;\r\n    this.liveValues.profit = profit;\r\n    this.liveValues.coin = coinName;\r\n    makeRequest(amount, coinName, cashout, isSaveToLocal);\r\n  }\r\n\r\n  updateBalance(balance: string | number) {\r\n    const { general } = this.fields;\r\n    coinsManager.coinValueUpdate(`${balance}`, this.liveValues.coin);\r\n    general.coinSelected.balance = Number(coinsManager.selectedCoin?.balance);\r\n  }\r\n\r\n  cashedout(balance: string | number, error?: string) {\r\n    this.updateBalance(balance);\r\n\r\n    if (error) {\r\n      this.error(error);\r\n    }\r\n  }\r\n\r\n  finalized(coin: string, profit: string) {\r\n    const intlMessage = this.intl.formatMessage({\r\n      id: \"crashInterface.messages.win\",\r\n    });\r\n    notifybarManager.success({\r\n      message: `${intlMessage} ${profit} ${coin}`,\r\n    });\r\n\r\n    this.fields.general.playableStatus = \"watch\";\r\n  }\r\n\r\n  error(message?: string) {\r\n    const error = message || \"unknown error\";\r\n    notifybarManager.error({\r\n      message: error,\r\n      timeOut: 4000,\r\n    });\r\n    console.log(\"crash auto stop error: \", error);\r\n\r\n    this.stopAutoMode();\r\n    this.fields.general.playableStatus = \"watch\";\r\n\r\n    this.setButtonStatus();\r\n  }\r\n}\r\n","import { ButtonValues, Fields } from \"..\";\r\n\r\nexport const fields: Fields = {\r\n  manual: {\r\n    betAmount: 0,\r\n    payout: 0,\r\n    chance: 0,\r\n    profit: 0,\r\n  },\r\n\r\n  general: {\r\n    gameMode: \"loading\",\r\n    buttonStatus: ButtonValues.Bet_nextRound,\r\n    playableStatus: \"watch\",\r\n    userId: -1,\r\n    coinSelected: {\r\n      balance: 0,\r\n      name: \"gem\",\r\n    },\r\n\r\n    isWaitServerAnswer: false,\r\n  },\r\n\r\n  auto: {\r\n    data: {\r\n      isOpen: false,\r\n      isStarted: false,\r\n      winStatus: \"noPlay\",\r\n\r\n      baseBet: 0,\r\n      limitsActualValues: {\r\n        numberOfBets: 0,\r\n        profit: 0,\r\n        betAmount: 0,\r\n      },\r\n    },\r\n    values: {\r\n      limits: {\r\n        numberOfBets: 5000,\r\n        maxBetAmount: 0,\r\n        stopOnLoss: 0,\r\n        stopOnProfit: 0,\r\n      },\r\n      params: {\r\n        onLoss: {\r\n          value: 1,\r\n          betPercentValue: \"100\",\r\n          isChangePayout: false,\r\n          payoutValue: \"2\",\r\n        },\r\n        onWin: {\r\n          value: 1,\r\n          betPercentValue: \"0\",\r\n          isChangePayout: false,\r\n          payoutValue: \"2\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n","import React, { MutableRefObject } from \"react\";\r\nimport { CrashManagerType } from \"..\";\r\n\r\nexport type CrashContextType = {\r\n  manager: CrashManagerType | null\r\n};\r\n\r\nexport const defaultValue: CrashContextType = {\r\n  manager: null\r\n};\r\n\r\nexport const Context = React.createContext<CrashContextType>(defaultValue);\r\n\r\nexport default Context;\r\n","import React, { FC, useEffect, useMemo } from \"react\";\r\nimport { useGetLocale } from \"providers\";\r\nimport { CrashGameManager, fields } from \"..\";\r\n\r\nimport Context from \"./Context\";\r\n\r\nexport const CrashControlProvider: FC = ({ children }) => {\r\n  const intl = useGetLocale();\r\n\r\n  const manager = useMemo(() => new CrashGameManager(fields, intl), []);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      manager?.removeAllListeners();\r\n    };\r\n  }, []);\r\n\r\n  return <Context.Provider value={{ manager }}>{children}</Context.Provider>;\r\n};\r\n\r\nexport default CrashControlProvider;\r\n","import { useContext } from \"react\";\r\nimport Context from \"./Context\";\r\nexport { default } from \"./Provider\";\r\n\r\nexport function useController() {\r\n  return useContext(Context);\r\n}\r\n"],"sourceRoot":""}